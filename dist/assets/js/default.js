(function () {
	'use strict';

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var config = {
	  prefix: "usa",
	};

	/**
	 * @name isElement
	 * @desc returns whether or not the given argument is a DOM element.
	 * @param {any} value
	 * @return {boolean}
	 */

	const isElement$1 = (value) =>
	  value && typeof value === "object" && value.nodeType === 1;

	/**
	 * @name select
	 * @desc selects elements from the DOM by class selector or ID selector.
	 * @param {string} selector - The selector to traverse the DOM with.
	 * @param {Document|HTMLElement?} context - The context to traverse the DOM
	 *   in. If not provided, it defaults to the document.
	 * @return {HTMLElement[]} - An array of DOM nodes or an empty array.
	 */
	var select$4 = (selector, context) => {
	  if (typeof selector !== "string") {
	    return [];
	  }

	  if (!context || !isElement$1(context)) {
	    context = window.document; // eslint-disable-line no-param-reassign
	  }

	  const selection = context.querySelectorAll(selector);
	  return Array.prototype.slice.call(selection);
	};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	// element-closest | CC0-1.0 | github.com/jonathantneal/closest

	(function (ElementProto) {
		if (typeof ElementProto.matches !== 'function') {
			ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {
				var element = this;
				var elements = (element.document || element.ownerDocument).querySelectorAll(selector);
				var index = 0;

				while (elements[index] && elements[index] !== element) {
					++index;
				}

				return Boolean(elements[index]);
			};
		}

		if (typeof ElementProto.closest !== 'function') {
			ElementProto.closest = function closest(selector) {
				var element = this;

				while (element && element.nodeType === 1) {
					if (element.matches(selector)) {
						return element;
					}

					element = element.parentNode;
				}

				return null;
			};
		}
	})(window.Element.prototype);

	// polyfill Element.prototype.closest


	var delegate$2 = function delegate(selector, fn) {
	  return function delegation(event) {
	    var target = event.target.closest(selector);
	    if (target) {
	      return fn.call(target, event);
	    }
	  }
	};

	var compose$1 = function compose(functions) {
	  return function(e) {
	    return functions.some(function(fn) {
	      return fn.call(this, e) === false;
	    }, this);
	  };
	};

	const delegate$1 = delegate$2;
	const compose = compose$1;

	const SPLAT = '*';

	var delegateAll$1 = function delegateAll(selectors) {
	  const keys = Object.keys(selectors);

	  // XXX optimization: if there is only one handler and it applies to
	  // all elements (the "*" CSS selector), then just return that
	  // handler
	  if (keys.length === 1 && keys[0] === SPLAT) {
	    return selectors[SPLAT];
	  }

	  const delegates = keys.reduce(function(memo, selector) {
	    memo.push(delegate$1(selector, selectors[selector]));
	    return memo;
	  }, []);
	  return compose(delegates);
	};

	const assign$2 = objectAssign;
	const delegate = delegate$2;
	const delegateAll = delegateAll$1;

	const DELEGATE_PATTERN = /^(.+):delegate\((.+)\)$/;
	const SPACE = ' ';

	const getListeners = function(type, handler) {
	  var match = type.match(DELEGATE_PATTERN);
	  var selector;
	  if (match) {
	    type = match[1];
	    selector = match[2];
	  }

	  var options;
	  if (typeof handler === 'object') {
	    options = {
	      capture: popKey(handler, 'capture'),
	      passive: popKey(handler, 'passive')
	    };
	  }

	  var listener = {
	    selector: selector,
	    delegate: (typeof handler === 'object')
	      ? delegateAll(handler)
	      : selector
	        ? delegate(selector, handler)
	        : handler,
	    options: options
	  };

	  if (type.indexOf(SPACE) > -1) {
	    return type.split(SPACE).map(function(_type) {
	      return assign$2({type: _type}, listener);
	    });
	  } else {
	    listener.type = type;
	    return [listener];
	  }
	};

	var popKey = function(obj, key) {
	  var value = obj[key];
	  delete obj[key];
	  return value;
	};

	var behavior$7 = function behavior(events, props) {
	  const listeners = Object.keys(events)
	    .reduce(function(memo, type) {
	      var listeners = getListeners(type, events[type]);
	      return memo.concat(listeners);
	    }, []);

	  return assign$2({
	    add: function addBehavior(element) {
	      listeners.forEach(function(listener) {
	        element.addEventListener(
	          listener.type,
	          listener.delegate,
	          listener.options
	        );
	      });
	    },
	    remove: function removeBehavior(element) {
	      listeners.forEach(function(listener) {
	        element.removeEventListener(
	          listener.type,
	          listener.delegate,
	          listener.options
	        );
	      });
	    }
	  }, props);
	};

	const assign$1 = objectAssign;
	const Behavior = behavior$7;

	/**
	 * @name sequence
	 * @param {...Function} seq an array of functions
	 * @return { closure } callHooks
	 */
	// We use a named function here because we want it to inherit its lexical scope
	// from the behavior props object, not from the module
	const sequence = (...seq) =>
	  function callHooks(target = document.body) {
	    seq.forEach((method) => {
	      if (typeof this[method] === "function") {
	        this[method].call(this, target);
	      }
	    });
	  };

	/**
	 * @name behavior
	 * @param {object} events
	 * @param {object?} props
	 * @return {receptor.behavior}
	 */
	var behavior$6 = (events, props) =>
	  Behavior(
	    events,
	    assign$1(
	      {
	        on: sequence("init", "add"),
	        off: sequence("teardown", "remove"),
	      },
	      props
	    )
	  );

	const EXPANDED$1 = "aria-expanded";
	const CONTROLS = "aria-controls";
	const HIDDEN = "hidden";

	var toggle$2 = (button, expanded) => {
	  let safeExpanded = expanded;

	  if (typeof safeExpanded !== "boolean") {
	    safeExpanded = button.getAttribute(EXPANDED$1) === "false";
	  }

	  button.setAttribute(EXPANDED$1, safeExpanded);

	  const id = button.getAttribute(CONTROLS);
	  const controls = document.getElementById(id);
	  if (!controls) {
	    throw new Error(`No toggle target found with id: "${id}"`);
	  }

	  if (safeExpanded) {
	    controls.removeAttribute(HIDDEN);
	  } else {
	    controls.setAttribute(HIDDEN, "");
	  }

	  return safeExpanded;
	};

	// https://stackoverflow.com/a/7557433
	function isElementInViewport$2(
	  el,
	  win = window,
	  docEl = document.documentElement
	) {
	  const rect = el.getBoundingClientRect();

	  return (
	    rect.top >= 0 &&
	    rect.left >= 0 &&
	    rect.bottom <= (win.innerHeight || docEl.clientHeight) &&
	    rect.right <= (win.innerWidth || docEl.clientWidth)
	  );
	}

	var isInViewport = isElementInViewport$2;

	var events = {
	  // This used to be conditionally dependent on whether the
	  // browser supported touch events; if it did, `CLICK` was set to
	  // `touchstart`.  However, this had downsides:
	  //
	  // * It pre-empted mobile browsers' default behavior of detecting
	  //   whether a touch turned into a scroll, thereby preventing
	  //   users from using some of our components as scroll surfaces.
	  //
	  // * Some devices, such as the Microsoft Surface Pro, support *both*
	  //   touch and clicks. This meant the conditional effectively dropped
	  //   support for the user's mouse, frustrating users who preferred
	  //   it on those systems.
	  CLICK: "click",
	};

	const select$3 = select$4;
	const behavior$5 = behavior$6;
	const toggle$1 = toggle$2;
	const isElementInViewport$1 = isInViewport;
	const { CLICK: CLICK$2 } = events;
	const { prefix: PREFIX$3 } = config;

	const ACCORDION = `.${PREFIX$3}-accordion, .${PREFIX$3}-accordion--bordered`;
	const BUTTON = `.${PREFIX$3}-accordion__button[aria-controls]`;
	const EXPANDED = "aria-expanded";
	const MULTISELECTABLE = "data-allow-multiple";

	/**
	 * Get an Array of button elements belonging directly to the given
	 * accordion element.
	 * @param {HTMLElement} accordion
	 * @return {array<HTMLButtonElement>}
	 */
	const getAccordionButtons = (accordion) => {
	  const buttons = select$3(BUTTON, accordion);

	  return buttons.filter((button) => button.closest(ACCORDION) === accordion);
	};

	/**
	 * Toggle a button's "pressed" state, optionally providing a target
	 * state.
	 *
	 * @param {HTMLButtonElement} button
	 * @param {boolean?} expanded If no state is provided, the current
	 * state will be toggled (from false to true, and vice-versa).
	 * @return {boolean} the resulting state
	 */
	const toggleButton$1 = (button, expanded) => {
	  const accordion = button.closest(ACCORDION);
	  let safeExpanded = expanded;

	  if (!accordion) {
	    throw new Error(`${BUTTON} is missing outer ${ACCORDION}`);
	  }

	  safeExpanded = toggle$1(button, expanded);

	  // XXX multiselectable is opt-in, to preserve legacy behavior
	  const multiselectable = accordion.hasAttribute(MULTISELECTABLE);

	  if (safeExpanded && !multiselectable) {
	    getAccordionButtons(accordion).forEach((other) => {
	      if (other !== button) {
	        toggle$1(other, false);
	      }
	    });
	  }
	};

	/**
	 * @param {HTMLButtonElement} button
	 * @return {boolean} true
	 */
	const showButton = (button) => toggleButton$1(button, true);

	/**
	 * @param {HTMLButtonElement} button
	 * @return {boolean} false
	 */
	const hideButton = (button) => toggleButton$1(button, false);

	const accordion$1 = behavior$5(
	  {
	    [CLICK$2]: {
	      [BUTTON]() {
	        toggleButton$1(this);

	        if (this.getAttribute(EXPANDED) === "true") {
	          // We were just expanded, but if another accordion was also just
	          // collapsed, we may no longer be in the viewport. This ensures
	          // that we are still visible, so the user isn't confused.
	          if (!isElementInViewport$1(this)) this.scrollIntoView();
	        }
	      },
	    },
	  },
	  {
	    init(root) {
	      select$3(BUTTON, root).forEach((button) => {
	        const expanded = button.getAttribute(EXPANDED) === "true";
	        toggleButton$1(button, expanded);
	      });
	    },
	    ACCORDION,
	    BUTTON,
	    show: showButton,
	    hide: hideButton,
	    toggle: toggleButton$1,
	    getButtons: getAccordionButtons,
	  }
	);

	var src$4 = accordion$1;

	var accordion$2 = /*@__PURE__*/getDefaultExportFromCjs(src$4);

	var keymap$3 = {exports: {}};

	var keyboardeventKeyPolyfill = {exports: {}};

	/* global define, KeyboardEvent, module */

	(function (module, exports) {
		(function () {

		  var keyboardeventKeyPolyfill = {
		    polyfill: polyfill,
		    keys: {
		      3: 'Cancel',
		      6: 'Help',
		      8: 'Backspace',
		      9: 'Tab',
		      12: 'Clear',
		      13: 'Enter',
		      16: 'Shift',
		      17: 'Control',
		      18: 'Alt',
		      19: 'Pause',
		      20: 'CapsLock',
		      27: 'Escape',
		      28: 'Convert',
		      29: 'NonConvert',
		      30: 'Accept',
		      31: 'ModeChange',
		      32: ' ',
		      33: 'PageUp',
		      34: 'PageDown',
		      35: 'End',
		      36: 'Home',
		      37: 'ArrowLeft',
		      38: 'ArrowUp',
		      39: 'ArrowRight',
		      40: 'ArrowDown',
		      41: 'Select',
		      42: 'Print',
		      43: 'Execute',
		      44: 'PrintScreen',
		      45: 'Insert',
		      46: 'Delete',
		      48: ['0', ')'],
		      49: ['1', '!'],
		      50: ['2', '@'],
		      51: ['3', '#'],
		      52: ['4', '$'],
		      53: ['5', '%'],
		      54: ['6', '^'],
		      55: ['7', '&'],
		      56: ['8', '*'],
		      57: ['9', '('],
		      91: 'OS',
		      93: 'ContextMenu',
		      144: 'NumLock',
		      145: 'ScrollLock',
		      181: 'VolumeMute',
		      182: 'VolumeDown',
		      183: 'VolumeUp',
		      186: [';', ':'],
		      187: ['=', '+'],
		      188: [',', '<'],
		      189: ['-', '_'],
		      190: ['.', '>'],
		      191: ['/', '?'],
		      192: ['`', '~'],
		      219: ['[', '{'],
		      220: ['\\', '|'],
		      221: [']', '}'],
		      222: ["'", '"'],
		      224: 'Meta',
		      225: 'AltGraph',
		      246: 'Attn',
		      247: 'CrSel',
		      248: 'ExSel',
		      249: 'EraseEof',
		      250: 'Play',
		      251: 'ZoomOut'
		    }
		  };

		  // Function keys (F1-24).
		  var i;
		  for (i = 1; i < 25; i++) {
		    keyboardeventKeyPolyfill.keys[111 + i] = 'F' + i;
		  }

		  // Printable ASCII characters.
		  var letter = '';
		  for (i = 65; i < 91; i++) {
		    letter = String.fromCharCode(i);
		    keyboardeventKeyPolyfill.keys[i] = [letter.toLowerCase(), letter.toUpperCase()];
		  }

		  function polyfill () {
		    if (!('KeyboardEvent' in window) ||
		        'key' in KeyboardEvent.prototype) {
		      return false;
		    }

		    // Polyfill `key` on `KeyboardEvent`.
		    var proto = {
		      get: function (x) {
		        var key = keyboardeventKeyPolyfill.keys[this.which || this.keyCode];

		        if (Array.isArray(key)) {
		          key = key[+this.shiftKey];
		        }

		        return key;
		      }
		    };
		    Object.defineProperty(KeyboardEvent.prototype, 'key', proto);
		    return proto;
		  }

		  {
		    module.exports = keyboardeventKeyPolyfill;
		  }

		})(); 
	} (keyboardeventKeyPolyfill));

	// these are the only relevant modifiers supported on all platforms,
	// according to MDN:
	// <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState>
	const MODIFIERS = {
	  'Alt':      'altKey',
	  'Control':  'ctrlKey',
	  'Ctrl':     'ctrlKey',
	  'Shift':    'shiftKey'
	};

	const MODIFIER_SEPARATOR = '+';

	const getEventKey = function(event, hasModifiers) {
	  var key = event.key;
	  if (hasModifiers) {
	    for (var modifier in MODIFIERS) {
	      if (event[MODIFIERS[modifier]] === true) {
	        key = [modifier, key].join(MODIFIER_SEPARATOR);
	      }
	    }
	  }
	  return key;
	};

	keymap$3.exports = function keymap(keys) {
	  const hasModifiers = Object.keys(keys).some(function(key) {
	    return key.indexOf(MODIFIER_SEPARATOR) > -1;
	  });
	  return function(event) {
	    var key = getEventKey(event, hasModifiers);
	    return [key, key.toLowerCase()]
	      .reduce(function(result, _key) {
	        if (_key in keys) {
	          result = keys[key].call(this, event);
	        }
	        return result;
	      }, undefined);
	  };
	};

	keymap$3.exports.MODIFIERS = MODIFIERS;

	var keymapExports = keymap$3.exports;

	const keymap$2 = keymapExports;
	const behavior$4 = behavior$6;

	const ANCHOR_BUTTON = `a[class*="usa-button"]`;

	const toggleButton = (event) => {
	  event.preventDefault();
	  event.target.click();
	};

	const anchorButton = behavior$4({
	  keydown: {
	    [ANCHOR_BUTTON]: keymap$2({
	      " ": toggleButton,
	    }),
	  },
	});

	var src$3 = anchorButton;

	var button = /*@__PURE__*/getDefaultExportFromCjs(src$3);

	var ignore = function ignore(element, fn) {
	  return function ignorance(e) {
	    if (element !== e.target && !element.contains(e.target)) {
	      return fn.call(this, e);
	    }
	  };
	};

	var receptor = {
	  behavior:     behavior$7,
	  delegate:     delegate$2,
	  delegateAll:  delegateAll$1,
	  ignore:       ignore,
	  keymap:       keymapExports,
	};

	var activeElement$1 = (htmlDocument = document) => htmlDocument.activeElement;

	const assign = objectAssign;
	const { keymap: keymap$1 } = receptor;
	const behavior$3 = behavior$6;
	const select$2 = select$4;
	const activeElement = activeElement$1;

	const FOCUSABLE =
	  'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';

	const tabHandler = (context) => {
	  const focusableElements = select$2(FOCUSABLE, context);
	  const firstTabStop = focusableElements[0];
	  const lastTabStop = focusableElements[focusableElements.length - 1];

	  // Special rules for when the user is tabbing forward from the last focusable element,
	  // or when tabbing backwards from the first focusable element
	  function tabAhead(event) {
	    if (activeElement() === lastTabStop) {
	      event.preventDefault();
	      firstTabStop.focus();
	    }
	  }

	  function tabBack(event) {
	    if (activeElement() === firstTabStop) {
	      event.preventDefault();
	      lastTabStop.focus();
	    }
	    // This checks if you want to set the initial focus to a container
	    // instead of an element within, and the user tabs back.
	    // Then we set the focus to the first
	    else if (!focusableElements.includes(activeElement())) {
	      event.preventDefault();
	      firstTabStop.focus();
	    }
	  }

	  return {
	    firstTabStop,
	    lastTabStop,
	    tabAhead,
	    tabBack,
	  };
	};

	var focusTrap = (context, additionalKeyBindings = {}) => {
	  const tabEventHandler = tabHandler(context);
	  const bindings = additionalKeyBindings;
	  const { Esc, Escape } = bindings;

	  if (Escape && !Esc) bindings.Esc = Escape;

	  //  TODO: In the future, loop over additional keybindings and pass an array
	  // of functions, if necessary, to the map keys. Then people implementing
	  // the focus trap could pass callbacks to fire when tabbing
	  const keyMappings = keymap$1(
	    assign(
	      {
	        Tab: tabEventHandler.tabAhead,
	        "Shift+Tab": tabEventHandler.tabBack,
	      },
	      additionalKeyBindings
	    )
	  );

	  const focusTrap = behavior$3(
	    {
	      keydown: keyMappings,
	    },
	    {
	      init() {
	        // TODO: is this desireable behavior? Should the trap always do this by default or should
	        // the component getting decorated handle this?
	        if (tabEventHandler.firstTabStop) {
	          tabEventHandler.firstTabStop.focus();
	        }
	      },
	      update(isActive) {
	        if (isActive) {
	          this.on();
	        } else {
	          this.off();
	        }
	      },
	    }
	  );

	  return focusTrap;
	};

	var scrollbarWidth = function getScrollbarWidth() {
	  // Creating invisible container
	  const outer = document.createElement("div");
	  outer.style.visibility = "hidden";
	  outer.style.overflow = "scroll"; // forcing scrollbar to appear
	  outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	  document.body.appendChild(outer);

	  // Creating inner element and placing it in the container
	  const inner = document.createElement("div");
	  outer.appendChild(inner);

	  // Calculating difference between container's full width and the child width
	  const scrollbarWidth = `${outer.offsetWidth - inner.offsetWidth}px`;

	  // Removing temporary elements from the DOM
	  outer.parentNode.removeChild(outer);

	  return scrollbarWidth;
	};

	const keymap = keymapExports;
	const behavior$2 = behavior$6;
	const select$1 = select$4;
	const toggle = toggle$2;
	const FocusTrap = focusTrap;
	const accordion = src$4;
	const ScrollBarWidth = scrollbarWidth;

	const { CLICK: CLICK$1 } = events;
	const { prefix: PREFIX$2 } = config;

	const BODY = "body";
	const HEADER = `.${PREFIX$2}-header`;
	const NAV = `.${PREFIX$2}-nav`;
	const NAV_CONTAINER = `.${PREFIX$2}-nav-container`;
	const NAV_PRIMARY = `.${PREFIX$2}-nav__primary`;
	const NAV_PRIMARY_ITEM = `.${PREFIX$2}-nav__primary-item`;
	const NAV_CONTROL = `button.${PREFIX$2}-nav__link`;
	const NAV_LINKS = `${NAV} a`;
	const NON_NAV_HIDDEN_ATTRIBUTE = `data-nav-hidden`;
	const OPENERS = `.${PREFIX$2}-menu-btn`;
	const CLOSE_BUTTON = `.${PREFIX$2}-nav__close`;
	const OVERLAY = `.${PREFIX$2}-overlay`;
	const CLOSERS = `${CLOSE_BUTTON}, .${PREFIX$2}-overlay`;
	const TOGGLES = [NAV, OVERLAY].join(", ");
	const NON_NAV_ELEMENTS = `body *:not(${HEADER}, ${NAV_CONTAINER}, ${NAV}, ${NAV} *):not([aria-hidden])`;
	const NON_NAV_HIDDEN = `[${NON_NAV_HIDDEN_ATTRIBUTE}]`;

	const ACTIVE_CLASS = "usa-js-mobile-nav--active";
	const VISIBLE_CLASS$1 = "is-visible";

	let navigation;
	let navActive;
	let nonNavElements;

	const isActive = () => document.body.classList.contains(ACTIVE_CLASS);
	const SCROLLBAR_WIDTH = ScrollBarWidth();
	const INITIAL_PADDING = window
	  .getComputedStyle(document.body)
	  .getPropertyValue("padding-right");
	const TEMPORARY_PADDING = `${
  parseInt(INITIAL_PADDING.replace(/px/, ""), 10) +
  parseInt(SCROLLBAR_WIDTH.replace(/px/, ""), 10)
}px`;

	const hideNonNavItems = () => {
	  const headerParent = document.querySelector(`${HEADER}`).parentNode;
	  nonNavElements = document.querySelectorAll(NON_NAV_ELEMENTS);

	  nonNavElements.forEach((nonNavElement) => {
	    if (nonNavElement !== headerParent) {
	      nonNavElement.setAttribute("aria-hidden", true);
	      nonNavElement.setAttribute(NON_NAV_HIDDEN_ATTRIBUTE, "");
	    }
	  });
	};

	const showNonNavItems = () => {
	  nonNavElements = document.querySelectorAll(NON_NAV_HIDDEN);

	  if (!nonNavElements) {
	    return;
	  }

	  // Remove aria-hidden from non-header elements
	  nonNavElements.forEach((nonNavElement) => {
	    nonNavElement.removeAttribute("aria-hidden");
	    nonNavElement.removeAttribute(NON_NAV_HIDDEN_ATTRIBUTE);
	  });
	};

	// Toggle all non-header elements #3527.
	const toggleNonNavItems = (active) => {
	  if (active) {
	    hideNonNavItems();
	  } else {
	    showNonNavItems();
	  }
	};

	const toggleNav = (active) => {
	  const { body } = document;
	  const safeActive = typeof active === "boolean" ? active : !isActive();

	  body.classList.toggle(ACTIVE_CLASS, safeActive);

	  select$1(TOGGLES).forEach((el) =>
	    el.classList.toggle(VISIBLE_CLASS$1, safeActive)
	  );

	  navigation.focusTrap.update(safeActive);

	  const closeButton = body.querySelector(CLOSE_BUTTON);
	  const menuButton = document.querySelector(OPENERS);

	  body.style.paddingRight =
	    body.style.paddingRight === TEMPORARY_PADDING
	      ? INITIAL_PADDING
	      : TEMPORARY_PADDING;

	  toggleNonNavItems(safeActive);

	  if (safeActive && closeButton) {
	    // The mobile nav was just activated. Focus on the close button, which is
	    // just before all the nav elements in the tab order.
	    closeButton.focus();
	  } else if (
	    !safeActive &&
	    menuButton &&
	    getComputedStyle(menuButton).display !== "none"
	  ) {
	    // The mobile nav was just deactivated. We don't want the focus to
	    // disappear into the void, so focus on the menu button if it's
	    // visible (this may have been what the user was just focused on,
	    // if they triggered the mobile nav by mistake).
	    menuButton.focus();
	  }

	  return safeActive;
	};

	const resize = () => {
	  const closer = document.body.querySelector(CLOSE_BUTTON);

	  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {
	    // When the mobile nav is active, and the close box isn't visible,
	    // we know the user's viewport has been resized to be larger.
	    // Let's make the page state consistent by deactivating the mobile nav.
	    navigation.toggleNav.call(closer, false);
	  }
	};

	const onMenuClose = () => navigation.toggleNav.call(navigation, false);

	const hideActiveNavDropdown = () => {
	  if (!navActive) {
	    return;
	  }

	  toggle(navActive, false);
	  navActive = null;
	};

	const focusNavButton = (event) => {
	  const parentNavItem = event.target.closest(NAV_PRIMARY_ITEM);

	  // Only shift focus if within dropdown
	  if (!event.target.matches(NAV_CONTROL)) {
	    const navControl = parentNavItem.querySelector(NAV_CONTROL);
	    if (navControl) {
	      navControl.focus();
	    }
	  }
	};

	const handleEscape = (event) => {
	  hideActiveNavDropdown();
	  focusNavButton(event);
	};

	navigation = behavior$2(
	  {
	    [CLICK$1]: {
	      [NAV_CONTROL]() {
	        // If another nav is open, close it
	        if (navActive !== this) {
	          hideActiveNavDropdown();
	        }
	        // store a reference to the last clicked nav link element, so we
	        // can hide the dropdown if another element on the page is clicked
	        if (!navActive) {
	          navActive = this;
	          toggle(navActive, true);
	        }

	        // Do this so the event handler on the body doesn't fire
	        return false;
	      },
	      [BODY]: hideActiveNavDropdown,
	      [OPENERS]: toggleNav,
	      [CLOSERS]: toggleNav,
	      [NAV_LINKS]() {
	        // A navigation link has been clicked! We want to collapse any
	        // hierarchical navigation UI it's a part of, so that the user
	        // can focus on whatever they've just selected.

	        // Some navigation links are inside accordions; when they're
	        // clicked, we want to collapse those accordions.
	        const acc = this.closest(accordion.ACCORDION);

	        if (acc) {
	          accordion.getButtons(acc).forEach((btn) => accordion.hide(btn));
	        }

	        // If the mobile navigation menu is active, we want to hide it.
	        if (isActive()) {
	          navigation.toggleNav.call(navigation, false);
	        }
	      },
	    },
	    keydown: {
	      [NAV_PRIMARY]: keymap({ Escape: handleEscape }),
	    },
	    focusout: {
	      [NAV_PRIMARY](event) {
	        const nav = event.target.closest(NAV_PRIMARY);

	        if (!nav.contains(event.relatedTarget)) {
	          hideActiveNavDropdown();
	        }
	      },
	    },
	  },
	  {
	    init(root) {
	      const trapContainer = root.matches(NAV) ? root : root.querySelector(NAV);

	      if (trapContainer) {
	        navigation.focusTrap = FocusTrap(trapContainer, {
	          Escape: onMenuClose,
	        });
	      }

	      resize();
	      window.addEventListener("resize", resize, false);
	    },
	    teardown() {
	      window.removeEventListener("resize", resize, false);
	      navActive = false;
	    },
	    focusTrap: null,
	    toggleNav,
	  }
	);

	var src$2 = navigation;

	var navigation$1 = /*@__PURE__*/getDefaultExportFromCjs(src$2);

	var once$1 = function once(listener, options) {
	  var wrapped = function wrappedOnce(e) {
	    e.currentTarget.removeEventListener(e.type, wrapped, options);
	    return listener.call(this, e);
	  };
	  return wrapped;
	};

	const once = once$1;
	const behavior$1 = behavior$6;
	const { CLICK } = events;
	const { prefix: PREFIX$1 } = config;

	const LINK = `.${PREFIX$1}-skipnav[href^="#"], .${PREFIX$1}-footer__return-to-top [href^="#"]`;
	const MAINCONTENT = "main-content";

	function setTabindex() {
	  // NB: we know because of the selector we're delegating to below that the
	  // href already begins with '#'
	  const id = encodeURI(this.getAttribute("href"));
	  const target = document.getElementById(
	    id === "#" ? MAINCONTENT : id.slice(1)
	  );

	  if (target) {
	    target.style.outline = "0";
	    target.setAttribute("tabindex", 0);
	    target.focus();
	    target.addEventListener(
	      "blur",
	      once(() => {
	        target.setAttribute("tabindex", -1);
	      })
	    );
	  }
	}

	var src$1 = behavior$1({
	  [CLICK]: {
	    [LINK]: setTabindex,
	  },
	});

	var skipnav = /*@__PURE__*/getDefaultExportFromCjs(src$1);

	const select = select$4;
	/**
	 * @name isElement
	 * @desc returns whether or not the given argument is a DOM element.
	 * @param {any} value
	 * @return {boolean}
	 */
	const isElement = (value) =>
	  value && typeof value === "object" && value.nodeType === 1;

	/**
	 * @name selectOrMatches
	 * @desc selects elements from the DOM by class selector or ID selector.
	 * @param {string} selector - The selector to traverse the DOM with.
	 * @param {Document|HTMLElement?} context - The context to traverse the DOM
	 *   in. If not provided, it defaults to the document.
	 * @return {HTMLElement[]} - An array of DOM nodes or an empty array.
	 */
	var selectOrMatches$1 = (selector, context) => {
	  const selection = select(selector, context);
	  if (typeof selector !== "string") {
	    return selection;
	  }

	  if (isElement(context) && context.matches(selector)) {
	    selection.push(context);
	  }

	  return selection;
	};

	// Tooltips
	const selectOrMatches = selectOrMatches$1;
	const behavior = behavior$6;
	const { prefix: PREFIX } = config;
	const isElementInViewport = isInViewport;

	const TOOLTIP = `.${PREFIX}-tooltip`;
	const TOOLTIP_TRIGGER = `.${PREFIX}-tooltip__trigger`;
	const TOOLTIP_TRIGGER_CLASS = `${PREFIX}-tooltip__trigger`;
	const TOOLTIP_CLASS = `${PREFIX}-tooltip`;
	const TOOLTIP_BODY_CLASS = `${PREFIX}-tooltip__body`;
	const SET_CLASS = "is-set";
	const VISIBLE_CLASS = "is-visible";
	const TRIANGLE_SIZE = 5;
	const ADJUST_WIDTH_CLASS = `${PREFIX}-tooltip__body--wrap`;

	/**
	 *
	 * @param {DOMElement} trigger - The tooltip trigger
	 * @returns {object} Elements for initialized tooltip; includes trigger, wrapper, and body
	 */
	const getTooltipElements = (trigger) => {
	  const wrapper = trigger.parentNode;
	  const body = wrapper.querySelector(`.${TOOLTIP_BODY_CLASS}`);

	  return { trigger, wrapper, body };
	};

	/**
	 * Shows the tooltip
	 * @param {HTMLElement} tooltipTrigger - the element that initializes the tooltip
	 */
	const showToolTip = (tooltipBody, tooltipTrigger, position) => {
	  tooltipBody.setAttribute("aria-hidden", "false");

	  // This sets up the tooltip body. The opacity is 0, but
	  // we can begin running the calculations below.
	  tooltipBody.classList.add(SET_CLASS);

	  /**
	   * Position the tooltip body when the trigger is hovered
	   * Removes old positioning classnames and reapplies. This allows
	   * positioning to change in case the user resizes browser or DOM manipulation
	   * causes tooltip to get clipped from viewport
	   *
	   * @param {string} setPos - can be "top", "bottom", "right", "left"
	   */
	  const setPositionClass = (setPos) => {
	    tooltipBody.classList.remove(`${TOOLTIP_BODY_CLASS}--top`);
	    tooltipBody.classList.remove(`${TOOLTIP_BODY_CLASS}--bottom`);
	    tooltipBody.classList.remove(`${TOOLTIP_BODY_CLASS}--right`);
	    tooltipBody.classList.remove(`${TOOLTIP_BODY_CLASS}--left`);
	    tooltipBody.classList.add(`${TOOLTIP_BODY_CLASS}--${setPos}`);
	  };

	  /**
	   * Removes old positioning styles. This allows
	   * re-positioning to change without inheriting other
	   * dynamic styles
	   *
	   * @param {HTMLElement} e - this is the tooltip body
	   */
	  const resetPositionStyles = (e) => {
	    // we don't override anything in the stylesheet when finding alt positions
	    e.style.top = null;
	    e.style.bottom = null;
	    e.style.right = null;
	    e.style.left = null;
	    e.style.margin = null;
	  };

	  /**
	   * get margin offset calculations
	   *
	   * @param {HTMLElement} target - this is the tooltip body
	   * @param {String} propertyValue - this is the tooltip body
	   */

	  const offsetMargin = (target, propertyValue) =>
	    parseInt(
	      window.getComputedStyle(target).getPropertyValue(propertyValue),
	      10
	    );

	  // offsetLeft = the left position, and margin of the element, the left
	  // padding, scrollbar and border of the offsetParent element
	  // offsetWidth = The offsetWidth property returns the viewable width of an
	  // element in pixels, including padding, border and scrollbar, but not
	  // the margin.

	  /**
	   * Calculate margin offset
	   * tooltip trigger margin(position) offset + tooltipBody offsetWidth
	   * @param {String} marginPosition
	   * @param {Number} tooltipBodyOffset
	   * @param {HTMLElement} trigger
	   */
	  const calculateMarginOffset = (
	    marginPosition,
	    tooltipBodyOffset,
	    trigger
	  ) => {
	    const offset =
	      offsetMargin(trigger, `margin-${marginPosition}`) > 0
	        ? tooltipBodyOffset - offsetMargin(trigger, `margin-${marginPosition}`)
	        : tooltipBodyOffset;

	    return offset;
	  };

	  /**
	   * Positions tooltip at the top
	   * @param {HTMLElement} e - this is the tooltip body
	   */
	  const positionTop = (e) => {
	    resetPositionStyles(e); // ensures we start from the same point
	    // get details on the elements object with

	    const topMargin = calculateMarginOffset(
	      "top",
	      e.offsetHeight,
	      tooltipTrigger
	    );

	    const leftMargin = calculateMarginOffset(
	      "left",
	      e.offsetWidth,
	      tooltipTrigger
	    );

	    setPositionClass("top");
	    e.style.left = `50%`; // center the element
	    e.style.top = `-${TRIANGLE_SIZE}px`; // consider the pseudo element
	    // apply our margins based on the offset
	    e.style.margin = `-${topMargin}px 0 0 -${leftMargin / 2}px`;
	  };

	  /**
	   * Positions tooltip at the bottom
	   * @param {HTMLElement} e - this is the tooltip body
	   */
	  const positionBottom = (e) => {
	    resetPositionStyles(e);

	    const leftMargin = calculateMarginOffset(
	      "left",
	      e.offsetWidth,
	      tooltipTrigger
	    );

	    setPositionClass("bottom");
	    e.style.left = `50%`;
	    e.style.margin = `${TRIANGLE_SIZE}px 0 0 -${leftMargin / 2}px`;
	  };

	  /**
	   * Positions tooltip at the right
	   * @param {HTMLElement} e - this is the tooltip body
	   */
	  const positionRight = (e) => {
	    resetPositionStyles(e);

	    const topMargin = calculateMarginOffset(
	      "top",
	      e.offsetHeight,
	      tooltipTrigger
	    );

	    setPositionClass("right");
	    e.style.top = `50%`;
	    e.style.left = `${
      tooltipTrigger.offsetLeft + tooltipTrigger.offsetWidth + TRIANGLE_SIZE
    }px`;
	    e.style.margin = `-${topMargin / 2}px 0 0 0`;
	  };

	  /**
	   * Positions tooltip at the right
	   * @param {HTMLElement} e - this is the tooltip body
	   */
	  const positionLeft = (e) => {
	    resetPositionStyles(e);

	    const topMargin = calculateMarginOffset(
	      "top",
	      e.offsetHeight,
	      tooltipTrigger
	    );

	    // we have to check for some utility margins
	    const leftMargin = calculateMarginOffset(
	      "left",
	      tooltipTrigger.offsetLeft > e.offsetWidth
	        ? tooltipTrigger.offsetLeft - e.offsetWidth
	        : e.offsetWidth,
	      tooltipTrigger
	    );

	    setPositionClass("left");
	    e.style.top = `50%`;
	    e.style.left = `-${TRIANGLE_SIZE}px`;
	    e.style.margin = `-${topMargin / 2}px 0 0 ${
      tooltipTrigger.offsetLeft > e.offsetWidth ? leftMargin : -leftMargin
    }px`; // adjust the margin
	  };

	  /**
	   * We try to set the position based on the
	   * original intention, but make adjustments
	   * if the element is clipped out of the viewport
	   * we constrain the width only as a last resort
	   * @param {HTMLElement} element(alias tooltipBody)
	   * @param {Number} attempt (--flag)
	   */

	  const maxAttempts = 2;

	  function findBestPosition(element, attempt = 1) {
	    // create array of optional positions
	    const positions = [
	      positionTop,
	      positionBottom,
	      positionRight,
	      positionLeft,
	    ];

	    let hasVisiblePosition = false;

	    // we take a recursive approach
	    function tryPositions(i) {
	      if (i < positions.length) {
	        const pos = positions[i];
	        pos(element);

	        if (!isElementInViewport(element)) {
	          // eslint-disable-next-line no-param-reassign
	          tryPositions((i += 1));
	        } else {
	          hasVisiblePosition = true;
	        }
	      }
	    }

	    tryPositions(0);
	    // if we can't find a position we compress it and try again
	    if (!hasVisiblePosition) {
	      element.classList.add(ADJUST_WIDTH_CLASS);
	      if (attempt <= maxAttempts) {
	        // eslint-disable-next-line no-param-reassign
	        findBestPosition(element, (attempt += 1));
	      }
	    }
	  }

	  switch (position) {
	    case "top":
	      positionTop(tooltipBody);
	      if (!isElementInViewport(tooltipBody)) {
	        findBestPosition(tooltipBody);
	      }
	      break;
	    case "bottom":
	      positionBottom(tooltipBody);
	      if (!isElementInViewport(tooltipBody)) {
	        findBestPosition(tooltipBody);
	      }
	      break;
	    case "right":
	      positionRight(tooltipBody);
	      if (!isElementInViewport(tooltipBody)) {
	        findBestPosition(tooltipBody);
	      }
	      break;
	    case "left":
	      positionLeft(tooltipBody);
	      if (!isElementInViewport(tooltipBody)) {
	        findBestPosition(tooltipBody);
	      }
	      break;
	  }

	  /**
	   * Actually show the tooltip. The VISIBLE_CLASS
	   * will change the opacity to 1
	   */
	  setTimeout(() => {
	    tooltipBody.classList.add(VISIBLE_CLASS);
	  }, 20);
	};

	/**
	 * Removes all the properties to show and position the tooltip,
	 * and resets the tooltip position to the original intention
	 * in case the window is resized or the element is moved through
	 * DOM manipulation.
	 * @param {HTMLElement} tooltipBody - The body of the tooltip
	 */
	const hideToolTip = (tooltipBody) => {
	  tooltipBody.classList.remove(VISIBLE_CLASS);
	  tooltipBody.classList.remove(SET_CLASS);
	  tooltipBody.classList.remove(ADJUST_WIDTH_CLASS);
	  tooltipBody.setAttribute("aria-hidden", "true");
	};

	/**
	 * Setup the tooltip component
	 * @param {HTMLElement} tooltipTrigger The element that creates the tooltip
	 */
	const setUpAttributes = (tooltipTrigger) => {
	  const tooltipID = `tooltip-${Math.floor(Math.random() * 900000) + 100000}`;
	  const tooltipContent = tooltipTrigger.getAttribute("title");
	  const wrapper = document.createElement("span");
	  const tooltipBody = document.createElement("span");
	  const additionalClasses = tooltipTrigger.getAttribute("data-classes");
	  let position = tooltipTrigger.getAttribute("data-position");

	  // Apply default position if not set as attribute
	  if (!position) {
	    position = "top";
	    tooltipTrigger.setAttribute("data-position", position);
	  }

	  // Set up tooltip attributes
	  tooltipTrigger.setAttribute("aria-describedby", tooltipID);
	  tooltipTrigger.setAttribute("tabindex", "0");
	  tooltipTrigger.removeAttribute("title");
	  tooltipTrigger.classList.remove(TOOLTIP_CLASS);
	  tooltipTrigger.classList.add(TOOLTIP_TRIGGER_CLASS);

	  // insert wrapper before el in the DOM tree
	  tooltipTrigger.parentNode.insertBefore(wrapper, tooltipTrigger);

	  // set up the wrapper
	  wrapper.appendChild(tooltipTrigger);
	  wrapper.classList.add(TOOLTIP_CLASS);
	  wrapper.appendChild(tooltipBody);

	  // Apply additional class names to wrapper element
	  if (additionalClasses) {
	    const classesArray = additionalClasses.split(" ");
	    classesArray.forEach((classname) => wrapper.classList.add(classname));
	  }

	  // set up the tooltip body
	  tooltipBody.classList.add(TOOLTIP_BODY_CLASS);
	  tooltipBody.setAttribute("id", tooltipID);
	  tooltipBody.setAttribute("role", "tooltip");
	  tooltipBody.setAttribute("aria-hidden", "true");

	  // place the text in the tooltip
	  tooltipBody.textContent = tooltipContent;

	  return { tooltipBody, position, tooltipContent, wrapper };
	};

	// Setup our function to run on various events
	const tooltip = behavior(
	  {
	    "mouseover focusin": {
	      [TOOLTIP](e) {
	        const trigger = e.target;
	        const elementType = trigger.nodeName;

	        // Initialize tooltip if it hasn't already
	        if (elementType === "BUTTON" && trigger.hasAttribute("title")) {
	          setUpAttributes(trigger);
	        }
	      },
	      [TOOLTIP_TRIGGER](e) {
	        const { trigger, body } = getTooltipElements(e.target);

	        showToolTip(body, trigger, trigger.dataset.position);
	      },
	    },
	    "mouseout focusout": {
	      [TOOLTIP_TRIGGER](e) {
	        const { body } = getTooltipElements(e.target);

	        hideToolTip(body);
	      },
	    },
	  },
	  {
	    init(root) {
	      selectOrMatches(TOOLTIP, root).forEach((tooltipTrigger) => {
	        setUpAttributes(tooltipTrigger);
	      });
	    },
	    setup: setUpAttributes,
	    getTooltipElements,
	    show: showToolTip,
	    hide: hideToolTip,
	  }
	);

	var src = tooltip;

	var tooltip$1 = /*@__PURE__*/getDefaultExportFromCjs(src);

	/**
	 * Copy to Clipboard Helper
	 */
	class Copy {
	  /**
	   * @constructor
	   *
	   * @param   {Object}  s  The settings object, may include 'selector',
	   *                       'aria', 'notifyTimeout', 'before', 'copied',
	   *                       or 'after' attributes.
	   *
	   * @return  {Class}      The constructed instance of Copy.
	   */
	  constructor(s = {}) {
	    // Set attributes
	    this.selector = (s.hasOwnProperty('selector')) ? s.selector : Copy.selector;

	    this.selectors = (s.hasOwnProperty('selectors')) ? s.selectors : Copy.selectors;

	    this.message = (s.hasOwnProperty('message')) ? s.message : Copy.message;

	    this.notifyTimeout = (s.hasOwnProperty('notifyTimeout')) ? s.notifyTimeout : Copy.notifyTimeout;

	    this.before = (s.hasOwnProperty('before')) ? s.before : Copy.before;

	    this.copied = (s.hasOwnProperty('copied')) ? s.copied : Copy.copied;

	    this.after = (s.hasOwnProperty('after')) ? s.after : Copy.after;

	    // Select the entire text when it's focused on
	    document.querySelectorAll(this.selectors.TARGETS).forEach(item => {
	      item.addEventListener('focus', () => this.select(item));
	      item.addEventListener('click', () => this.select(item));
	    });

	    // The main click event for the class
	    document.querySelector('body').addEventListener('click', event => {
	      if (!event.target.matches(this.selector))
	        return;

	      this.element = event.target;

	      this.elementMessage = (this.element.nextElementSibling.matches(this.selectors.MESSAGE))
	        ? this.element.nextElementSibling : null;

	      this.target = this.element.dataset.copy;

	      this.before(this);

	      if (this.copy(this.target)) {
	        this.copied(this);

	        if (this.elementMessage) {
	          this.elementMessage.innerText = this.message;
	        }

	        clearTimeout(this.element['timeout']);

	        this.element['timeout'] = setTimeout(() => {
	          if (this.elementMessage) {
	            this.elementMessage.innerText = '';
	          }

	          this.after(this);
	        }, this.notifyTimeout);
	      }
	    });

	    return this;
	  }

	  /**
	   * The click event handler
	   *
	   * @param   {String}  target  Content of target data attribute
	   *
	   * @return  {Boolean}         Wether copy was successful or not
	   */
	  copy(target) {
	    let selector = this.selectors.TARGETS.replace(']', `="${target}"]`);

	    let input = document.querySelector(selector);

	    this.select(input);

	    if (navigator.clipboard && navigator.clipboard.writeText)
	      navigator.clipboard.writeText(input.value);
	    else if (document.execCommand)
	      document.execCommand('copy');
	    else
	      return false;

	    return true;
	  }

	  /**
	   * Handler for the text selection method
	   *
	   * @param   {Object}  input  The input with content to select
	   */
	  select(input) {
	    input.select();

	    input.setSelectionRange(0, 99999);
	  }
	}

	/**
	 * The main element selector.
	 *
	 * @var {String}
	 */
	Copy.selector = '[data-js*="copy"]';

	/**
	 * The selectors for various elements queried by the utility. Refer to the
	 * source for defaults.
	 *
	 * @var {Object}
	 */
	Copy.selectors = {
	  TARGETS: '[data-copy-target]',
	  MESSAGE: '[data-copy="message"]',
	  ICON: '[data-copy="icon"]'
	};

	/**
	 * The message that is asserted when the copy is successful.
	 *
	 * @var {String}
	 */
	Copy.message = 'Copied!';

	/**
	 * Timeout for the "Copied!" notification.
	 *
	 * @var {Number}
	 */
	Copy.notifyTimeout = 1500;

	/**
	 * Before hook. Triggers before the click event.
	 *
	 * @var {Function}
	 */
	Copy.before = () => {};

	/**
	 * Copied hook. Triggers after a successful the copy event.
	 *
	 * @var {Function}
	 */
	Copy.copied = () => {};

	/**
	 * After hook. Triggers after the click event.
	 *
	 * @var {Function}
	 */
	Copy.after = () => {};

	class Details {
	  /**
	   * Details constructor
	   *
	   * @param   {Object}  s  Optional settings configuration
	   *
	   * @return  {Object}     Instance of Details
	   */
	  constructor(s = {}) {
	    this.selector = s.selector ? s.selector : Details.selector;

	    this.elFocusable = s.elFocusable ? s.elFocusable : Details.elFocusable;

	    this.index = s.index ? s.index : Details.index;

	    this.show = s.show ? s.show : this.show;

	    this.hide = s.hide ? s.hide : this.hide;

	    this.init();

	    document.querySelector('body')
	      .addEventListener('click', event => {
	        if (event.target.matches(this.selector)) {
	          this.toggle(event.target);
	        }
	    });

	    return this;
	  }

	  /**
	   * Initializes the Details trigger and target region
	   *
	   * @return  {Object}  Instance of Details
	   */
	  init() {
	    let triggers = document.querySelectorAll(this.selector);

	    for (let i = 0; i < triggers.length; i++) {
	      let trigger = triggers[i];

	      if (trigger.dataset.ariaControls) {
	        let controls = trigger.getAttribute('data-aria-controls');
	        let target = document.getElementById(controls);
	        let expanded = (trigger.getAttribute('data-aria-expanded') == 'true') ? true : false; // parent open

	        trigger.setAttribute('aria-controls', controls);
	        trigger.setAttribute('aria-expanded', expanded);

	        trigger.removeAttribute('data-aria-controls');
	        trigger.removeAttribute('data-aria-expanded');

	        if (target && false === expanded) {
	          this.hide(target);
	        }
	      }
	    }

	    return this;
	  }

	  /**
	   * Main toggling method that checks all follow up triggers to ensure they
	   * are properly hidden or shown.
	   *
	   * @param   {Object}  trigger  The node element that triggered the toggle
	   *
	   * @return  {Object}           Instance of Details
	   */
	  toggle(trigger) {
	    if (trigger.getAttribute('aria-controls')) {
	      let target = document.getElementById(trigger.getAttribute('aria-controls'));
	      let expanded = (trigger.getAttribute('aria-expanded') === 'true');

	      if (target && expanded) {
	        this.hide(target);

	        trigger.setAttribute('aria-expanded', 'false');
	      } else if (target) {
	        this.show(target);

	        trigger.setAttribute('aria-expanded', 'true');
	      }
	    }

	    return this;
	  }

	  /**
	   * Method for hiding the details target region
	   *
	   * @param   {Object}  target  Node element of the target region
	   *
	   * @return  {Object}          Instance of Details
	   */
	  hide(target) {
	    target.setAttribute('hidden', '');

	    // Set potentially focusable contents tabindex to -1
	    this.index(target.querySelectorAll(this.elFocusable.join(', ')));

	    return this;
	  }

	  /**
	   * Method for showing the details target region
	   *
	   * @param   {Object}  target  Node element of the target region
	   *
	   * @return  {Object}          Instance of Details
	   */
	  show(target) {
	    target.removeAttribute('hidden');

	    // Remove potentially focusable contents tabindex
	    this.index(target.querySelectorAll(this.elFocusable.join(', ')), true);

	    return this;
	  }
	}

	/** @type  {String}  The main selector for the Details component event listener */
	Details.selector = '[data-js="details"]';

	/** @type  {Array}  A list of potentially focusable element selectors */
	Details.elFocusable = [
	  'a', 'button', 'input', 'select', 'textarea', 'object', 'embed', 'form',
	  'fieldset', 'legend', 'label', 'area', 'audio', 'video', 'iframe', 'svg',
	  'details', 'table', '[tabindex]', '[contenteditable]', '[usemap]'
	];

	/**
	 * Method for adding or removing potentially focusable elements from the
	 * dom tabbing order within the target region.
	 *
	 * @param   {NodeList}  elements  Elements to index
	 * @param   {Boolean}   index     Wether to index elements or not
	 *
	 * @return  {Object}              The indexed elements
	 */
	Details.index = (elements, index = false) => {
	  for (let i = 0; i < elements.length; i++) {
	    let element = elements[i];

	    if (index) {
	      let dataDefault = element.getAttribute(`data-js-tabindex`);

	      if (dataDefault) {
	        element.setAttribute('tabindex', dataDefault);
	      } else {
	        element.removeAttribute('tabindex');
	      }
	    } else {
	      element.setAttribute('tabindex', '-1');
	    }
	  }
	  return elements;
	};

	class FollowUpQuestion {
	  /**
	   * Follow up constructor
	   *
	   * @param   {Object}  s  Optional settings configuration
	   *
	   * @return  {Object}     Instance of FollowUpQuestion
	   */
	  constructor(s = {}) {
	    this.selector = s.selector ? s.selector : FollowUpQuestion.selector;

	    this.elFocusable = s.elFocusable ? s.elFocusable : FollowUpQuestion.elFocusable;

	    this.elDisabled = s.elDisabled ? s.elDisabled : FollowUpQuestion.elDisabled;

	    this.ariaExpanded = s.ariaExpanded ? s.ariaExpanded : FollowUpQuestion.ariaExpanded;

	    this.index = s.index ? s.index : FollowUpQuestion.index;

	    this.show = s.show ? s.show : this.show;

	    this.hide = s.hide ? s.hide : this.hide;

	    this.init();

	    document.querySelector('body')
	      .addEventListener('change', event => {
	        if (event.target.matches(this.selector)) {
	          this.toggle();
	        }
	    });

	    return this;
	  }

	  /**
	   * Initializes the follow up trigger and target region
	   *
	   * @return  {Object}  Instance of FollowUpQuestion
	   */
	  init() {
	    let triggers = document.querySelectorAll(this.selector);

	    for (let i = 0; i < triggers.length; i++) {
	      if (triggers[i].dataset.ariaControls) {
	        let trigger = triggers[i];
	        let target = document.getElementById(trigger.dataset.ariaControls);
	        let checked = trigger.getAttribute('checked') ? true : false;

	        if (false === checked) {
	          this.hide(target);
	        }

	        trigger.setAttribute('aria-controls', trigger.dataset.ariaControls);

	        if (this.ariaExpanded) {
	          trigger.setAttribute('aria-expanded', checked);
	        }

	        trigger.removeAttribute('data-aria-controls');
	      }
	    }

	    return this;
	  }

	  /**
	   * Main toggling method that checks all follow up triggers to ensure they
	   * are properly hidden or shown.
	   *
	   * @param   {Object}  trigger  The node element that triggered the toggle
	   *
	   * @return  {Object}           Instance of FollowUpQuestion
	   */
	  toggle() {
	    let triggers = document.querySelectorAll(this.selector);

	    for (let i = 0; i < triggers.length; i++) {
	      let trigger = triggers[i];

	      if (null === trigger.getAttribute('aria-controls')) continue;

	      let target = document.getElementById(trigger.getAttribute('aria-controls'));
	      let checked = trigger.checked;

	      if (checked) {
	        this.show(target);
	      } else {
	        this.hide(target);
	      }

	      if (this.ariaExpanded) {
	        trigger.setAttribute('aria-expanded', checked);
	      }
	    }

	    return this;
	  }

	  /**
	   * Method for hiding the follow up target region
	   *
	   * @param   {Object}  target  Node element of the target region
	   *
	   * @return  {Object}          Instance of FollowUpQuestion
	   */
	  hide(target) {
	    target.setAttribute('hidden', '');

	    // Set potentially focusable contents tabindex to -1
	    this.index(target.querySelectorAll(this.elFocusable.join(', ')));

	    // Set child inputs to disabled
	    this.disable(target.querySelectorAll(this.elDisabled.join(', ')));

	    return this;
	  }

	  /**
	   * Method for showing the follow up target region
	   *
	   * @param   {Object}  target  Node element of the target region
	   *
	   * @return  {Object}          Instance of FollowUpQuestion
	   */
	  show(target) {
	    target.removeAttribute('hidden');

	    // Remove potentially focusable contents tabindex
	    this.index(target.querySelectorAll(this.elFocusable.join(', ')), true);

	    // Enable child inputs
	    this.disable(target.querySelectorAll(this.elDisabled.join(', ')), true);

	    return this;
	  }

	  /**
	   * Method for enabling or disabling form elements within the target region.
	   *
	   * @param   {NodeList}  elements  Elements to enable or disable
	   * @param   {Boolean}   enable    Wether to enable or disable elements
	   *
	   * @return  {Object}              Instance of FollowUpQuestion
	   */
	  disable(elements, enable = false) {
	    for (let i = 0; i < elements.length; i++) {
	      let element = elements[i];

	      if (enable) {
	        element.removeAttribute('disabled');
	      } else {
	        element.setAttribute('disabled', '');
	      }
	    }

	    return this;
	  }
	}

	/** @type  {String}  The main selector for the follow up question component event listening */
	FollowUpQuestion.selector = '[data-js="follow-up-question"]';

	/** @type  {Array}  A list of potentially focusable element selectors */
	FollowUpQuestion.elFocusable = [
	  'a', 'button', 'input', 'select', 'textarea', 'object', 'embed', 'form',
	  'fieldset', 'legend', 'label', 'area', 'audio', 'video', 'iframe', 'svg',
	  'details', 'table', '[tabindex]', '[contenteditable]', '[usemap]'
	];

	/**
	 * Method for adding or removing potentially focusable elements from the
	 * dom tabbing order within the target region.
	 *
	 * @param   {NodeList}  elements  Elements to index
	 * @param   {Boolean}   index     Wether to index elements or not
	 *
	 * @return  {Object}              The indexed elements
	 */
	FollowUpQuestion.index = (elements, index = false) => {
	  for (let i = 0; i < elements.length; i++) {
	    let element = elements[i];

	    if (index) {
	      let dataDefault = element.getAttribute(`data-js-tabindex`);

	      if (dataDefault) {
	        element.setAttribute('tabindex', dataDefault);
	      } else {
	        element.removeAttribute('tabindex');
	      }
	    } else {
	      element.setAttribute('tabindex', '-1');
	    }
	  }
	  return elements;
	};

	/** @type  {Array}  A list of form elements that can be disabled */
	FollowUpQuestion.elDisabled = [
	  'button', 'fieldset', 'select', 'textarea', 'input'
	];

	/** @type  {Boolean}  Wether to add the aria-expanded attribute to the radio button, which at the time of authoring, is an invalid use of aria */
	FollowUpQuestion.ariaExpanded = false;

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var NumeralFormatter = function (numeralDecimalMark,
	                                 numeralIntegerScale,
	                                 numeralDecimalScale,
	                                 numeralThousandsGroupStyle,
	                                 numeralPositiveOnly,
	                                 stripLeadingZeroes,
	                                 prefix,
	                                 signBeforePrefix,
	                                 tailPrefix,
	                                 delimiter) {
	    var owner = this;

	    owner.numeralDecimalMark = numeralDecimalMark || '.';
	    owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;
	    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;
	    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;
	    owner.numeralPositiveOnly = !!numeralPositiveOnly;
	    owner.stripLeadingZeroes = stripLeadingZeroes !== false;
	    owner.prefix = (prefix || prefix === '') ? prefix : '';
	    owner.signBeforePrefix = !!signBeforePrefix;
	    owner.tailPrefix = !!tailPrefix;
	    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';
	    owner.delimiterRE = delimiter ? new RegExp('\\' + delimiter, 'g') : '';
	};

	NumeralFormatter.groupStyle = {
	    thousand: 'thousand',
	    lakh:     'lakh',
	    wan:      'wan',
	    none:     'none'    
	};

	NumeralFormatter.prototype = {
	    getRawValue: function (value) {
	        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');
	    },

	    format: function (value) {
	        var owner = this, parts, partSign, partSignAndPrefix, partInteger, partDecimal = '';

	        // strip alphabet letters
	        value = value.replace(/[A-Za-z]/g, '')
	            // replace the first decimal mark with reserved placeholder
	            .replace(owner.numeralDecimalMark, 'M')

	            // strip non numeric letters except minus and "M"
	            // this is to ensure prefix has been stripped
	            .replace(/[^\dM-]/g, '')

	            // replace the leading minus with reserved placeholder
	            .replace(/^\-/, 'N')

	            // strip the other minus sign (if present)
	            .replace(/\-/g, '')

	            // replace the minus sign (if present)
	            .replace('N', owner.numeralPositiveOnly ? '' : '-')

	            // replace decimal mark
	            .replace('M', owner.numeralDecimalMark);

	        // strip any leading zeros
	        if (owner.stripLeadingZeroes) {
	            value = value.replace(/^(-)?0+(?=\d)/, '$1');
	        }

	        partSign = value.slice(0, 1) === '-' ? '-' : '';
	        if (typeof owner.prefix != 'undefined') {
	            if (owner.signBeforePrefix) {
	                partSignAndPrefix = partSign + owner.prefix;
	            } else {
	                partSignAndPrefix = owner.prefix + partSign;
	            }
	        } else {
	            partSignAndPrefix = partSign;
	        }
	        
	        partInteger = value;

	        if (value.indexOf(owner.numeralDecimalMark) >= 0) {
	            parts = value.split(owner.numeralDecimalMark);
	            partInteger = parts[0];
	            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);
	        }

	        if(partSign === '-') {
	            partInteger = partInteger.slice(1);
	        }

	        if (owner.numeralIntegerScale > 0) {
	          partInteger = partInteger.slice(0, owner.numeralIntegerScale);
	        }

	        switch (owner.numeralThousandsGroupStyle) {
	        case NumeralFormatter.groupStyle.lakh:
	            partInteger = partInteger.replace(/(\d)(?=(\d\d)+\d$)/g, '$1' + owner.delimiter);

	            break;

	        case NumeralFormatter.groupStyle.wan:
	            partInteger = partInteger.replace(/(\d)(?=(\d{4})+$)/g, '$1' + owner.delimiter);

	            break;

	        case NumeralFormatter.groupStyle.thousand:
	            partInteger = partInteger.replace(/(\d)(?=(\d{3})+$)/g, '$1' + owner.delimiter);

	            break;
	        }

	        if (owner.tailPrefix) {
	            return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;
	        }

	        return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');
	    }
	};

	var NumeralFormatter_1 = NumeralFormatter;

	var DateFormatter = function (datePattern, dateMin, dateMax) {
	    var owner = this;

	    owner.date = [];
	    owner.blocks = [];
	    owner.datePattern = datePattern;
	    owner.dateMin = dateMin
	      .split('-')
	      .reverse()
	      .map(function(x) {
	        return parseInt(x, 10);
	      });
	    if (owner.dateMin.length === 2) owner.dateMin.unshift(0);

	    owner.dateMax = dateMax
	      .split('-')
	      .reverse()
	      .map(function(x) {
	        return parseInt(x, 10);
	      });
	    if (owner.dateMax.length === 2) owner.dateMax.unshift(0);
	    
	    owner.initBlocks();
	};

	DateFormatter.prototype = {
	    initBlocks: function () {
	        var owner = this;
	        owner.datePattern.forEach(function (value) {
	            if (value === 'Y') {
	                owner.blocks.push(4);
	            } else {
	                owner.blocks.push(2);
	            }
	        });
	    },

	    getISOFormatDate: function () {
	        var owner = this,
	            date = owner.date;

	        return date[2] ? (
	            date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0])
	        ) : '';
	    },

	    getBlocks: function () {
	        return this.blocks;
	    },

	    getValidatedDate: function (value) {
	        var owner = this, result = '';

	        value = value.replace(/[^\d]/g, '');

	        owner.blocks.forEach(function (length, index) {
	            if (value.length > 0) {
	                var sub = value.slice(0, length),
	                    sub0 = sub.slice(0, 1),
	                    rest = value.slice(length);

	                switch (owner.datePattern[index]) {
	                case 'd':
	                    if (sub === '00') {
	                        sub = '01';
	                    } else if (parseInt(sub0, 10) > 3) {
	                        sub = '0' + sub0;
	                    } else if (parseInt(sub, 10) > 31) {
	                        sub = '31';
	                    }

	                    break;

	                case 'm':
	                    if (sub === '00') {
	                        sub = '01';
	                    } else if (parseInt(sub0, 10) > 1) {
	                        sub = '0' + sub0;
	                    } else if (parseInt(sub, 10) > 12) {
	                        sub = '12';
	                    }

	                    break;
	                }

	                result += sub;

	                // update remaining string
	                value = rest;
	            }
	        });

	        return this.getFixedDateString(result);
	    },

	    getFixedDateString: function (value) {
	        var owner = this, datePattern = owner.datePattern, date = [],
	            dayIndex = 0, monthIndex = 0, yearIndex = 0,
	            dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0,
	            day, month, year, fullYearDone = false;

	        // mm-dd || dd-mm
	        if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {
	            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;
	            monthStartIndex = 2 - dayStartIndex;
	            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
	            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);

	            date = this.getFixedDate(day, month, 0);
	        }

	        // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd
	        if (value.length === 8) {
	            datePattern.forEach(function (type, index) {
	                switch (type) {
	                case 'd':
	                    dayIndex = index;
	                    break;
	                case 'm':
	                    monthIndex = index;
	                    break;
	                default:
	                    yearIndex = index;
	                    break;
	                }
	            });

	            yearStartIndex = yearIndex * 2;
	            dayStartIndex = (dayIndex <= yearIndex) ? dayIndex * 2 : (dayIndex * 2 + 2);
	            monthStartIndex = (monthIndex <= yearIndex) ? monthIndex * 2 : (monthIndex * 2 + 2);

	            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);
	            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
	            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);

	            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;

	            date = this.getFixedDate(day, month, year);
	        }

	        // mm-yy || yy-mm
	        if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {
	            monthStartIndex = datePattern[0] === 'm' ? 0 : 2;
	            yearStartIndex = 2 - monthStartIndex;
	            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
	            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);

	            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;

	            date = [0, month, year];
	        }

	        // mm-yyyy || yyyy-mm
	        if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {
	            monthStartIndex = datePattern[0] === 'm' ? 0 : 4;
	            yearStartIndex = 2 - 0.5 * monthStartIndex;
	            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);
	            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);

	            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;

	            date = [0, month, year];
	        }

	        date = owner.getRangeFixedDate(date);
	        owner.date = date;

	        var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {
	            switch (current) {
	            case 'd':
	                return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));
	            case 'm':
	                return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));
	            case 'y':
	                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');
	            case 'Y':
	                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');
	            }
	        }, '');

	        return result;
	    },

	    getRangeFixedDate: function (date) {
	        var owner = this,
	            datePattern = owner.datePattern,
	            dateMin = owner.dateMin || [],
	            dateMax = owner.dateMax || [];

	        if (!date.length || (dateMin.length < 3 && dateMax.length < 3)) return date;

	        if (
	          datePattern.find(function(x) {
	            return x.toLowerCase() === 'y';
	          }) &&
	          date[2] === 0
	        ) return date;

	        if (dateMax.length && (dateMax[2] < date[2] || (
	          dateMax[2] === date[2] && (dateMax[1] < date[1] || (
	            dateMax[1] === date[1] && dateMax[0] < date[0]
	          ))
	        ))) return dateMax;

	        if (dateMin.length && (dateMin[2] > date[2] || (
	          dateMin[2] === date[2] && (dateMin[1] > date[1] || (
	            dateMin[1] === date[1] && dateMin[0] > date[0]
	          ))
	        ))) return dateMin;

	        return date;
	    },

	    getFixedDate: function (day, month, year) {
	        day = Math.min(day, 31);
	        month = Math.min(month, 12);
	        year = parseInt((year || 0), 10);

	        if ((month < 7 && month % 2 === 0) || (month > 8 && month % 2 === 1)) {
	            day = Math.min(day, month === 2 ? (this.isLeapYear(year) ? 29 : 28) : 30);
	        }

	        return [day, month, year];
	    },

	    isLeapYear: function (year) {
	        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
	    },

	    addLeadingZero: function (number) {
	        return (number < 10 ? '0' : '') + number;
	    },

	    addLeadingZeroForYear: function (number, fullYearMode) {
	        if (fullYearMode) {
	            return (number < 10 ? '000' : (number < 100 ? '00' : (number < 1000 ? '0' : ''))) + number;
	        }

	        return (number < 10 ? '0' : '') + number;
	    }
	};

	var DateFormatter_1 = DateFormatter;

	var TimeFormatter = function (timePattern, timeFormat) {
	    var owner = this;

	    owner.time = [];
	    owner.blocks = [];
	    owner.timePattern = timePattern;
	    owner.timeFormat = timeFormat;
	    owner.initBlocks();
	};

	TimeFormatter.prototype = {
	    initBlocks: function () {
	        var owner = this;
	        owner.timePattern.forEach(function () {
	            owner.blocks.push(2);
	        });
	    },

	    getISOFormatTime: function () {
	        var owner = this,
	            time = owner.time;

	        return time[2] ? (
	            owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2])
	        ) : '';
	    },

	    getBlocks: function () {
	        return this.blocks;
	    },

	    getTimeFormatOptions: function () {
	        var owner = this;
	        if (String(owner.timeFormat) === '12') {
	            return {
	                maxHourFirstDigit: 1,
	                maxHours: 12,
	                maxMinutesFirstDigit: 5,
	                maxMinutes: 60
	            };
	        }

	        return {
	            maxHourFirstDigit: 2,
	            maxHours: 23,
	            maxMinutesFirstDigit: 5,
	            maxMinutes: 60
	        };
	    },

	    getValidatedTime: function (value) {
	        var owner = this, result = '';

	        value = value.replace(/[^\d]/g, '');

	        var timeFormatOptions = owner.getTimeFormatOptions();

	        owner.blocks.forEach(function (length, index) {
	            if (value.length > 0) {
	                var sub = value.slice(0, length),
	                    sub0 = sub.slice(0, 1),
	                    rest = value.slice(length);

	                switch (owner.timePattern[index]) {

	                case 'h':
	                    if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {
	                        sub = '0' + sub0;
	                    } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {
	                        sub = timeFormatOptions.maxHours + '';
	                    }

	                    break;

	                case 'm':
	                case 's':
	                    if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {
	                        sub = '0' + sub0;
	                    } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {
	                        sub = timeFormatOptions.maxMinutes + '';
	                    }
	                    break;
	                }

	                result += sub;

	                // update remaining string
	                value = rest;
	            }
	        });

	        return this.getFixedTimeString(result);
	    },

	    getFixedTimeString: function (value) {
	        var owner = this, timePattern = owner.timePattern, time = [],
	            secondIndex = 0, minuteIndex = 0, hourIndex = 0,
	            secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0,
	            second, minute, hour;

	        if (value.length === 6) {
	            timePattern.forEach(function (type, index) {
	                switch (type) {
	                case 's':
	                    secondIndex = index * 2;
	                    break;
	                case 'm':
	                    minuteIndex = index * 2;
	                    break;
	                case 'h':
	                    hourIndex = index * 2;
	                    break;
	                }
	            });

	            hourStartIndex = hourIndex;
	            minuteStartIndex = minuteIndex;
	            secondStartIndex = secondIndex;

	            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);
	            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
	            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);

	            time = this.getFixedTime(hour, minute, second);
	        }

	        if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {
	            timePattern.forEach(function (type, index) {
	                switch (type) {
	                case 'm':
	                    minuteIndex = index * 2;
	                    break;
	                case 'h':
	                    hourIndex = index * 2;
	                    break;
	                }
	            });

	            hourStartIndex = hourIndex;
	            minuteStartIndex = minuteIndex;

	            second = 0;
	            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);
	            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);

	            time = this.getFixedTime(hour, minute, second);
	        }

	        owner.time = time;

	        return time.length === 0 ? value : timePattern.reduce(function (previous, current) {
	            switch (current) {
	            case 's':
	                return previous + owner.addLeadingZero(time[2]);
	            case 'm':
	                return previous + owner.addLeadingZero(time[1]);
	            case 'h':
	                return previous + owner.addLeadingZero(time[0]);
	            }
	        }, '');
	    },

	    getFixedTime: function (hour, minute, second) {
	        second = Math.min(parseInt(second || 0, 10), 60);
	        minute = Math.min(minute, 60);
	        hour = Math.min(hour, 60);

	        return [hour, minute, second];
	    },

	    addLeadingZero: function (number) {
	        return (number < 10 ? '0' : '') + number;
	    }
	};

	var TimeFormatter_1 = TimeFormatter;

	var PhoneFormatter = function (formatter, delimiter) {
	    var owner = this;

	    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';
	    owner.delimiterRE = delimiter ? new RegExp('\\' + delimiter, 'g') : '';

	    owner.formatter = formatter;
	};

	PhoneFormatter.prototype = {
	    setFormatter: function (formatter) {
	        this.formatter = formatter;
	    },

	    format: function (phoneNumber) {
	        var owner = this;

	        owner.formatter.clear();

	        // only keep number and +
	        phoneNumber = phoneNumber.replace(/[^\d+]/g, '');

	        // strip non-leading +
	        phoneNumber = phoneNumber.replace(/^\+/, 'B').replace(/\+/g, '').replace('B', '+');

	        // strip delimiter
	        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');

	        var result = '', current, validated = false;

	        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {
	            current = owner.formatter.inputDigit(phoneNumber.charAt(i));

	            // has ()- or space inside
	            if (/[\s()-]/g.test(current)) {
	                result = current;

	                validated = true;
	            } else {
	                if (!validated) {
	                    result = current;
	                }
	                // else: over length input
	                // it turns to invalid number again
	            }
	        }

	        // strip ()
	        // e.g. US: 7161234567 returns (716) 123-4567
	        result = result.replace(/[()]/g, '');
	        // replace library delimiter with user customized delimiter
	        result = result.replace(/[\s-]/g, owner.delimiter);

	        return result;
	    }
	};

	var PhoneFormatter_1 = PhoneFormatter;

	var CreditCardDetector = {
	    blocks: {
	        uatp:          [4, 5, 6],
	        amex:          [4, 6, 5],
	        diners:        [4, 6, 4],
	        discover:      [4, 4, 4, 4],
	        mastercard:    [4, 4, 4, 4],
	        dankort:       [4, 4, 4, 4],
	        instapayment:  [4, 4, 4, 4],
	        jcb15:         [4, 6, 5],
	        jcb:           [4, 4, 4, 4],
	        maestro:       [4, 4, 4, 4],
	        visa:          [4, 4, 4, 4],
	        mir:           [4, 4, 4, 4],
	        unionPay:      [4, 4, 4, 4],
	        general:       [4, 4, 4, 4]
	    },

	    re: {
	        // starts with 1; 15 digits, not starts with 1800 (jcb card)
	        uatp: /^(?!1800)1\d{0,14}/,

	        // starts with 34/37; 15 digits
	        amex: /^3[47]\d{0,13}/,

	        // starts with 6011/65/644-649; 16 digits
	        discover: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,

	        // starts with 300-305/309 or 36/38/39; 14 digits
	        diners: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,

	        // starts with 51-55/2221–2720; 16 digits
	        mastercard: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,

	        // starts with 5019/4175/4571; 16 digits
	        dankort: /^(5019|4175|4571)\d{0,12}/,

	        // starts with 637-639; 16 digits
	        instapayment: /^63[7-9]\d{0,13}/,

	        // starts with 2131/1800; 15 digits
	        jcb15: /^(?:2131|1800)\d{0,11}/,

	        // starts with 2131/1800/35; 16 digits
	        jcb: /^(?:35\d{0,2})\d{0,12}/,

	        // starts with 50/56-58/6304/67; 16 digits
	        maestro: /^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,

	        // starts with 22; 16 digits
	        mir: /^220[0-4]\d{0,12}/,

	        // starts with 4; 16 digits
	        visa: /^4\d{0,15}/,

	        // starts with 62/81; 16 digits
	        unionPay: /^(62|81)\d{0,14}/
	    },

	    getStrictBlocks: function (block) {
	      var total = block.reduce(function (prev, current) {
	        return prev + current;
	      }, 0);

	      return block.concat(19 - total);
	    },

	    getInfo: function (value, strictMode) {
	        var blocks = CreditCardDetector.blocks,
	            re = CreditCardDetector.re;

	        // Some credit card can have up to 19 digits number.
	        // Set strictMode to true will remove the 16 max-length restrain,
	        // however, I never found any website validate card number like
	        // this, hence probably you don't want to enable this option.
	        strictMode = !!strictMode;

	        for (var key in re) {
	            if (re[key].test(value)) {
	                var matchedBlocks = blocks[key];
	                return {
	                    type: key,
	                    blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks
	                };
	            }
	        }

	        return {
	            type: 'unknown',
	            blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general
	        };
	    }
	};

	var CreditCardDetector_1 = CreditCardDetector;

	var Util = {
	    noop: function () {
	    },

	    strip: function (value, re) {
	        return value.replace(re, '');
	    },

	    getPostDelimiter: function (value, delimiter, delimiters) {
	        // single delimiter
	        if (delimiters.length === 0) {
	            return value.slice(-delimiter.length) === delimiter ? delimiter : '';
	        }

	        // multiple delimiters
	        var matchedDelimiter = '';
	        delimiters.forEach(function (current) {
	            if (value.slice(-current.length) === current) {
	                matchedDelimiter = current;
	            }
	        });

	        return matchedDelimiter;
	    },

	    getDelimiterREByDelimiter: function (delimiter) {
	        return new RegExp(delimiter.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1'), 'g');
	    },

	    getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {
	      // If cursor was at the end of value, just place it back.
	      // Because new value could contain additional chars.
	      if (oldValue.length === prevPos) {
	          return newValue.length;
	      }

	      return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter ,delimiters);
	    },

	    getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {
	        var oldRawValue, newRawValue, lengthOffset;

	        oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);
	        newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);
	        lengthOffset = oldRawValue.length - newRawValue.length;

	        return (lengthOffset !== 0) ? (lengthOffset / Math.abs(lengthOffset)) : 0;
	    },

	    stripDelimiters: function (value, delimiter, delimiters) {
	        var owner = this;

	        // single delimiter
	        if (delimiters.length === 0) {
	            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';

	            return value.replace(delimiterRE, '');
	        }

	        // multiple delimiters
	        delimiters.forEach(function (current) {
	            current.split('').forEach(function (letter) {
	                value = value.replace(owner.getDelimiterREByDelimiter(letter), '');
	            });
	        });

	        return value;
	    },

	    headStr: function (str, length) {
	        return str.slice(0, length);
	    },

	    getMaxLength: function (blocks) {
	        return blocks.reduce(function (previous, current) {
	            return previous + current;
	        }, 0);
	    },

	    // strip prefix
	    // Before type  |   After type    |     Return value
	    // PEFIX-...    |   PEFIX-...     |     ''
	    // PREFIX-123   |   PEFIX-123     |     123
	    // PREFIX-123   |   PREFIX-23     |     23
	    // PREFIX-123   |   PREFIX-1234   |     1234
	    getPrefixStrippedValue: function (value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {
	        // No prefix
	        if (prefixLength === 0) {
	          return value;
	        }

	        // Value is prefix
	        if (value === prefix && value !== '') {
	          return '';
	        }

	        if (signBeforePrefix && (value.slice(0, 1) == '-')) {
	            var prev = (prevResult.slice(0, 1) == '-') ? prevResult.slice(1) : prevResult;
	            return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);
	        }

	        // Pre result prefix string does not match pre-defined prefix
	        if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {
	            // Check if the first time user entered something
	            if (noImmediatePrefix && !prevResult && value) return value;
	            return '';
	        } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {
	            // Check if the first time user entered something
	            if (noImmediatePrefix && !prevResult && value) return value;
	            return '';
	        }

	        var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);

	        // New value has issue, someone typed in between prefix letters
	        // Revert to pre value
	        if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {
	            return prevValue.slice(prefixLength);
	        } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {
	            return prevValue.slice(0, -prefixLength - 1);
	        }

	        // No issue, strip prefix for new value
	        return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);
	    },

	    getFirstDiffIndex: function (prev, current) {
	        var index = 0;

	        while (prev.charAt(index) === current.charAt(index)) {
	            if (prev.charAt(index++) === '') {
	                return -1;
	            }
	        }

	        return index;
	    },

	    getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {
	        var result = '',
	            multipleDelimiters = delimiters.length > 0,
	            currentDelimiter = '';

	        // no options, normal input
	        if (blocksLength === 0) {
	            return value;
	        }

	        blocks.forEach(function (length, index) {
	            if (value.length > 0) {
	                var sub = value.slice(0, length),
	                    rest = value.slice(length);

	                if (multipleDelimiters) {
	                    currentDelimiter = delimiters[delimiterLazyShow ? (index - 1) : index] || currentDelimiter;
	                } else {
	                    currentDelimiter = delimiter;
	                }

	                if (delimiterLazyShow) {
	                    if (index > 0) {
	                        result += currentDelimiter;
	                    }

	                    result += sub;
	                } else {
	                    result += sub;

	                    if (sub.length === length && index < blocksLength - 1) {
	                        result += currentDelimiter;
	                    }
	                }

	                // update remaining string
	                value = rest;
	            }
	        });

	        return result;
	    },

	    // move cursor to the end
	    // the first time user focuses on an input with prefix
	    fixPrefixCursor: function (el, prefix, delimiter, delimiters) {
	        if (!el) {
	            return;
	        }

	        var val = el.value,
	            appendix = delimiter || (delimiters[0] || ' ');

	        if (!el.setSelectionRange || !prefix || (prefix.length + appendix.length) <= val.length) {
	            return;
	        }

	        var len = val.length * 2;

	        // set timeout to avoid blink
	        setTimeout(function () {
	            el.setSelectionRange(len, len);
	        }, 1);
	    },

	    // Check if input field is fully selected
	    checkFullSelection: function(value) {
	      try {
	        var selection = window.getSelection() || document.getSelection() || {};
	        return selection.toString().length === value.length;
	      } catch (ex) {
	        // Ignore
	      }

	      return false;
	    },

	    setSelection: function (element, position, doc) {
	        if (element !== this.getActiveElement(doc)) {
	            return;
	        }

	        // cursor is already in the end
	        if (element && element.value.length <= position) {
	          return;
	        }

	        if (element.createTextRange) {
	            var range = element.createTextRange();

	            range.move('character', position);
	            range.select();
	        } else {
	            try {
	                element.setSelectionRange(position, position);
	            } catch (e) {
	                // eslint-disable-next-line
	                console.warn('The input element type does not support selection');
	            }
	        }
	    },

	    getActiveElement: function(parent) {
	        var activeElement = parent.activeElement;
	        if (activeElement && activeElement.shadowRoot) {
	            return this.getActiveElement(activeElement.shadowRoot);
	        }
	        return activeElement;
	    },

	    isAndroid: function () {
	        return navigator && /android/i.test(navigator.userAgent);
	    },

	    // On Android chrome, the keyup and keydown events
	    // always return key code 229 as a composition that
	    // buffers the user’s keystrokes
	    // see https://github.com/nosir/cleave.js/issues/147
	    isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {
	        if (!this.isAndroid() || !lastInputValue || !currentInputValue) {
	            return false;
	        }

	        return currentInputValue === lastInputValue.slice(0, -1);
	    }
	};

	var Util_1 = Util;

	/**
	 * Props Assignment
	 *
	 * Separate this, so react module can share the usage
	 */
	var DefaultProperties = {
	    // Maybe change to object-assign
	    // for now just keep it as simple
	    assign: function (target, opts) {
	        target = target || {};
	        opts = opts || {};

	        // credit card
	        target.creditCard = !!opts.creditCard;
	        target.creditCardStrictMode = !!opts.creditCardStrictMode;
	        target.creditCardType = '';
	        target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || (function () {});

	        // phone
	        target.phone = !!opts.phone;
	        target.phoneRegionCode = opts.phoneRegionCode || 'AU';
	        target.phoneFormatter = {};

	        // time
	        target.time = !!opts.time;
	        target.timePattern = opts.timePattern || ['h', 'm', 's'];
	        target.timeFormat = opts.timeFormat || '24';
	        target.timeFormatter = {};

	        // date
	        target.date = !!opts.date;
	        target.datePattern = opts.datePattern || ['d', 'm', 'Y'];
	        target.dateMin = opts.dateMin || '';
	        target.dateMax = opts.dateMax || '';
	        target.dateFormatter = {};

	        // numeral
	        target.numeral = !!opts.numeral;
	        target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;
	        target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;
	        target.numeralDecimalMark = opts.numeralDecimalMark || '.';
	        target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';
	        target.numeralPositiveOnly = !!opts.numeralPositiveOnly;
	        target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;
	        target.signBeforePrefix = !!opts.signBeforePrefix;
	        target.tailPrefix = !!opts.tailPrefix;

	        // others
	        target.swapHiddenInput = !!opts.swapHiddenInput;
	        
	        target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;

	        target.uppercase = !!opts.uppercase;
	        target.lowercase = !!opts.lowercase;

	        target.prefix = (target.creditCard || target.date) ? '' : (opts.prefix || '');
	        target.noImmediatePrefix = !!opts.noImmediatePrefix;
	        target.prefixLength = target.prefix.length;
	        target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;
	        target.copyDelimiter = !!opts.copyDelimiter;

	        target.initValue = (opts.initValue !== undefined && opts.initValue !== null) ? opts.initValue.toString() : '';

	        target.delimiter =
	            (opts.delimiter || opts.delimiter === '') ? opts.delimiter :
	                (opts.date ? '/' :
	                    (opts.time ? ':' :
	                        (opts.numeral ? ',' :
	                            (opts.phone ? ' ' :
	                                ' '))));
	        target.delimiterLength = target.delimiter.length;
	        target.delimiterLazyShow = !!opts.delimiterLazyShow;
	        target.delimiters = opts.delimiters || [];

	        target.blocks = opts.blocks || [];
	        target.blocksLength = target.blocks.length;

	        target.root = (typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window;
	        target.document = opts.document || target.root.document;

	        target.maxLength = 0;

	        target.backspace = false;
	        target.result = '';

	        target.onValueChanged = opts.onValueChanged || (function () {});

	        return target;
	    }
	};

	var DefaultProperties_1 = DefaultProperties;

	/**
	 * Construct a new Cleave instance by passing the configuration object
	 *
	 * @param {String | HTMLElement} element
	 * @param {Object} opts
	 */
	var Cleave = function (element, opts) {
	    var owner = this;
	    var hasMultipleElements = false;

	    if (typeof element === 'string') {
	        owner.element = document.querySelector(element);
	        hasMultipleElements = document.querySelectorAll(element).length > 1;
	    } else {
	      if (typeof element.length !== 'undefined' && element.length > 0) {
	        owner.element = element[0];
	        hasMultipleElements = element.length > 1;
	      } else {
	        owner.element = element;
	      }
	    }

	    if (!owner.element) {
	        throw new Error('[cleave.js] Please check the element');
	    }

	    if (hasMultipleElements) {
	      try {
	        // eslint-disable-next-line
	        console.warn('[cleave.js] Multiple input fields matched, cleave.js will only take the first one.');
	      } catch (e) {
	        // Old IE
	      }
	    }

	    opts.initValue = owner.element.value;

	    owner.properties = Cleave.DefaultProperties.assign({}, opts);

	    owner.init();
	};

	Cleave.prototype = {
	    init: function () {
	        var owner = this, pps = owner.properties;

	        // no need to use this lib
	        if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {
	            owner.onInput(pps.initValue);

	            return;
	        }

	        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);

	        owner.isAndroid = Cleave.Util.isAndroid();
	        owner.lastInputValue = '';
	        owner.isBackward = '';

	        owner.onChangeListener = owner.onChange.bind(owner);
	        owner.onKeyDownListener = owner.onKeyDown.bind(owner);
	        owner.onFocusListener = owner.onFocus.bind(owner);
	        owner.onCutListener = owner.onCut.bind(owner);
	        owner.onCopyListener = owner.onCopy.bind(owner);

	        owner.initSwapHiddenInput();

	        owner.element.addEventListener('input', owner.onChangeListener);
	        owner.element.addEventListener('keydown', owner.onKeyDownListener);
	        owner.element.addEventListener('focus', owner.onFocusListener);
	        owner.element.addEventListener('cut', owner.onCutListener);
	        owner.element.addEventListener('copy', owner.onCopyListener);


	        owner.initPhoneFormatter();
	        owner.initDateFormatter();
	        owner.initTimeFormatter();
	        owner.initNumeralFormatter();

	        // avoid touch input field if value is null
	        // otherwise Firefox will add red box-shadow for <input required />
	        if (pps.initValue || (pps.prefix && !pps.noImmediatePrefix)) {
	            owner.onInput(pps.initValue);
	        }
	    },

	    initSwapHiddenInput: function () {
	        var owner = this, pps = owner.properties;
	        if (!pps.swapHiddenInput) return;

	        var inputFormatter = owner.element.cloneNode(true);
	        owner.element.parentNode.insertBefore(inputFormatter, owner.element);

	        owner.elementSwapHidden = owner.element;
	        owner.elementSwapHidden.type = 'hidden';

	        owner.element = inputFormatter;
	        owner.element.id = '';
	    },

	    initNumeralFormatter: function () {
	        var owner = this, pps = owner.properties;

	        if (!pps.numeral) {
	            return;
	        }

	        pps.numeralFormatter = new Cleave.NumeralFormatter(
	            pps.numeralDecimalMark,
	            pps.numeralIntegerScale,
	            pps.numeralDecimalScale,
	            pps.numeralThousandsGroupStyle,
	            pps.numeralPositiveOnly,
	            pps.stripLeadingZeroes,
	            pps.prefix,
	            pps.signBeforePrefix,
	            pps.tailPrefix,
	            pps.delimiter
	        );
	    },

	    initTimeFormatter: function() {
	        var owner = this, pps = owner.properties;

	        if (!pps.time) {
	            return;
	        }

	        pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);
	        pps.blocks = pps.timeFormatter.getBlocks();
	        pps.blocksLength = pps.blocks.length;
	        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
	    },

	    initDateFormatter: function () {
	        var owner = this, pps = owner.properties;

	        if (!pps.date) {
	            return;
	        }

	        pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);
	        pps.blocks = pps.dateFormatter.getBlocks();
	        pps.blocksLength = pps.blocks.length;
	        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);
	    },

	    initPhoneFormatter: function () {
	        var owner = this, pps = owner.properties;

	        if (!pps.phone) {
	            return;
	        }

	        // Cleave.AsYouTypeFormatter should be provided by
	        // external google closure lib
	        try {
	            pps.phoneFormatter = new Cleave.PhoneFormatter(
	                new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),
	                pps.delimiter
	            );
	        } catch (ex) {
	            throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');
	        }
	    },

	    onKeyDown: function (event) {
	        var owner = this,
	            charCode = event.which || event.keyCode;

	        owner.lastInputValue = owner.element.value;
	        owner.isBackward = charCode === 8;
	    },

	    onChange: function (event) {
	        var owner = this, pps = owner.properties,
	            Util = Cleave.Util;

	        owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward';

	        var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);

	        if (owner.isBackward && postDelimiter) {
	            pps.postDelimiterBackspace = postDelimiter;
	        } else {
	            pps.postDelimiterBackspace = false;
	        }

	        this.onInput(this.element.value);
	    },

	    onFocus: function () {
	        var owner = this,
	            pps = owner.properties;
	        owner.lastInputValue = owner.element.value;

	        if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {
	            this.onInput(pps.prefix);
	        }

	        Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);
	    },

	    onCut: function (e) {
	        if (!Cleave.Util.checkFullSelection(this.element.value)) return;
	        this.copyClipboardData(e);
	        this.onInput('');
	    },

	    onCopy: function (e) {
	        if (!Cleave.Util.checkFullSelection(this.element.value)) return;
	        this.copyClipboardData(e);
	    },

	    copyClipboardData: function (e) {
	        var owner = this,
	            pps = owner.properties,
	            Util = Cleave.Util,
	            inputValue = owner.element.value,
	            textToCopy = '';

	        if (!pps.copyDelimiter) {
	            textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);
	        } else {
	            textToCopy = inputValue;
	        }

	        try {
	            if (e.clipboardData) {
	                e.clipboardData.setData('Text', textToCopy);
	            } else {
	                window.clipboardData.setData('Text', textToCopy);
	            }

	            e.preventDefault();
	        } catch (ex) {
	            //  empty
	        }
	    },

	    onInput: function (value) {
	        var owner = this, pps = owner.properties,
	            Util = Cleave.Util;

	        // case 1: delete one more character "4"
	        // 1234*| -> hit backspace -> 123|
	        // case 2: last character is not delimiter which is:
	        // 12|34* -> hit backspace -> 1|34*
	        // note: no need to apply this for numeral mode
	        var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);
	        if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {
	            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);
	        }

	        // phone formatter
	        if (pps.phone) {
	            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {
	                pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);
	            } else {
	                pps.result = pps.phoneFormatter.format(value);
	            }
	            owner.updateValueState();

	            return;
	        }

	        // numeral formatter
	        if (pps.numeral) {
	            // Do not show prefix when noImmediatePrefix is specified
	            // This mostly because we need to show user the native input placeholder
	            if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {
	                pps.result = '';
	            } else {
	                pps.result = pps.numeralFormatter.format(value);
	            }
	            owner.updateValueState();

	            return;
	        }

	        // date
	        if (pps.date) {
	            value = pps.dateFormatter.getValidatedDate(value);
	        }

	        // time
	        if (pps.time) {
	            value = pps.timeFormatter.getValidatedTime(value);
	        }

	        // strip delimiters
	        value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);

	        // strip prefix
	        value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);

	        // strip non-numeric characters
	        value = pps.numericOnly ? Util.strip(value, /[^\d]/g) : value;

	        // convert case
	        value = pps.uppercase ? value.toUpperCase() : value;
	        value = pps.lowercase ? value.toLowerCase() : value;

	        // prevent from showing prefix when no immediate option enabled with empty input value
	        if (pps.prefix) {
	            if (pps.tailPrefix) {
	                value = value + pps.prefix;
	            } else {
	                value = pps.prefix + value;
	            }


	            // no blocks specified, no need to do formatting
	            if (pps.blocksLength === 0) {
	                pps.result = value;
	                owner.updateValueState();

	                return;
	            }
	        }

	        // update credit card props
	        if (pps.creditCard) {
	            owner.updateCreditCardPropsByValue(value);
	        }

	        // strip over length characters
	        value = Util.headStr(value, pps.maxLength);

	        // apply blocks
	        pps.result = Util.getFormattedValue(
	            value,
	            pps.blocks, pps.blocksLength,
	            pps.delimiter, pps.delimiters, pps.delimiterLazyShow
	        );

	        owner.updateValueState();
	    },

	    updateCreditCardPropsByValue: function (value) {
	        var owner = this, pps = owner.properties,
	            Util = Cleave.Util,
	            creditCardInfo;

	        // At least one of the first 4 characters has changed
	        if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {
	            return;
	        }

	        creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);

	        pps.blocks = creditCardInfo.blocks;
	        pps.blocksLength = pps.blocks.length;
	        pps.maxLength = Util.getMaxLength(pps.blocks);

	        // credit card type changed
	        if (pps.creditCardType !== creditCardInfo.type) {
	            pps.creditCardType = creditCardInfo.type;

	            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);
	        }
	    },

	    updateValueState: function () {
	        var owner = this,
	            Util = Cleave.Util,
	            pps = owner.properties;

	        if (!owner.element) {
	            return;
	        }

	        var endPos = owner.element.selectionEnd;
	        var oldValue = owner.element.value;
	        var newValue = pps.result;

	        endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);

	        // fix Android browser type="text" input field
	        // cursor not jumping issue
	        if (owner.isAndroid) {
	            window.setTimeout(function () {
	                owner.element.value = newValue;
	                Util.setSelection(owner.element, endPos, pps.document, false);
	                owner.callOnValueChanged();
	            }, 1);

	            return;
	        }

	        owner.element.value = newValue;
	        if (pps.swapHiddenInput) owner.elementSwapHidden.value = owner.getRawValue();

	        Util.setSelection(owner.element, endPos, pps.document, false);
	        owner.callOnValueChanged();
	    },

	    callOnValueChanged: function () {
	        var owner = this,
	            pps = owner.properties;

	        pps.onValueChanged.call(owner, {
	            target: {
	                name: owner.element.name,
	                value: pps.result,
	                rawValue: owner.getRawValue()
	            }
	        });
	    },

	    setPhoneRegionCode: function (phoneRegionCode) {
	        var owner = this, pps = owner.properties;

	        pps.phoneRegionCode = phoneRegionCode;
	        owner.initPhoneFormatter();
	        owner.onChange();
	    },

	    setRawValue: function (value) {
	        var owner = this, pps = owner.properties;

	        value = value !== undefined && value !== null ? value.toString() : '';

	        if (pps.numeral) {
	            value = value.replace('.', pps.numeralDecimalMark);
	        }

	        pps.postDelimiterBackspace = false;

	        owner.element.value = value;
	        owner.onInput(value);
	    },

	    getRawValue: function () {
	        var owner = this,
	            pps = owner.properties,
	            Util = Cleave.Util,
	            rawValue = owner.element.value;

	        if (pps.rawValueTrimPrefix) {
	            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);
	        }

	        if (pps.numeral) {
	            rawValue = pps.numeralFormatter.getRawValue(rawValue);
	        } else {
	            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);
	        }

	        return rawValue;
	    },

	    getISOFormatDate: function () {
	        var owner = this,
	            pps = owner.properties;

	        return pps.date ? pps.dateFormatter.getISOFormatDate() : '';
	    },

	    getISOFormatTime: function () {
	        var owner = this,
	            pps = owner.properties;

	        return pps.time ? pps.timeFormatter.getISOFormatTime() : '';
	    },

	    getFormattedValue: function () {
	        return this.element.value;
	    },

	    destroy: function () {
	        var owner = this;

	        owner.element.removeEventListener('input', owner.onChangeListener);
	        owner.element.removeEventListener('keydown', owner.onKeyDownListener);
	        owner.element.removeEventListener('focus', owner.onFocusListener);
	        owner.element.removeEventListener('cut', owner.onCutListener);
	        owner.element.removeEventListener('copy', owner.onCopyListener);
	    },

	    toString: function () {
	        return '[Cleave Object]';
	    }
	};

	Cleave.NumeralFormatter = NumeralFormatter_1;
	Cleave.DateFormatter = DateFormatter_1;
	Cleave.TimeFormatter = TimeFormatter_1;
	Cleave.PhoneFormatter = PhoneFormatter_1;
	Cleave.CreditCardDetector = CreditCardDetector_1;
	Cleave.Util = Util_1;
	Cleave.DefaultProperties = DefaultProperties_1;

	// for angular directive
	((typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window)['Cleave'] = Cleave;

	// CommonJS
	var Cleave_1 = Cleave;

	class MaskDollars {
	  constructor() {
	    let dollars = document.querySelectorAll('[data-js="mask-dollars"]');

	    for (let i = 0; i < dollars.length; i++) {
	      new Cleave_1(dollars[i], {
	        numeral: true,
	        numeralThousandsGroupStyle: 'thousand'
	      });

	      dollars[i].addEventListener('blur', event => {
	        let value = event.target.value;
	        let postfix = '';

	        if (`${value}`.indexOf('.') > -1) {
	          let split = `${value}`.split('.');

	          postfix = (split[1].length == 1) ? '0' : postfix;
	          postfix = (split[1].length == 0) ? '00' : postfix;
	          value += postfix;
	        } else if (value != '') {
	          value += '.00';
	        }

	        event.target.value = value;
	      });
	    }
	  }
	}

	class MaskTel {
	  constructor() {
	    let phones = document.querySelectorAll('[data-js="mask-tel"]');

	    for (let i = 0; i < phones.length; i++) {
	      new Cleave_1(phones[i], {
	        numericOnly: true,
	        blocks: [0, 3, 0, 3, 4],
	        delimiters: ['(', ')', ' ', '-']
	      });
	    }
	  }
	}

	class MaskSSN {
	  constructor() {
	    let ssns = document.querySelectorAll('[data-js="mask-ssn"]');

	    for (let i = 0; i < ssns.length; i++) {
	      new Cleave_1(ssns[i], {
	        numericOnly: true,
	        blocks: [3, 2, 4],
	        delimiters: ['-', '-']
	      });
	    }
	  }
	}

	var dropzone = {exports: {}};

	(function (module, exports) {
		(function webpackUniversalModuleDefinition(root, factory) {
			module.exports = factory();
		})(self, function() {
		return /******/ (function() { // webpackBootstrap
		/******/ 	var __webpack_modules__ = ({

		/***/ 3099:
		/***/ (function(module) {

		module.exports = function (it) {
		  if (typeof it != 'function') {
		    throw TypeError(String(it) + ' is not a function');
		  } return it;
		};


		/***/ }),

		/***/ 6077:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		module.exports = function (it) {
		  if (!isObject(it) && it !== null) {
		    throw TypeError("Can't set " + String(it) + ' as a prototype');
		  } return it;
		};


		/***/ }),

		/***/ 1223:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var wellKnownSymbol = __webpack_require__(5112);
		var create = __webpack_require__(30);
		var definePropertyModule = __webpack_require__(3070);

		var UNSCOPABLES = wellKnownSymbol('unscopables');
		var ArrayPrototype = Array.prototype;

		// Array.prototype[@@unscopables]
		// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
		if (ArrayPrototype[UNSCOPABLES] == undefined) {
		  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
		    configurable: true,
		    value: create(null)
		  });
		}

		// add a key to Array.prototype[@@unscopables]
		module.exports = function (key) {
		  ArrayPrototype[UNSCOPABLES][key] = true;
		};


		/***/ }),

		/***/ 1530:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var charAt = __webpack_require__(8710).charAt;

		// `AdvanceStringIndex` abstract operation
		// https://tc39.es/ecma262/#sec-advancestringindex
		module.exports = function (S, index, unicode) {
		  return index + (unicode ? charAt(S, index).length : 1);
		};


		/***/ }),

		/***/ 5787:
		/***/ (function(module) {

		module.exports = function (it, Constructor, name) {
		  if (!(it instanceof Constructor)) {
		    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
		  } return it;
		};


		/***/ }),

		/***/ 9670:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		module.exports = function (it) {
		  if (!isObject(it)) {
		    throw TypeError(String(it) + ' is not an object');
		  } return it;
		};


		/***/ }),

		/***/ 4019:
		/***/ (function(module) {

		module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';


		/***/ }),

		/***/ 260:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var NATIVE_ARRAY_BUFFER = __webpack_require__(4019);
		var DESCRIPTORS = __webpack_require__(9781);
		var global = __webpack_require__(7854);
		var isObject = __webpack_require__(111);
		var has = __webpack_require__(6656);
		var classof = __webpack_require__(648);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var redefine = __webpack_require__(1320);
		var defineProperty = __webpack_require__(3070).f;
		var getPrototypeOf = __webpack_require__(9518);
		var setPrototypeOf = __webpack_require__(7674);
		var wellKnownSymbol = __webpack_require__(5112);
		var uid = __webpack_require__(9711);

		var Int8Array = global.Int8Array;
		var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
		var Uint8ClampedArray = global.Uint8ClampedArray;
		var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
		var TypedArray = Int8Array && getPrototypeOf(Int8Array);
		var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
		var ObjectPrototype = Object.prototype;
		var isPrototypeOf = ObjectPrototype.isPrototypeOf;

		var TO_STRING_TAG = wellKnownSymbol('toStringTag');
		var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
		// Fixing native typed arrays in Opera Presto crashes the browser, see #595
		var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
		var TYPED_ARRAY_TAG_REQIRED = false;
		var NAME;

		var TypedArrayConstructorsList = {
		  Int8Array: 1,
		  Uint8Array: 1,
		  Uint8ClampedArray: 1,
		  Int16Array: 2,
		  Uint16Array: 2,
		  Int32Array: 4,
		  Uint32Array: 4,
		  Float32Array: 4,
		  Float64Array: 8
		};

		var BigIntArrayConstructorsList = {
		  BigInt64Array: 8,
		  BigUint64Array: 8
		};

		var isView = function isView(it) {
		  if (!isObject(it)) return false;
		  var klass = classof(it);
		  return klass === 'DataView'
		    || has(TypedArrayConstructorsList, klass)
		    || has(BigIntArrayConstructorsList, klass);
		};

		var isTypedArray = function (it) {
		  if (!isObject(it)) return false;
		  var klass = classof(it);
		  return has(TypedArrayConstructorsList, klass)
		    || has(BigIntArrayConstructorsList, klass);
		};

		var aTypedArray = function (it) {
		  if (isTypedArray(it)) return it;
		  throw TypeError('Target is not a typed array');
		};

		var aTypedArrayConstructor = function (C) {
		  if (setPrototypeOf) {
		    if (isPrototypeOf.call(TypedArray, C)) return C;
		  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
		    var TypedArrayConstructor = global[ARRAY];
		    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
		      return C;
		    }
		  } throw TypeError('Target is not a typed array constructor');
		};

		var exportTypedArrayMethod = function (KEY, property, forced) {
		  if (!DESCRIPTORS) return;
		  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
		    var TypedArrayConstructor = global[ARRAY];
		    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
		      delete TypedArrayConstructor.prototype[KEY];
		    }
		  }
		  if (!TypedArrayPrototype[KEY] || forced) {
		    redefine(TypedArrayPrototype, KEY, forced ? property
		      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
		  }
		};

		var exportTypedArrayStaticMethod = function (KEY, property, forced) {
		  var ARRAY, TypedArrayConstructor;
		  if (!DESCRIPTORS) return;
		  if (setPrototypeOf) {
		    if (forced) for (ARRAY in TypedArrayConstructorsList) {
		      TypedArrayConstructor = global[ARRAY];
		      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
		        delete TypedArrayConstructor[KEY];
		      }
		    }
		    if (!TypedArray[KEY] || forced) {
		      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
		      try {
		        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
		      } catch (error) { /* empty */ }
		    } else return;
		  }
		  for (ARRAY in TypedArrayConstructorsList) {
		    TypedArrayConstructor = global[ARRAY];
		    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
		      redefine(TypedArrayConstructor, KEY, property);
		    }
		  }
		};

		for (NAME in TypedArrayConstructorsList) {
		  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
		}

		// WebKit bug - typed arrays constructors prototype is Object.prototype
		if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
		  // eslint-disable-next-line no-shadow -- safe
		  TypedArray = function TypedArray() {
		    throw TypeError('Incorrect invocation');
		  };
		  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
		    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
		  }
		}

		if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
		  TypedArrayPrototype = TypedArray.prototype;
		  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
		    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
		  }
		}

		// WebKit bug - one more object in Uint8ClampedArray prototype chain
		if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
		  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
		}

		if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
		  TYPED_ARRAY_TAG_REQIRED = true;
		  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
		    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
		  } });
		  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
		    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
		  }
		}

		module.exports = {
		  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
		  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
		  aTypedArray: aTypedArray,
		  aTypedArrayConstructor: aTypedArrayConstructor,
		  exportTypedArrayMethod: exportTypedArrayMethod,
		  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
		  isView: isView,
		  isTypedArray: isTypedArray,
		  TypedArray: TypedArray,
		  TypedArrayPrototype: TypedArrayPrototype
		};


		/***/ }),

		/***/ 3331:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var DESCRIPTORS = __webpack_require__(9781);
		var NATIVE_ARRAY_BUFFER = __webpack_require__(4019);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var redefineAll = __webpack_require__(2248);
		var fails = __webpack_require__(7293);
		var anInstance = __webpack_require__(5787);
		var toInteger = __webpack_require__(9958);
		var toLength = __webpack_require__(7466);
		var toIndex = __webpack_require__(7067);
		var IEEE754 = __webpack_require__(1179);
		var getPrototypeOf = __webpack_require__(9518);
		var setPrototypeOf = __webpack_require__(7674);
		var getOwnPropertyNames = __webpack_require__(8006).f;
		var defineProperty = __webpack_require__(3070).f;
		var arrayFill = __webpack_require__(1285);
		var setToStringTag = __webpack_require__(8003);
		var InternalStateModule = __webpack_require__(9909);

		var getInternalState = InternalStateModule.get;
		var setInternalState = InternalStateModule.set;
		var ARRAY_BUFFER = 'ArrayBuffer';
		var DATA_VIEW = 'DataView';
		var PROTOTYPE = 'prototype';
		var WRONG_LENGTH = 'Wrong length';
		var WRONG_INDEX = 'Wrong index';
		var NativeArrayBuffer = global[ARRAY_BUFFER];
		var $ArrayBuffer = NativeArrayBuffer;
		var $DataView = global[DATA_VIEW];
		var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
		var ObjectPrototype = Object.prototype;
		var RangeError = global.RangeError;

		var packIEEE754 = IEEE754.pack;
		var unpackIEEE754 = IEEE754.unpack;

		var packInt8 = function (number) {
		  return [number & 0xFF];
		};

		var packInt16 = function (number) {
		  return [number & 0xFF, number >> 8 & 0xFF];
		};

		var packInt32 = function (number) {
		  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
		};

		var unpackInt32 = function (buffer) {
		  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
		};

		var packFloat32 = function (number) {
		  return packIEEE754(number, 23, 4);
		};

		var packFloat64 = function (number) {
		  return packIEEE754(number, 52, 8);
		};

		var addGetter = function (Constructor, key) {
		  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
		};

		var get = function (view, count, index, isLittleEndian) {
		  var intIndex = toIndex(index);
		  var store = getInternalState(view);
		  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
		  var bytes = getInternalState(store.buffer).bytes;
		  var start = intIndex + store.byteOffset;
		  var pack = bytes.slice(start, start + count);
		  return isLittleEndian ? pack : pack.reverse();
		};

		var set = function (view, count, index, conversion, value, isLittleEndian) {
		  var intIndex = toIndex(index);
		  var store = getInternalState(view);
		  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
		  var bytes = getInternalState(store.buffer).bytes;
		  var start = intIndex + store.byteOffset;
		  var pack = conversion(+value);
		  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
		};

		if (!NATIVE_ARRAY_BUFFER) {
		  $ArrayBuffer = function ArrayBuffer(length) {
		    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
		    var byteLength = toIndex(length);
		    setInternalState(this, {
		      bytes: arrayFill.call(new Array(byteLength), 0),
		      byteLength: byteLength
		    });
		    if (!DESCRIPTORS) this.byteLength = byteLength;
		  };

		  $DataView = function DataView(buffer, byteOffset, byteLength) {
		    anInstance(this, $DataView, DATA_VIEW);
		    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
		    var bufferLength = getInternalState(buffer).byteLength;
		    var offset = toInteger(byteOffset);
		    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
		    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
		    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
		    setInternalState(this, {
		      buffer: buffer,
		      byteLength: byteLength,
		      byteOffset: offset
		    });
		    if (!DESCRIPTORS) {
		      this.buffer = buffer;
		      this.byteLength = byteLength;
		      this.byteOffset = offset;
		    }
		  };

		  if (DESCRIPTORS) {
		    addGetter($ArrayBuffer, 'byteLength');
		    addGetter($DataView, 'buffer');
		    addGetter($DataView, 'byteLength');
		    addGetter($DataView, 'byteOffset');
		  }

		  redefineAll($DataView[PROTOTYPE], {
		    getInt8: function getInt8(byteOffset) {
		      return get(this, 1, byteOffset)[0] << 24 >> 24;
		    },
		    getUint8: function getUint8(byteOffset) {
		      return get(this, 1, byteOffset)[0];
		    },
		    getInt16: function getInt16(byteOffset /* , littleEndian */) {
		      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
		      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
		    },
		    getUint16: function getUint16(byteOffset /* , littleEndian */) {
		      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
		      return bytes[1] << 8 | bytes[0];
		    },
		    getInt32: function getInt32(byteOffset /* , littleEndian */) {
		      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
		    },
		    getUint32: function getUint32(byteOffset /* , littleEndian */) {
		      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
		    },
		    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
		      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
		    },
		    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
		      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
		    },
		    setInt8: function setInt8(byteOffset, value) {
		      set(this, 1, byteOffset, packInt8, value);
		    },
		    setUint8: function setUint8(byteOffset, value) {
		      set(this, 1, byteOffset, packInt8, value);
		    },
		    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
		      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
		    },
		    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
		      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
		    },
		    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
		      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
		    },
		    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
		      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
		    },
		    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
		      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
		    },
		    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
		      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
		    }
		  });
		} else {
		  /* eslint-disable no-new -- required for testing */
		  if (!fails(function () {
		    NativeArrayBuffer(1);
		  }) || !fails(function () {
		    new NativeArrayBuffer(-1);
		  }) || fails(function () {
		    new NativeArrayBuffer();
		    new NativeArrayBuffer(1.5);
		    new NativeArrayBuffer(NaN);
		    return NativeArrayBuffer.name != ARRAY_BUFFER;
		  })) {
		  /* eslint-enable no-new -- required for testing */
		    $ArrayBuffer = function ArrayBuffer(length) {
		      anInstance(this, $ArrayBuffer);
		      return new NativeArrayBuffer(toIndex(length));
		    };
		    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
		    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
		      if (!((key = keys[j++]) in $ArrayBuffer)) {
		        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
		      }
		    }
		    ArrayBufferPrototype.constructor = $ArrayBuffer;
		  }

		  // WebKit bug - the same parent prototype for typed arrays and data view
		  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
		    setPrototypeOf($DataViewPrototype, ObjectPrototype);
		  }

		  // iOS Safari 7.x bug
		  var testView = new $DataView(new $ArrayBuffer(2));
		  var nativeSetInt8 = $DataViewPrototype.setInt8;
		  testView.setInt8(0, 2147483648);
		  testView.setInt8(1, 2147483649);
		  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
		    setInt8: function setInt8(byteOffset, value) {
		      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
		    },
		    setUint8: function setUint8(byteOffset, value) {
		      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
		    }
		  }, { unsafe: true });
		}

		setToStringTag($ArrayBuffer, ARRAY_BUFFER);
		setToStringTag($DataView, DATA_VIEW);

		module.exports = {
		  ArrayBuffer: $ArrayBuffer,
		  DataView: $DataView
		};


		/***/ }),

		/***/ 1048:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toObject = __webpack_require__(7908);
		var toAbsoluteIndex = __webpack_require__(1400);
		var toLength = __webpack_require__(7466);

		var min = Math.min;

		// `Array.prototype.copyWithin` method implementation
		// https://tc39.es/ecma262/#sec-array.prototype.copywithin
		module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
		  var O = toObject(this);
		  var len = toLength(O.length);
		  var to = toAbsoluteIndex(target, len);
		  var from = toAbsoluteIndex(start, len);
		  var end = arguments.length > 2 ? arguments[2] : undefined;
		  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
		  var inc = 1;
		  if (from < to && to < from + count) {
		    inc = -1;
		    from += count - 1;
		    to += count - 1;
		  }
		  while (count-- > 0) {
		    if (from in O) O[to] = O[from];
		    else delete O[to];
		    to += inc;
		    from += inc;
		  } return O;
		};


		/***/ }),

		/***/ 1285:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toObject = __webpack_require__(7908);
		var toAbsoluteIndex = __webpack_require__(1400);
		var toLength = __webpack_require__(7466);

		// `Array.prototype.fill` method implementation
		// https://tc39.es/ecma262/#sec-array.prototype.fill
		module.exports = function fill(value /* , start = 0, end = @length */) {
		  var O = toObject(this);
		  var length = toLength(O.length);
		  var argumentsLength = arguments.length;
		  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
		  var end = argumentsLength > 2 ? arguments[2] : undefined;
		  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
		  while (endPos > index) O[index++] = value;
		  return O;
		};


		/***/ }),

		/***/ 8533:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var $forEach = __webpack_require__(2092).forEach;
		var arrayMethodIsStrict = __webpack_require__(9341);

		var STRICT_METHOD = arrayMethodIsStrict('forEach');

		// `Array.prototype.forEach` method implementation
		// https://tc39.es/ecma262/#sec-array.prototype.foreach
		module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
		  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		} : [].forEach;


		/***/ }),

		/***/ 8457:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var bind = __webpack_require__(9974);
		var toObject = __webpack_require__(7908);
		var callWithSafeIterationClosing = __webpack_require__(3411);
		var isArrayIteratorMethod = __webpack_require__(7659);
		var toLength = __webpack_require__(7466);
		var createProperty = __webpack_require__(6135);
		var getIteratorMethod = __webpack_require__(1246);

		// `Array.from` method implementation
		// https://tc39.es/ecma262/#sec-array.from
		module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
		  var O = toObject(arrayLike);
		  var C = typeof this == 'function' ? this : Array;
		  var argumentsLength = arguments.length;
		  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
		  var mapping = mapfn !== undefined;
		  var iteratorMethod = getIteratorMethod(O);
		  var index = 0;
		  var length, result, step, iterator, next, value;
		  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
		  // if the target is not iterable or it's an array with the default iterator - use a simple case
		  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
		    iterator = iteratorMethod.call(O);
		    next = iterator.next;
		    result = new C();
		    for (;!(step = next.call(iterator)).done; index++) {
		      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
		      createProperty(result, index, value);
		    }
		  } else {
		    length = toLength(O.length);
		    result = new C(length);
		    for (;length > index; index++) {
		      value = mapping ? mapfn(O[index], index) : O[index];
		      createProperty(result, index, value);
		    }
		  }
		  result.length = index;
		  return result;
		};


		/***/ }),

		/***/ 1318:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toIndexedObject = __webpack_require__(5656);
		var toLength = __webpack_require__(7466);
		var toAbsoluteIndex = __webpack_require__(1400);

		// `Array.prototype.{ indexOf, includes }` methods implementation
		var createMethod = function (IS_INCLUDES) {
		  return function ($this, el, fromIndex) {
		    var O = toIndexedObject($this);
		    var length = toLength(O.length);
		    var index = toAbsoluteIndex(fromIndex, length);
		    var value;
		    // Array#includes uses SameValueZero equality algorithm
		    // eslint-disable-next-line no-self-compare -- NaN check
		    if (IS_INCLUDES && el != el) while (length > index) {
		      value = O[index++];
		      // eslint-disable-next-line no-self-compare -- NaN check
		      if (value != value) return true;
		    // Array#indexOf ignores holes, Array#includes - not
		    } else for (;length > index; index++) {
		      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
		    } return !IS_INCLUDES && -1;
		  };
		};

		module.exports = {
		  // `Array.prototype.includes` method
		  // https://tc39.es/ecma262/#sec-array.prototype.includes
		  includes: createMethod(true),
		  // `Array.prototype.indexOf` method
		  // https://tc39.es/ecma262/#sec-array.prototype.indexof
		  indexOf: createMethod(false)
		};


		/***/ }),

		/***/ 2092:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var bind = __webpack_require__(9974);
		var IndexedObject = __webpack_require__(8361);
		var toObject = __webpack_require__(7908);
		var toLength = __webpack_require__(7466);
		var arraySpeciesCreate = __webpack_require__(5417);

		var push = [].push;

		// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
		var createMethod = function (TYPE) {
		  var IS_MAP = TYPE == 1;
		  var IS_FILTER = TYPE == 2;
		  var IS_SOME = TYPE == 3;
		  var IS_EVERY = TYPE == 4;
		  var IS_FIND_INDEX = TYPE == 6;
		  var IS_FILTER_OUT = TYPE == 7;
		  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
		  return function ($this, callbackfn, that, specificCreate) {
		    var O = toObject($this);
		    var self = IndexedObject(O);
		    var boundFunction = bind(callbackfn, that, 3);
		    var length = toLength(self.length);
		    var index = 0;
		    var create = specificCreate || arraySpeciesCreate;
		    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
		    var value, result;
		    for (;length > index; index++) if (NO_HOLES || index in self) {
		      value = self[index];
		      result = boundFunction(value, index, O);
		      if (TYPE) {
		        if (IS_MAP) target[index] = result; // map
		        else if (result) switch (TYPE) {
		          case 3: return true;              // some
		          case 5: return value;             // find
		          case 6: return index;             // findIndex
		          case 2: push.call(target, value); // filter
		        } else switch (TYPE) {
		          case 4: return false;             // every
		          case 7: push.call(target, value); // filterOut
		        }
		      }
		    }
		    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
		  };
		};

		module.exports = {
		  // `Array.prototype.forEach` method
		  // https://tc39.es/ecma262/#sec-array.prototype.foreach
		  forEach: createMethod(0),
		  // `Array.prototype.map` method
		  // https://tc39.es/ecma262/#sec-array.prototype.map
		  map: createMethod(1),
		  // `Array.prototype.filter` method
		  // https://tc39.es/ecma262/#sec-array.prototype.filter
		  filter: createMethod(2),
		  // `Array.prototype.some` method
		  // https://tc39.es/ecma262/#sec-array.prototype.some
		  some: createMethod(3),
		  // `Array.prototype.every` method
		  // https://tc39.es/ecma262/#sec-array.prototype.every
		  every: createMethod(4),
		  // `Array.prototype.find` method
		  // https://tc39.es/ecma262/#sec-array.prototype.find
		  find: createMethod(5),
		  // `Array.prototype.findIndex` method
		  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
		  findIndex: createMethod(6),
		  // `Array.prototype.filterOut` method
		  // https://github.com/tc39/proposal-array-filtering
		  filterOut: createMethod(7)
		};


		/***/ }),

		/***/ 6583:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toIndexedObject = __webpack_require__(5656);
		var toInteger = __webpack_require__(9958);
		var toLength = __webpack_require__(7466);
		var arrayMethodIsStrict = __webpack_require__(9341);

		var min = Math.min;
		var nativeLastIndexOf = [].lastIndexOf;
		var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
		var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
		var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;

		// `Array.prototype.lastIndexOf` method implementation
		// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
		module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
		  // convert -0 to +0
		  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
		  var O = toIndexedObject(this);
		  var length = toLength(O.length);
		  var index = length - 1;
		  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
		  if (index < 0) index = length + index;
		  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
		  return -1;
		} : nativeLastIndexOf;


		/***/ }),

		/***/ 1194:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);
		var wellKnownSymbol = __webpack_require__(5112);
		var V8_VERSION = __webpack_require__(7392);

		var SPECIES = wellKnownSymbol('species');

		module.exports = function (METHOD_NAME) {
		  // We can't use this feature detection in V8 since it causes
		  // deoptimization and serious performance degradation
		  // https://github.com/zloirock/core-js/issues/677
		  return V8_VERSION >= 51 || !fails(function () {
		    var array = [];
		    var constructor = array.constructor = {};
		    constructor[SPECIES] = function () {
		      return { foo: 1 };
		    };
		    return array[METHOD_NAME](Boolean).foo !== 1;
		  });
		};


		/***/ }),

		/***/ 9341:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);

		module.exports = function (METHOD_NAME, argument) {
		  var method = [][METHOD_NAME];
		  return !!method && fails(function () {
		    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
		    method.call(null, argument || function () { throw 1; }, 1);
		  });
		};


		/***/ }),

		/***/ 3671:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var aFunction = __webpack_require__(3099);
		var toObject = __webpack_require__(7908);
		var IndexedObject = __webpack_require__(8361);
		var toLength = __webpack_require__(7466);

		// `Array.prototype.{ reduce, reduceRight }` methods implementation
		var createMethod = function (IS_RIGHT) {
		  return function (that, callbackfn, argumentsLength, memo) {
		    aFunction(callbackfn);
		    var O = toObject(that);
		    var self = IndexedObject(O);
		    var length = toLength(O.length);
		    var index = IS_RIGHT ? length - 1 : 0;
		    var i = IS_RIGHT ? -1 : 1;
		    if (argumentsLength < 2) while (true) {
		      if (index in self) {
		        memo = self[index];
		        index += i;
		        break;
		      }
		      index += i;
		      if (IS_RIGHT ? index < 0 : length <= index) {
		        throw TypeError('Reduce of empty array with no initial value');
		      }
		    }
		    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
		      memo = callbackfn(memo, self[index], index, O);
		    }
		    return memo;
		  };
		};

		module.exports = {
		  // `Array.prototype.reduce` method
		  // https://tc39.es/ecma262/#sec-array.prototype.reduce
		  left: createMethod(false),
		  // `Array.prototype.reduceRight` method
		  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
		  right: createMethod(true)
		};


		/***/ }),

		/***/ 5417:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);
		var isArray = __webpack_require__(3157);
		var wellKnownSymbol = __webpack_require__(5112);

		var SPECIES = wellKnownSymbol('species');

		// `ArraySpeciesCreate` abstract operation
		// https://tc39.es/ecma262/#sec-arrayspeciescreate
		module.exports = function (originalArray, length) {
		  var C;
		  if (isArray(originalArray)) {
		    C = originalArray.constructor;
		    // cross-realm fallback
		    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
		    else if (isObject(C)) {
		      C = C[SPECIES];
		      if (C === null) C = undefined;
		    }
		  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
		};


		/***/ }),

		/***/ 3411:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);
		var iteratorClose = __webpack_require__(9212);

		// call something on iterator step with safe closing on error
		module.exports = function (iterator, fn, value, ENTRIES) {
		  try {
		    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
		  // 7.4.6 IteratorClose(iterator, completion)
		  } catch (error) {
		    iteratorClose(iterator);
		    throw error;
		  }
		};


		/***/ }),

		/***/ 7072:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var wellKnownSymbol = __webpack_require__(5112);

		var ITERATOR = wellKnownSymbol('iterator');
		var SAFE_CLOSING = false;

		try {
		  var called = 0;
		  var iteratorWithReturn = {
		    next: function () {
		      return { done: !!called++ };
		    },
		    'return': function () {
		      SAFE_CLOSING = true;
		    }
		  };
		  iteratorWithReturn[ITERATOR] = function () {
		    return this;
		  };
		  // eslint-disable-next-line no-throw-literal -- required for testing
		  Array.from(iteratorWithReturn, function () { throw 2; });
		} catch (error) { /* empty */ }

		module.exports = function (exec, SKIP_CLOSING) {
		  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
		  var ITERATION_SUPPORT = false;
		  try {
		    var object = {};
		    object[ITERATOR] = function () {
		      return {
		        next: function () {
		          return { done: ITERATION_SUPPORT = true };
		        }
		      };
		    };
		    exec(object);
		  } catch (error) { /* empty */ }
		  return ITERATION_SUPPORT;
		};


		/***/ }),

		/***/ 4326:
		/***/ (function(module) {

		var toString = {}.toString;

		module.exports = function (it) {
		  return toString.call(it).slice(8, -1);
		};


		/***/ }),

		/***/ 648:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var TO_STRING_TAG_SUPPORT = __webpack_require__(1694);
		var classofRaw = __webpack_require__(4326);
		var wellKnownSymbol = __webpack_require__(5112);

		var TO_STRING_TAG = wellKnownSymbol('toStringTag');
		// ES3 wrong here
		var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

		// fallback for IE11 Script Access Denied error
		var tryGet = function (it, key) {
		  try {
		    return it[key];
		  } catch (error) { /* empty */ }
		};

		// getting tag from ES6+ `Object.prototype.toString`
		module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
		  var O, tag, result;
		  return it === undefined ? 'Undefined' : it === null ? 'Null'
		    // @@toStringTag case
		    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
		    // builtinTag case
		    : CORRECT_ARGUMENTS ? classofRaw(O)
		    // ES3 arguments fallback
		    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
		};


		/***/ }),

		/***/ 9920:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var has = __webpack_require__(6656);
		var ownKeys = __webpack_require__(3887);
		var getOwnPropertyDescriptorModule = __webpack_require__(1236);
		var definePropertyModule = __webpack_require__(3070);

		module.exports = function (target, source) {
		  var keys = ownKeys(source);
		  var defineProperty = definePropertyModule.f;
		  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
		  for (var i = 0; i < keys.length; i++) {
		    var key = keys[i];
		    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
		  }
		};


		/***/ }),

		/***/ 8544:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);

		module.exports = !fails(function () {
		  function F() { /* empty */ }
		  F.prototype.constructor = null;
		  return Object.getPrototypeOf(new F()) !== F.prototype;
		});


		/***/ }),

		/***/ 4994:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var IteratorPrototype = __webpack_require__(3383).IteratorPrototype;
		var create = __webpack_require__(30);
		var createPropertyDescriptor = __webpack_require__(9114);
		var setToStringTag = __webpack_require__(8003);
		var Iterators = __webpack_require__(7497);

		var returnThis = function () { return this; };

		module.exports = function (IteratorConstructor, NAME, next) {
		  var TO_STRING_TAG = NAME + ' Iterator';
		  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
		  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
		  Iterators[TO_STRING_TAG] = returnThis;
		  return IteratorConstructor;
		};


		/***/ }),

		/***/ 8880:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var definePropertyModule = __webpack_require__(3070);
		var createPropertyDescriptor = __webpack_require__(9114);

		module.exports = DESCRIPTORS ? function (object, key, value) {
		  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
		} : function (object, key, value) {
		  object[key] = value;
		  return object;
		};


		/***/ }),

		/***/ 9114:
		/***/ (function(module) {

		module.exports = function (bitmap, value) {
		  return {
		    enumerable: !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable: !(bitmap & 4),
		    value: value
		  };
		};


		/***/ }),

		/***/ 6135:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toPrimitive = __webpack_require__(7593);
		var definePropertyModule = __webpack_require__(3070);
		var createPropertyDescriptor = __webpack_require__(9114);

		module.exports = function (object, key, value) {
		  var propertyKey = toPrimitive(key);
		  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
		  else object[propertyKey] = value;
		};


		/***/ }),

		/***/ 654:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var createIteratorConstructor = __webpack_require__(4994);
		var getPrototypeOf = __webpack_require__(9518);
		var setPrototypeOf = __webpack_require__(7674);
		var setToStringTag = __webpack_require__(8003);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var redefine = __webpack_require__(1320);
		var wellKnownSymbol = __webpack_require__(5112);
		var IS_PURE = __webpack_require__(1913);
		var Iterators = __webpack_require__(7497);
		var IteratorsCore = __webpack_require__(3383);

		var IteratorPrototype = IteratorsCore.IteratorPrototype;
		var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
		var ITERATOR = wellKnownSymbol('iterator');
		var KEYS = 'keys';
		var VALUES = 'values';
		var ENTRIES = 'entries';

		var returnThis = function () { return this; };

		module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
		  createIteratorConstructor(IteratorConstructor, NAME, next);

		  var getIterationMethod = function (KIND) {
		    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
		    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
		    switch (KIND) {
		      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
		      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
		      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
		    } return function () { return new IteratorConstructor(this); };
		  };

		  var TO_STRING_TAG = NAME + ' Iterator';
		  var INCORRECT_VALUES_NAME = false;
		  var IterablePrototype = Iterable.prototype;
		  var nativeIterator = IterablePrototype[ITERATOR]
		    || IterablePrototype['@@iterator']
		    || DEFAULT && IterablePrototype[DEFAULT];
		  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
		  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
		  var CurrentIteratorPrototype, methods, KEY;

		  // fix native
		  if (anyNativeIterator) {
		    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
		    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
		      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
		        if (setPrototypeOf) {
		          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
		        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
		          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
		        }
		      }
		      // Set @@toStringTag to native iterators
		      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
		      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
		    }
		  }

		  // fix Array#{values, @@iterator}.name in V8 / FF
		  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
		    INCORRECT_VALUES_NAME = true;
		    defaultIterator = function values() { return nativeIterator.call(this); };
		  }

		  // define iterator
		  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
		    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
		  }
		  Iterators[NAME] = defaultIterator;

		  // export additional methods
		  if (DEFAULT) {
		    methods = {
		      values: getIterationMethod(VALUES),
		      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
		      entries: getIterationMethod(ENTRIES)
		    };
		    if (FORCED) for (KEY in methods) {
		      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
		        redefine(IterablePrototype, KEY, methods[KEY]);
		      }
		    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
		  }

		  return methods;
		};


		/***/ }),

		/***/ 9781:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);

		// Detect IE8's incomplete defineProperty implementation
		module.exports = !fails(function () {
		  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
		});


		/***/ }),

		/***/ 317:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var isObject = __webpack_require__(111);

		var document = global.document;
		// typeof document.createElement is 'object' in old IE
		var EXISTS = isObject(document) && isObject(document.createElement);

		module.exports = function (it) {
		  return EXISTS ? document.createElement(it) : {};
		};


		/***/ }),

		/***/ 8324:
		/***/ (function(module) {

		// iterable DOM collections
		// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
		module.exports = {
		  CSSRuleList: 0,
		  CSSStyleDeclaration: 0,
		  CSSValueList: 0,
		  ClientRectList: 0,
		  DOMRectList: 0,
		  DOMStringList: 0,
		  DOMTokenList: 1,
		  DataTransferItemList: 0,
		  FileList: 0,
		  HTMLAllCollection: 0,
		  HTMLCollection: 0,
		  HTMLFormElement: 0,
		  HTMLSelectElement: 0,
		  MediaList: 0,
		  MimeTypeArray: 0,
		  NamedNodeMap: 0,
		  NodeList: 1,
		  PaintRequestList: 0,
		  Plugin: 0,
		  PluginArray: 0,
		  SVGLengthList: 0,
		  SVGNumberList: 0,
		  SVGPathSegList: 0,
		  SVGPointList: 0,
		  SVGStringList: 0,
		  SVGTransformList: 0,
		  SourceBufferList: 0,
		  StyleSheetList: 0,
		  TextTrackCueList: 0,
		  TextTrackList: 0,
		  TouchList: 0
		};


		/***/ }),

		/***/ 8113:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var getBuiltIn = __webpack_require__(5005);

		module.exports = getBuiltIn('navigator', 'userAgent') || '';


		/***/ }),

		/***/ 7392:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var userAgent = __webpack_require__(8113);

		var process = global.process;
		var versions = process && process.versions;
		var v8 = versions && versions.v8;
		var match, version;

		if (v8) {
		  match = v8.split('.');
		  version = match[0] + match[1];
		} else if (userAgent) {
		  match = userAgent.match(/Edge\/(\d+)/);
		  if (!match || match[1] >= 74) {
		    match = userAgent.match(/Chrome\/(\d+)/);
		    if (match) version = match[1];
		  }
		}

		module.exports = version && +version;


		/***/ }),

		/***/ 748:
		/***/ (function(module) {

		// IE8- don't enum bug keys
		module.exports = [
		  'constructor',
		  'hasOwnProperty',
		  'isPrototypeOf',
		  'propertyIsEnumerable',
		  'toLocaleString',
		  'toString',
		  'valueOf'
		];


		/***/ }),

		/***/ 2109:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var getOwnPropertyDescriptor = __webpack_require__(1236).f;
		var createNonEnumerableProperty = __webpack_require__(8880);
		var redefine = __webpack_require__(1320);
		var setGlobal = __webpack_require__(3505);
		var copyConstructorProperties = __webpack_require__(9920);
		var isForced = __webpack_require__(4705);

		/*
		  options.target      - name of the target object
		  options.global      - target is the global object
		  options.stat        - export as static methods of target
		  options.proto       - export as prototype methods of target
		  options.real        - real prototype method for the `pure` version
		  options.forced      - export even if the native feature is available
		  options.bind        - bind methods to the target, required for the `pure` version
		  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
		  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
		  options.sham        - add a flag to not completely full polyfills
		  options.enumerable  - export as enumerable property
		  options.noTargetGet - prevent calling a getter on target
		*/
		module.exports = function (options, source) {
		  var TARGET = options.target;
		  var GLOBAL = options.global;
		  var STATIC = options.stat;
		  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
		  if (GLOBAL) {
		    target = global;
		  } else if (STATIC) {
		    target = global[TARGET] || setGlobal(TARGET, {});
		  } else {
		    target = (global[TARGET] || {}).prototype;
		  }
		  if (target) for (key in source) {
		    sourceProperty = source[key];
		    if (options.noTargetGet) {
		      descriptor = getOwnPropertyDescriptor(target, key);
		      targetProperty = descriptor && descriptor.value;
		    } else targetProperty = target[key];
		    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
		    // contained in target
		    if (!FORCED && targetProperty !== undefined) {
		      if (typeof sourceProperty === typeof targetProperty) continue;
		      copyConstructorProperties(sourceProperty, targetProperty);
		    }
		    // add a flag to not completely full polyfills
		    if (options.sham || (targetProperty && targetProperty.sham)) {
		      createNonEnumerableProperty(sourceProperty, 'sham', true);
		    }
		    // extend global
		    redefine(target, key, sourceProperty, options);
		  }
		};


		/***/ }),

		/***/ 7293:
		/***/ (function(module) {

		module.exports = function (exec) {
		  try {
		    return !!exec();
		  } catch (error) {
		    return true;
		  }
		};


		/***/ }),

		/***/ 7007:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		// TODO: Remove from `core-js@4` since it's moved to entry points
		__webpack_require__(4916);
		var redefine = __webpack_require__(1320);
		var fails = __webpack_require__(7293);
		var wellKnownSymbol = __webpack_require__(5112);
		var regexpExec = __webpack_require__(2261);
		var createNonEnumerableProperty = __webpack_require__(8880);

		var SPECIES = wellKnownSymbol('species');

		var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
		  // #replace needs built-in support for named groups.
		  // #match works fine because it just return the exec results, even if it has
		  // a "grops" property.
		  var re = /./;
		  re.exec = function () {
		    var result = [];
		    result.groups = { a: '7' };
		    return result;
		  };
		  return ''.replace(re, '$<a>') !== '7';
		});

		// IE <= 11 replaces $0 with the whole match, as if it was $&
		// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
		var REPLACE_KEEPS_$0 = (function () {
		  return 'a'.replace(/./, '$0') === '$0';
		})();

		var REPLACE = wellKnownSymbol('replace');
		// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
		var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
		  if (/./[REPLACE]) {
		    return /./[REPLACE]('a', '$0') === '';
		  }
		  return false;
		})();

		// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
		// Weex JS has frozen built-in prototypes, so use try / catch wrapper
		var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
		  // eslint-disable-next-line regexp/no-empty-group -- required for testing
		  var re = /(?:)/;
		  var originalExec = re.exec;
		  re.exec = function () { return originalExec.apply(this, arguments); };
		  var result = 'ab'.split(re);
		  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
		});

		module.exports = function (KEY, length, exec, sham) {
		  var SYMBOL = wellKnownSymbol(KEY);

		  var DELEGATES_TO_SYMBOL = !fails(function () {
		    // String methods call symbol-named RegEp methods
		    var O = {};
		    O[SYMBOL] = function () { return 7; };
		    return ''[KEY](O) != 7;
		  });

		  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
		    // Symbol-named RegExp methods call .exec
		    var execCalled = false;
		    var re = /a/;

		    if (KEY === 'split') {
		      // We can't use real regex here since it causes deoptimization
		      // and serious performance degradation in V8
		      // https://github.com/zloirock/core-js/issues/306
		      re = {};
		      // RegExp[@@split] doesn't call the regex's exec method, but first creates
		      // a new one. We need to return the patched regex when creating the new one.
		      re.constructor = {};
		      re.constructor[SPECIES] = function () { return re; };
		      re.flags = '';
		      re[SYMBOL] = /./[SYMBOL];
		    }

		    re.exec = function () { execCalled = true; return null; };

		    re[SYMBOL]('');
		    return !execCalled;
		  });

		  if (
		    !DELEGATES_TO_SYMBOL ||
		    !DELEGATES_TO_EXEC ||
		    (KEY === 'replace' && !(
		      REPLACE_SUPPORTS_NAMED_GROUPS &&
		      REPLACE_KEEPS_$0 &&
		      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
		    )) ||
		    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
		  ) {
		    var nativeRegExpMethod = /./[SYMBOL];
		    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
		      if (regexp.exec === regexpExec) {
		        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
		          // The native String method already delegates to @@method (this
		          // polyfilled function), leasing to infinite recursion.
		          // We avoid it by directly calling the native @@method method.
		          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
		        }
		        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
		      }
		      return { done: false };
		    }, {
		      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
		      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
		    });
		    var stringMethod = methods[0];
		    var regexMethod = methods[1];

		    redefine(String.prototype, KEY, stringMethod);
		    redefine(RegExp.prototype, SYMBOL, length == 2
		      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
		      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
		      ? function (string, arg) { return regexMethod.call(string, this, arg); }
		      // 21.2.5.6 RegExp.prototype[@@match](string)
		      // 21.2.5.9 RegExp.prototype[@@search](string)
		      : function (string) { return regexMethod.call(string, this); }
		    );
		  }

		  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
		};


		/***/ }),

		/***/ 9974:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var aFunction = __webpack_require__(3099);

		// optional / simple context binding
		module.exports = function (fn, that, length) {
		  aFunction(fn);
		  if (that === undefined) return fn;
		  switch (length) {
		    case 0: return function () {
		      return fn.call(that);
		    };
		    case 1: return function (a) {
		      return fn.call(that, a);
		    };
		    case 2: return function (a, b) {
		      return fn.call(that, a, b);
		    };
		    case 3: return function (a, b, c) {
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function (/* ...args */) {
		    return fn.apply(that, arguments);
		  };
		};


		/***/ }),

		/***/ 5005:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var path = __webpack_require__(857);
		var global = __webpack_require__(7854);

		var aFunction = function (variable) {
		  return typeof variable == 'function' ? variable : undefined;
		};

		module.exports = function (namespace, method) {
		  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
		    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
		};


		/***/ }),

		/***/ 1246:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var classof = __webpack_require__(648);
		var Iterators = __webpack_require__(7497);
		var wellKnownSymbol = __webpack_require__(5112);

		var ITERATOR = wellKnownSymbol('iterator');

		module.exports = function (it) {
		  if (it != undefined) return it[ITERATOR]
		    || it['@@iterator']
		    || Iterators[classof(it)];
		};


		/***/ }),

		/***/ 8554:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);
		var getIteratorMethod = __webpack_require__(1246);

		module.exports = function (it) {
		  var iteratorMethod = getIteratorMethod(it);
		  if (typeof iteratorMethod != 'function') {
		    throw TypeError(String(it) + ' is not iterable');
		  } return anObject(iteratorMethod.call(it));
		};


		/***/ }),

		/***/ 647:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toObject = __webpack_require__(7908);

		var floor = Math.floor;
		var replace = ''.replace;
		var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
		var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

		// https://tc39.es/ecma262/#sec-getsubstitution
		module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
		  var tailPos = position + matched.length;
		  var m = captures.length;
		  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
		  if (namedCaptures !== undefined) {
		    namedCaptures = toObject(namedCaptures);
		    symbols = SUBSTITUTION_SYMBOLS;
		  }
		  return replace.call(replacement, symbols, function (match, ch) {
		    var capture;
		    switch (ch.charAt(0)) {
		      case '$': return '$';
		      case '&': return matched;
		      case '`': return str.slice(0, position);
		      case "'": return str.slice(tailPos);
		      case '<':
		        capture = namedCaptures[ch.slice(1, -1)];
		        break;
		      default: // \d\d?
		        var n = +ch;
		        if (n === 0) return match;
		        if (n > m) {
		          var f = floor(n / 10);
		          if (f === 0) return match;
		          if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
		          return match;
		        }
		        capture = captures[n - 1];
		    }
		    return capture === undefined ? '' : capture;
		  });
		};


		/***/ }),

		/***/ 7854:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var check = function (it) {
		  return it && it.Math == Math && it;
		};

		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		module.exports =
		  /* global globalThis -- safe */
		  check(typeof globalThis == 'object' && globalThis) ||
		  check(typeof window == 'object' && window) ||
		  check(typeof self == 'object' && self) ||
		  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
		  // eslint-disable-next-line no-new-func -- fallback
		  (function () { return this; })() || Function('return this')();


		/***/ }),

		/***/ 6656:
		/***/ (function(module) {

		var hasOwnProperty = {}.hasOwnProperty;

		module.exports = function (it, key) {
		  return hasOwnProperty.call(it, key);
		};


		/***/ }),

		/***/ 3501:
		/***/ (function(module) {

		module.exports = {};


		/***/ }),

		/***/ 490:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var getBuiltIn = __webpack_require__(5005);

		module.exports = getBuiltIn('document', 'documentElement');


		/***/ }),

		/***/ 4664:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var fails = __webpack_require__(7293);
		var createElement = __webpack_require__(317);

		// Thank's IE8 for his funny defineProperty
		module.exports = !DESCRIPTORS && !fails(function () {
		  return Object.defineProperty(createElement('div'), 'a', {
		    get: function () { return 7; }
		  }).a != 7;
		});


		/***/ }),

		/***/ 1179:
		/***/ (function(module) {

		// IEEE754 conversions based on https://github.com/feross/ieee754
		var abs = Math.abs;
		var pow = Math.pow;
		var floor = Math.floor;
		var log = Math.log;
		var LN2 = Math.LN2;

		var pack = function (number, mantissaLength, bytes) {
		  var buffer = new Array(bytes);
		  var exponentLength = bytes * 8 - mantissaLength - 1;
		  var eMax = (1 << exponentLength) - 1;
		  var eBias = eMax >> 1;
		  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
		  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
		  var index = 0;
		  var exponent, mantissa, c;
		  number = abs(number);
		  // eslint-disable-next-line no-self-compare -- NaN check
		  if (number != number || number === Infinity) {
		    // eslint-disable-next-line no-self-compare -- NaN check
		    mantissa = number != number ? 1 : 0;
		    exponent = eMax;
		  } else {
		    exponent = floor(log(number) / LN2);
		    if (number * (c = pow(2, -exponent)) < 1) {
		      exponent--;
		      c *= 2;
		    }
		    if (exponent + eBias >= 1) {
		      number += rt / c;
		    } else {
		      number += rt * pow(2, 1 - eBias);
		    }
		    if (number * c >= 2) {
		      exponent++;
		      c /= 2;
		    }
		    if (exponent + eBias >= eMax) {
		      mantissa = 0;
		      exponent = eMax;
		    } else if (exponent + eBias >= 1) {
		      mantissa = (number * c - 1) * pow(2, mantissaLength);
		      exponent = exponent + eBias;
		    } else {
		      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
		      exponent = 0;
		    }
		  }
		  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
		  exponent = exponent << mantissaLength | mantissa;
		  exponentLength += mantissaLength;
		  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
		  buffer[--index] |= sign * 128;
		  return buffer;
		};

		var unpack = function (buffer, mantissaLength) {
		  var bytes = buffer.length;
		  var exponentLength = bytes * 8 - mantissaLength - 1;
		  var eMax = (1 << exponentLength) - 1;
		  var eBias = eMax >> 1;
		  var nBits = exponentLength - 7;
		  var index = bytes - 1;
		  var sign = buffer[index--];
		  var exponent = sign & 127;
		  var mantissa;
		  sign >>= 7;
		  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
		  mantissa = exponent & (1 << -nBits) - 1;
		  exponent >>= -nBits;
		  nBits += mantissaLength;
		  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
		  if (exponent === 0) {
		    exponent = 1 - eBias;
		  } else if (exponent === eMax) {
		    return mantissa ? NaN : sign ? -Infinity : Infinity;
		  } else {
		    mantissa = mantissa + pow(2, mantissaLength);
		    exponent = exponent - eBias;
		  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
		};

		module.exports = {
		  pack: pack,
		  unpack: unpack
		};


		/***/ }),

		/***/ 8361:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);
		var classof = __webpack_require__(4326);

		var split = ''.split;

		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		module.exports = fails(function () {
		  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
		  // eslint-disable-next-line no-prototype-builtins -- safe
		  return !Object('z').propertyIsEnumerable(0);
		}) ? function (it) {
		  return classof(it) == 'String' ? split.call(it, '') : Object(it);
		} : Object;


		/***/ }),

		/***/ 9587:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);
		var setPrototypeOf = __webpack_require__(7674);

		// makes subclassing work correct for wrapped built-ins
		module.exports = function ($this, dummy, Wrapper) {
		  var NewTarget, NewTargetPrototype;
		  if (
		    // it can work only with native `setPrototypeOf`
		    setPrototypeOf &&
		    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
		    typeof (NewTarget = dummy.constructor) == 'function' &&
		    NewTarget !== Wrapper &&
		    isObject(NewTargetPrototype = NewTarget.prototype) &&
		    NewTargetPrototype !== Wrapper.prototype
		  ) setPrototypeOf($this, NewTargetPrototype);
		  return $this;
		};


		/***/ }),

		/***/ 2788:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var store = __webpack_require__(5465);

		var functionToString = Function.toString;

		// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
		if (typeof store.inspectSource != 'function') {
		  store.inspectSource = function (it) {
		    return functionToString.call(it);
		  };
		}

		module.exports = store.inspectSource;


		/***/ }),

		/***/ 9909:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var NATIVE_WEAK_MAP = __webpack_require__(8536);
		var global = __webpack_require__(7854);
		var isObject = __webpack_require__(111);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var objectHas = __webpack_require__(6656);
		var shared = __webpack_require__(5465);
		var sharedKey = __webpack_require__(6200);
		var hiddenKeys = __webpack_require__(3501);

		var WeakMap = global.WeakMap;
		var set, get, has;

		var enforce = function (it) {
		  return has(it) ? get(it) : set(it, {});
		};

		var getterFor = function (TYPE) {
		  return function (it) {
		    var state;
		    if (!isObject(it) || (state = get(it)).type !== TYPE) {
		      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
		    } return state;
		  };
		};

		if (NATIVE_WEAK_MAP) {
		  var store = shared.state || (shared.state = new WeakMap());
		  var wmget = store.get;
		  var wmhas = store.has;
		  var wmset = store.set;
		  set = function (it, metadata) {
		    metadata.facade = it;
		    wmset.call(store, it, metadata);
		    return metadata;
		  };
		  get = function (it) {
		    return wmget.call(store, it) || {};
		  };
		  has = function (it) {
		    return wmhas.call(store, it);
		  };
		} else {
		  var STATE = sharedKey('state');
		  hiddenKeys[STATE] = true;
		  set = function (it, metadata) {
		    metadata.facade = it;
		    createNonEnumerableProperty(it, STATE, metadata);
		    return metadata;
		  };
		  get = function (it) {
		    return objectHas(it, STATE) ? it[STATE] : {};
		  };
		  has = function (it) {
		    return objectHas(it, STATE);
		  };
		}

		module.exports = {
		  set: set,
		  get: get,
		  has: has,
		  enforce: enforce,
		  getterFor: getterFor
		};


		/***/ }),

		/***/ 7659:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var wellKnownSymbol = __webpack_require__(5112);
		var Iterators = __webpack_require__(7497);

		var ITERATOR = wellKnownSymbol('iterator');
		var ArrayPrototype = Array.prototype;

		// check on default Array iterator
		module.exports = function (it) {
		  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
		};


		/***/ }),

		/***/ 3157:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var classof = __webpack_require__(4326);

		// `IsArray` abstract operation
		// https://tc39.es/ecma262/#sec-isarray
		module.exports = Array.isArray || function isArray(arg) {
		  return classof(arg) == 'Array';
		};


		/***/ }),

		/***/ 4705:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);

		var replacement = /#|\.prototype\./;

		var isForced = function (feature, detection) {
		  var value = data[normalize(feature)];
		  return value == POLYFILL ? true
		    : value == NATIVE ? false
		    : typeof detection == 'function' ? fails(detection)
		    : !!detection;
		};

		var normalize = isForced.normalize = function (string) {
		  return String(string).replace(replacement, '.').toLowerCase();
		};

		var data = isForced.data = {};
		var NATIVE = isForced.NATIVE = 'N';
		var POLYFILL = isForced.POLYFILL = 'P';

		module.exports = isForced;


		/***/ }),

		/***/ 111:
		/***/ (function(module) {

		module.exports = function (it) {
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};


		/***/ }),

		/***/ 1913:
		/***/ (function(module) {

		module.exports = false;


		/***/ }),

		/***/ 7850:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);
		var classof = __webpack_require__(4326);
		var wellKnownSymbol = __webpack_require__(5112);

		var MATCH = wellKnownSymbol('match');

		// `IsRegExp` abstract operation
		// https://tc39.es/ecma262/#sec-isregexp
		module.exports = function (it) {
		  var isRegExp;
		  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
		};


		/***/ }),

		/***/ 9212:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);

		module.exports = function (iterator) {
		  var returnMethod = iterator['return'];
		  if (returnMethod !== undefined) {
		    return anObject(returnMethod.call(iterator)).value;
		  }
		};


		/***/ }),

		/***/ 3383:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);
		var getPrototypeOf = __webpack_require__(9518);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var has = __webpack_require__(6656);
		var wellKnownSymbol = __webpack_require__(5112);
		var IS_PURE = __webpack_require__(1913);

		var ITERATOR = wellKnownSymbol('iterator');
		var BUGGY_SAFARI_ITERATORS = false;

		var returnThis = function () { return this; };

		// `%IteratorPrototype%` object
		// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
		var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

		if ([].keys) {
		  arrayIterator = [].keys();
		  // Safari 8 has buggy iterators w/o `next`
		  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
		  else {
		    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
		    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
		  }
		}

		var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
		  var test = {};
		  // FF44- legacy iterators case
		  return IteratorPrototype[ITERATOR].call(test) !== test;
		});

		if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};

		// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
		if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
		  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
		}

		module.exports = {
		  IteratorPrototype: IteratorPrototype,
		  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
		};


		/***/ }),

		/***/ 7497:
		/***/ (function(module) {

		module.exports = {};


		/***/ }),

		/***/ 133:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);

		module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
		  // Chrome 38 Symbol has incorrect toString conversion
		  /* global Symbol -- required for testing */
		  return !String(Symbol());
		});


		/***/ }),

		/***/ 590:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);
		var wellKnownSymbol = __webpack_require__(5112);
		var IS_PURE = __webpack_require__(1913);

		var ITERATOR = wellKnownSymbol('iterator');

		module.exports = !fails(function () {
		  var url = new URL('b?a=1&b=2&c=3', 'http://a');
		  var searchParams = url.searchParams;
		  var result = '';
		  url.pathname = 'c%20d';
		  searchParams.forEach(function (value, key) {
		    searchParams['delete']('b');
		    result += key + value;
		  });
		  return (IS_PURE && !url.toJSON)
		    || !searchParams.sort
		    || url.href !== 'http://a/c%20d?a=1&c=3'
		    || searchParams.get('c') !== '3'
		    || String(new URLSearchParams('?a=1')) !== 'a=1'
		    || !searchParams[ITERATOR]
		    // throws in Edge
		    || new URL('https://a@b').username !== 'a'
		    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
		    // not punycoded in Edge
		    || new URL('http://тест').host !== 'xn--e1aybc'
		    // not escaped in Chrome 62-
		    || new URL('http://a#б').hash !== '#%D0%B1'
		    // fails in Chrome 66-
		    || result !== 'a1c3'
		    // throws in Safari
		    || new URL('http://x', undefined).host !== 'x';
		});


		/***/ }),

		/***/ 8536:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var inspectSource = __webpack_require__(2788);

		var WeakMap = global.WeakMap;

		module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


		/***/ }),

		/***/ 1574:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var fails = __webpack_require__(7293);
		var objectKeys = __webpack_require__(1956);
		var getOwnPropertySymbolsModule = __webpack_require__(5181);
		var propertyIsEnumerableModule = __webpack_require__(5296);
		var toObject = __webpack_require__(7908);
		var IndexedObject = __webpack_require__(8361);

		var nativeAssign = Object.assign;
		var defineProperty = Object.defineProperty;

		// `Object.assign` method
		// https://tc39.es/ecma262/#sec-object.assign
		module.exports = !nativeAssign || fails(function () {
		  // should have correct order of operations (Edge bug)
		  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
		    enumerable: true,
		    get: function () {
		      defineProperty(this, 'b', {
		        value: 3,
		        enumerable: false
		      });
		    }
		  }), { b: 2 })).b !== 1) return true;
		  // should work with symbols and should have deterministic property order (V8 bug)
		  var A = {};
		  var B = {};
		  /* global Symbol -- required for testing */
		  var symbol = Symbol();
		  var alphabet = 'abcdefghijklmnopqrst';
		  A[symbol] = 7;
		  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
		  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
		}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
		  var T = toObject(target);
		  var argumentsLength = arguments.length;
		  var index = 1;
		  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
		  var propertyIsEnumerable = propertyIsEnumerableModule.f;
		  while (argumentsLength > index) {
		    var S = IndexedObject(arguments[index++]);
		    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
		    var length = keys.length;
		    var j = 0;
		    var key;
		    while (length > j) {
		      key = keys[j++];
		      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
		    }
		  } return T;
		} : nativeAssign;


		/***/ }),

		/***/ 30:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);
		var defineProperties = __webpack_require__(6048);
		var enumBugKeys = __webpack_require__(748);
		var hiddenKeys = __webpack_require__(3501);
		var html = __webpack_require__(490);
		var documentCreateElement = __webpack_require__(317);
		var sharedKey = __webpack_require__(6200);

		var GT = '>';
		var LT = '<';
		var PROTOTYPE = 'prototype';
		var SCRIPT = 'script';
		var IE_PROTO = sharedKey('IE_PROTO');

		var EmptyConstructor = function () { /* empty */ };

		var scriptTag = function (content) {
		  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
		};

		// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
		var NullProtoObjectViaActiveX = function (activeXDocument) {
		  activeXDocument.write(scriptTag(''));
		  activeXDocument.close();
		  var temp = activeXDocument.parentWindow.Object;
		  activeXDocument = null; // avoid memory leak
		  return temp;
		};

		// Create object with fake `null` prototype: use iframe Object with cleared prototype
		var NullProtoObjectViaIFrame = function () {
		  // Thrash, waste and sodomy: IE GC bug
		  var iframe = documentCreateElement('iframe');
		  var JS = 'java' + SCRIPT + ':';
		  var iframeDocument;
		  iframe.style.display = 'none';
		  html.appendChild(iframe);
		  // https://github.com/zloirock/core-js/issues/475
		  iframe.src = String(JS);
		  iframeDocument = iframe.contentWindow.document;
		  iframeDocument.open();
		  iframeDocument.write(scriptTag('document.F=Object'));
		  iframeDocument.close();
		  return iframeDocument.F;
		};

		// Check for document.domain and active x support
		// No need to use active x approach when document.domain is not set
		// see https://github.com/es-shims/es5-shim/issues/150
		// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
		// avoid IE GC bug
		var activeXDocument;
		var NullProtoObject = function () {
		  try {
		    /* global ActiveXObject -- old IE */
		    activeXDocument = document.domain && new ActiveXObject('htmlfile');
		  } catch (error) { /* ignore */ }
		  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
		  var length = enumBugKeys.length;
		  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
		  return NullProtoObject();
		};

		hiddenKeys[IE_PROTO] = true;

		// `Object.create` method
		// https://tc39.es/ecma262/#sec-object.create
		module.exports = Object.create || function create(O, Properties) {
		  var result;
		  if (O !== null) {
		    EmptyConstructor[PROTOTYPE] = anObject(O);
		    result = new EmptyConstructor();
		    EmptyConstructor[PROTOTYPE] = null;
		    // add "__proto__" for Object.getPrototypeOf polyfill
		    result[IE_PROTO] = O;
		  } else result = NullProtoObject();
		  return Properties === undefined ? result : defineProperties(result, Properties);
		};


		/***/ }),

		/***/ 6048:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var definePropertyModule = __webpack_require__(3070);
		var anObject = __webpack_require__(9670);
		var objectKeys = __webpack_require__(1956);

		// `Object.defineProperties` method
		// https://tc39.es/ecma262/#sec-object.defineproperties
		module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
		  anObject(O);
		  var keys = objectKeys(Properties);
		  var length = keys.length;
		  var index = 0;
		  var key;
		  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
		  return O;
		};


		/***/ }),

		/***/ 3070:
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var IE8_DOM_DEFINE = __webpack_require__(4664);
		var anObject = __webpack_require__(9670);
		var toPrimitive = __webpack_require__(7593);

		var nativeDefineProperty = Object.defineProperty;

		// `Object.defineProperty` method
		// https://tc39.es/ecma262/#sec-object.defineproperty
		exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
		  anObject(O);
		  P = toPrimitive(P, true);
		  anObject(Attributes);
		  if (IE8_DOM_DEFINE) try {
		    return nativeDefineProperty(O, P, Attributes);
		  } catch (error) { /* empty */ }
		  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
		  if ('value' in Attributes) O[P] = Attributes.value;
		  return O;
		};


		/***/ }),

		/***/ 1236:
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var propertyIsEnumerableModule = __webpack_require__(5296);
		var createPropertyDescriptor = __webpack_require__(9114);
		var toIndexedObject = __webpack_require__(5656);
		var toPrimitive = __webpack_require__(7593);
		var has = __webpack_require__(6656);
		var IE8_DOM_DEFINE = __webpack_require__(4664);

		var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

		// `Object.getOwnPropertyDescriptor` method
		// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
		exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
		  O = toIndexedObject(O);
		  P = toPrimitive(P, true);
		  if (IE8_DOM_DEFINE) try {
		    return nativeGetOwnPropertyDescriptor(O, P);
		  } catch (error) { /* empty */ }
		  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
		};


		/***/ }),

		/***/ 8006:
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

		var internalObjectKeys = __webpack_require__(6324);
		var enumBugKeys = __webpack_require__(748);

		var hiddenKeys = enumBugKeys.concat('length', 'prototype');

		// `Object.getOwnPropertyNames` method
		// https://tc39.es/ecma262/#sec-object.getownpropertynames
		exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
		  return internalObjectKeys(O, hiddenKeys);
		};


		/***/ }),

		/***/ 5181:
		/***/ (function(__unused_webpack_module, exports) {

		exports.f = Object.getOwnPropertySymbols;


		/***/ }),

		/***/ 9518:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var has = __webpack_require__(6656);
		var toObject = __webpack_require__(7908);
		var sharedKey = __webpack_require__(6200);
		var CORRECT_PROTOTYPE_GETTER = __webpack_require__(8544);

		var IE_PROTO = sharedKey('IE_PROTO');
		var ObjectPrototype = Object.prototype;

		// `Object.getPrototypeOf` method
		// https://tc39.es/ecma262/#sec-object.getprototypeof
		module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
		  O = toObject(O);
		  if (has(O, IE_PROTO)) return O[IE_PROTO];
		  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
		    return O.constructor.prototype;
		  } return O instanceof Object ? ObjectPrototype : null;
		};


		/***/ }),

		/***/ 6324:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var has = __webpack_require__(6656);
		var toIndexedObject = __webpack_require__(5656);
		var indexOf = __webpack_require__(1318).indexOf;
		var hiddenKeys = __webpack_require__(3501);

		module.exports = function (object, names) {
		  var O = toIndexedObject(object);
		  var i = 0;
		  var result = [];
		  var key;
		  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
		  // Don't enum bug & hidden keys
		  while (names.length > i) if (has(O, key = names[i++])) {
		    ~indexOf(result, key) || result.push(key);
		  }
		  return result;
		};


		/***/ }),

		/***/ 1956:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var internalObjectKeys = __webpack_require__(6324);
		var enumBugKeys = __webpack_require__(748);

		// `Object.keys` method
		// https://tc39.es/ecma262/#sec-object.keys
		module.exports = Object.keys || function keys(O) {
		  return internalObjectKeys(O, enumBugKeys);
		};


		/***/ }),

		/***/ 5296:
		/***/ (function(__unused_webpack_module, exports) {

		var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
		var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

		// Nashorn ~ JDK8 bug
		var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

		// `Object.prototype.propertyIsEnumerable` method implementation
		// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
		exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
		  var descriptor = getOwnPropertyDescriptor(this, V);
		  return !!descriptor && descriptor.enumerable;
		} : nativePropertyIsEnumerable;


		/***/ }),

		/***/ 7674:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		/* eslint-disable no-proto -- safe */
		var anObject = __webpack_require__(9670);
		var aPossiblePrototype = __webpack_require__(6077);

		// `Object.setPrototypeOf` method
		// https://tc39.es/ecma262/#sec-object.setprototypeof
		// Works with __proto__ only. Old v8 can't work with null proto objects.
		module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
		  var CORRECT_SETTER = false;
		  var test = {};
		  var setter;
		  try {
		    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
		    setter.call(test, []);
		    CORRECT_SETTER = test instanceof Array;
		  } catch (error) { /* empty */ }
		  return function setPrototypeOf(O, proto) {
		    anObject(O);
		    aPossiblePrototype(proto);
		    if (CORRECT_SETTER) setter.call(O, proto);
		    else O.__proto__ = proto;
		    return O;
		  };
		}() : undefined);


		/***/ }),

		/***/ 288:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var TO_STRING_TAG_SUPPORT = __webpack_require__(1694);
		var classof = __webpack_require__(648);

		// `Object.prototype.toString` method implementation
		// https://tc39.es/ecma262/#sec-object.prototype.tostring
		module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
		  return '[object ' + classof(this) + ']';
		};


		/***/ }),

		/***/ 3887:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var getBuiltIn = __webpack_require__(5005);
		var getOwnPropertyNamesModule = __webpack_require__(8006);
		var getOwnPropertySymbolsModule = __webpack_require__(5181);
		var anObject = __webpack_require__(9670);

		// all object keys, includes non-enumerable and symbols
		module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
		  var keys = getOwnPropertyNamesModule.f(anObject(it));
		  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
		  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
		};


		/***/ }),

		/***/ 857:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);

		module.exports = global;


		/***/ }),

		/***/ 2248:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var redefine = __webpack_require__(1320);

		module.exports = function (target, src, options) {
		  for (var key in src) redefine(target, key, src[key], options);
		  return target;
		};


		/***/ }),

		/***/ 1320:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var has = __webpack_require__(6656);
		var setGlobal = __webpack_require__(3505);
		var inspectSource = __webpack_require__(2788);
		var InternalStateModule = __webpack_require__(9909);

		var getInternalState = InternalStateModule.get;
		var enforceInternalState = InternalStateModule.enforce;
		var TEMPLATE = String(String).split('String');

		(module.exports = function (O, key, value, options) {
		  var unsafe = options ? !!options.unsafe : false;
		  var simple = options ? !!options.enumerable : false;
		  var noTargetGet = options ? !!options.noTargetGet : false;
		  var state;
		  if (typeof value == 'function') {
		    if (typeof key == 'string' && !has(value, 'name')) {
		      createNonEnumerableProperty(value, 'name', key);
		    }
		    state = enforceInternalState(value);
		    if (!state.source) {
		      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
		    }
		  }
		  if (O === global) {
		    if (simple) O[key] = value;
		    else setGlobal(key, value);
		    return;
		  } else if (!unsafe) {
		    delete O[key];
		  } else if (!noTargetGet && O[key]) {
		    simple = true;
		  }
		  if (simple) O[key] = value;
		  else createNonEnumerableProperty(O, key, value);
		// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
		})(Function.prototype, 'toString', function toString() {
		  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
		});


		/***/ }),

		/***/ 7651:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var classof = __webpack_require__(4326);
		var regexpExec = __webpack_require__(2261);

		// `RegExpExec` abstract operation
		// https://tc39.es/ecma262/#sec-regexpexec
		module.exports = function (R, S) {
		  var exec = R.exec;
		  if (typeof exec === 'function') {
		    var result = exec.call(R, S);
		    if (typeof result !== 'object') {
		      throw TypeError('RegExp exec method returned something other than an Object or null');
		    }
		    return result;
		  }

		  if (classof(R) !== 'RegExp') {
		    throw TypeError('RegExp#exec called on incompatible receiver');
		  }

		  return regexpExec.call(R, S);
		};



		/***/ }),

		/***/ 2261:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var regexpFlags = __webpack_require__(7066);
		var stickyHelpers = __webpack_require__(2999);

		var nativeExec = RegExp.prototype.exec;
		// This always refers to the native implementation, because the
		// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
		// which loads this file before patching the method.
		var nativeReplace = String.prototype.replace;

		var patchedExec = nativeExec;

		var UPDATES_LAST_INDEX_WRONG = (function () {
		  var re1 = /a/;
		  var re2 = /b*/g;
		  nativeExec.call(re1, 'a');
		  nativeExec.call(re2, 'a');
		  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
		})();

		var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

		// nonparticipating capturing group, copied from es5-shim's String#split patch.
		// eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
		var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

		var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

		if (PATCH) {
		  patchedExec = function exec(str) {
		    var re = this;
		    var lastIndex, reCopy, match, i;
		    var sticky = UNSUPPORTED_Y && re.sticky;
		    var flags = regexpFlags.call(re);
		    var source = re.source;
		    var charsAdded = 0;
		    var strCopy = str;

		    if (sticky) {
		      flags = flags.replace('y', '');
		      if (flags.indexOf('g') === -1) {
		        flags += 'g';
		      }

		      strCopy = String(str).slice(re.lastIndex);
		      // Support anchored sticky behavior.
		      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
		        source = '(?: ' + source + ')';
		        strCopy = ' ' + strCopy;
		        charsAdded++;
		      }
		      // ^(? + rx + ) is needed, in combination with some str slicing, to
		      // simulate the 'y' flag.
		      reCopy = new RegExp('^(?:' + source + ')', flags);
		    }

		    if (NPCG_INCLUDED) {
		      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
		    }
		    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

		    match = nativeExec.call(sticky ? reCopy : re, strCopy);

		    if (sticky) {
		      if (match) {
		        match.input = match.input.slice(charsAdded);
		        match[0] = match[0].slice(charsAdded);
		        match.index = re.lastIndex;
		        re.lastIndex += match[0].length;
		      } else re.lastIndex = 0;
		    } else if (UPDATES_LAST_INDEX_WRONG && match) {
		      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
		    }
		    if (NPCG_INCLUDED && match && match.length > 1) {
		      // Fix browsers whose `exec` methods don't consistently return `undefined`
		      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
		      nativeReplace.call(match[0], reCopy, function () {
		        for (i = 1; i < arguments.length - 2; i++) {
		          if (arguments[i] === undefined) match[i] = undefined;
		        }
		      });
		    }

		    return match;
		  };
		}

		module.exports = patchedExec;


		/***/ }),

		/***/ 7066:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);

		// `RegExp.prototype.flags` getter implementation
		// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
		module.exports = function () {
		  var that = anObject(this);
		  var result = '';
		  if (that.global) result += 'g';
		  if (that.ignoreCase) result += 'i';
		  if (that.multiline) result += 'm';
		  if (that.dotAll) result += 's';
		  if (that.unicode) result += 'u';
		  if (that.sticky) result += 'y';
		  return result;
		};


		/***/ }),

		/***/ 2999:
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


		var fails = __webpack_require__(7293);

		// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
		// so we use an intermediate function.
		function RE(s, f) {
		  return RegExp(s, f);
		}

		exports.UNSUPPORTED_Y = fails(function () {
		  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
		  var re = RE('a', 'y');
		  re.lastIndex = 2;
		  return re.exec('abcd') != null;
		});

		exports.BROKEN_CARET = fails(function () {
		  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
		  var re = RE('^r', 'gy');
		  re.lastIndex = 2;
		  return re.exec('str') != null;
		});


		/***/ }),

		/***/ 4488:
		/***/ (function(module) {

		// `RequireObjectCoercible` abstract operation
		// https://tc39.es/ecma262/#sec-requireobjectcoercible
		module.exports = function (it) {
		  if (it == undefined) throw TypeError("Can't call method on " + it);
		  return it;
		};


		/***/ }),

		/***/ 3505:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var createNonEnumerableProperty = __webpack_require__(8880);

		module.exports = function (key, value) {
		  try {
		    createNonEnumerableProperty(global, key, value);
		  } catch (error) {
		    global[key] = value;
		  } return value;
		};


		/***/ }),

		/***/ 6340:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var getBuiltIn = __webpack_require__(5005);
		var definePropertyModule = __webpack_require__(3070);
		var wellKnownSymbol = __webpack_require__(5112);
		var DESCRIPTORS = __webpack_require__(9781);

		var SPECIES = wellKnownSymbol('species');

		module.exports = function (CONSTRUCTOR_NAME) {
		  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
		  var defineProperty = definePropertyModule.f;

		  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
		    defineProperty(Constructor, SPECIES, {
		      configurable: true,
		      get: function () { return this; }
		    });
		  }
		};


		/***/ }),

		/***/ 8003:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var defineProperty = __webpack_require__(3070).f;
		var has = __webpack_require__(6656);
		var wellKnownSymbol = __webpack_require__(5112);

		var TO_STRING_TAG = wellKnownSymbol('toStringTag');

		module.exports = function (it, TAG, STATIC) {
		  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
		    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
		  }
		};


		/***/ }),

		/***/ 6200:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var shared = __webpack_require__(2309);
		var uid = __webpack_require__(9711);

		var keys = shared('keys');

		module.exports = function (key) {
		  return keys[key] || (keys[key] = uid(key));
		};


		/***/ }),

		/***/ 5465:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var setGlobal = __webpack_require__(3505);

		var SHARED = '__core-js_shared__';
		var store = global[SHARED] || setGlobal(SHARED, {});

		module.exports = store;


		/***/ }),

		/***/ 2309:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var IS_PURE = __webpack_require__(1913);
		var store = __webpack_require__(5465);

		(module.exports = function (key, value) {
		  return store[key] || (store[key] = value !== undefined ? value : {});
		})('versions', []).push({
		  version: '3.9.0',
		  mode: IS_PURE ? 'pure' : 'global',
		  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
		});


		/***/ }),

		/***/ 6707:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var anObject = __webpack_require__(9670);
		var aFunction = __webpack_require__(3099);
		var wellKnownSymbol = __webpack_require__(5112);

		var SPECIES = wellKnownSymbol('species');

		// `SpeciesConstructor` abstract operation
		// https://tc39.es/ecma262/#sec-speciesconstructor
		module.exports = function (O, defaultConstructor) {
		  var C = anObject(O).constructor;
		  var S;
		  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
		};


		/***/ }),

		/***/ 8710:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toInteger = __webpack_require__(9958);
		var requireObjectCoercible = __webpack_require__(4488);

		// `String.prototype.{ codePointAt, at }` methods implementation
		var createMethod = function (CONVERT_TO_STRING) {
		  return function ($this, pos) {
		    var S = String(requireObjectCoercible($this));
		    var position = toInteger(pos);
		    var size = S.length;
		    var first, second;
		    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
		    first = S.charCodeAt(position);
		    return first < 0xD800 || first > 0xDBFF || position + 1 === size
		      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
		        ? CONVERT_TO_STRING ? S.charAt(position) : first
		        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
		  };
		};

		module.exports = {
		  // `String.prototype.codePointAt` method
		  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
		  codeAt: createMethod(false),
		  // `String.prototype.at` method
		  // https://github.com/mathiasbynens/String.prototype.at
		  charAt: createMethod(true)
		};


		/***/ }),

		/***/ 3197:
		/***/ (function(module) {

		// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
		var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
		var base = 36;
		var tMin = 1;
		var tMax = 26;
		var skew = 38;
		var damp = 700;
		var initialBias = 72;
		var initialN = 128; // 0x80
		var delimiter = '-'; // '\x2D'
		var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
		var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
		var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
		var baseMinusTMin = base - tMin;
		var floor = Math.floor;
		var stringFromCharCode = String.fromCharCode;

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 */
		var ucs2decode = function (string) {
		  var output = [];
		  var counter = 0;
		  var length = string.length;
		  while (counter < length) {
		    var value = string.charCodeAt(counter++);
		    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
		      // It's a high surrogate, and there is a next character.
		      var extra = string.charCodeAt(counter++);
		      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
		        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
		      } else {
		        // It's an unmatched surrogate; only append this code unit, in case the
		        // next code unit is the high surrogate of a surrogate pair.
		        output.push(value);
		        counter--;
		      }
		    } else {
		      output.push(value);
		    }
		  }
		  return output;
		};

		/**
		 * Converts a digit/integer into a basic code point.
		 */
		var digitToBasic = function (digit) {
		  //  0..25 map to ASCII a..z or A..Z
		  // 26..35 map to ASCII 0..9
		  return digit + 22 + 75 * (digit < 26);
		};

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * https://tools.ietf.org/html/rfc3492#section-3.4
		 */
		var adapt = function (delta, numPoints, firstTime) {
		  var k = 0;
		  delta = firstTime ? floor(delta / damp) : delta >> 1;
		  delta += floor(delta / numPoints);
		  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
		    delta = floor(delta / baseMinusTMin);
		  }
		  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		};

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 */
		// eslint-disable-next-line max-statements -- TODO
		var encode = function (input) {
		  var output = [];

		  // Convert the input in UCS-2 to an array of Unicode code points.
		  input = ucs2decode(input);

		  // Cache the length.
		  var inputLength = input.length;

		  // Initialize the state.
		  var n = initialN;
		  var delta = 0;
		  var bias = initialBias;
		  var i, currentValue;

		  // Handle the basic code points.
		  for (i = 0; i < input.length; i++) {
		    currentValue = input[i];
		    if (currentValue < 0x80) {
		      output.push(stringFromCharCode(currentValue));
		    }
		  }

		  var basicLength = output.length; // number of basic code points.
		  var handledCPCount = basicLength; // number of code points that have been handled;

		  // Finish the basic string with a delimiter unless it's empty.
		  if (basicLength) {
		    output.push(delimiter);
		  }

		  // Main encoding loop:
		  while (handledCPCount < inputLength) {
		    // All non-basic code points < n have been handled already. Find the next larger one:
		    var m = maxInt;
		    for (i = 0; i < input.length; i++) {
		      currentValue = input[i];
		      if (currentValue >= n && currentValue < m) {
		        m = currentValue;
		      }
		    }

		    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
		    var handledCPCountPlusOne = handledCPCount + 1;
		    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
		      throw RangeError(OVERFLOW_ERROR);
		    }

		    delta += (m - n) * handledCPCountPlusOne;
		    n = m;

		    for (i = 0; i < input.length; i++) {
		      currentValue = input[i];
		      if (currentValue < n && ++delta > maxInt) {
		        throw RangeError(OVERFLOW_ERROR);
		      }
		      if (currentValue == n) {
		        // Represent delta as a generalized variable-length integer.
		        var q = delta;
		        for (var k = base; /* no condition */; k += base) {
		          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
		          if (q < t) break;
		          var qMinusT = q - t;
		          var baseMinusT = base - t;
		          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
		          q = floor(qMinusT / baseMinusT);
		        }

		        output.push(stringFromCharCode(digitToBasic(q)));
		        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
		        delta = 0;
		        ++handledCPCount;
		      }
		    }

		    ++delta;
		    ++n;
		  }
		  return output.join('');
		};

		module.exports = function (input) {
		  var encoded = [];
		  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
		  var i, label;
		  for (i = 0; i < labels.length; i++) {
		    label = labels[i];
		    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
		  }
		  return encoded.join('.');
		};


		/***/ }),

		/***/ 6091:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var fails = __webpack_require__(7293);
		var whitespaces = __webpack_require__(1361);

		var non = '\u200B\u0085\u180E';

		// check that a method works with the correct list
		// of whitespaces and has a correct name
		module.exports = function (METHOD_NAME) {
		  return fails(function () {
		    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
		  });
		};


		/***/ }),

		/***/ 3111:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var requireObjectCoercible = __webpack_require__(4488);
		var whitespaces = __webpack_require__(1361);

		var whitespace = '[' + whitespaces + ']';
		var ltrim = RegExp('^' + whitespace + whitespace + '*');
		var rtrim = RegExp(whitespace + whitespace + '*$');

		// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
		var createMethod = function (TYPE) {
		  return function ($this) {
		    var string = String(requireObjectCoercible($this));
		    if (TYPE & 1) string = string.replace(ltrim, '');
		    if (TYPE & 2) string = string.replace(rtrim, '');
		    return string;
		  };
		};

		module.exports = {
		  // `String.prototype.{ trimLeft, trimStart }` methods
		  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
		  start: createMethod(1),
		  // `String.prototype.{ trimRight, trimEnd }` methods
		  // https://tc39.es/ecma262/#sec-string.prototype.trimend
		  end: createMethod(2),
		  // `String.prototype.trim` method
		  // https://tc39.es/ecma262/#sec-string.prototype.trim
		  trim: createMethod(3)
		};


		/***/ }),

		/***/ 1400:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toInteger = __webpack_require__(9958);

		var max = Math.max;
		var min = Math.min;

		// Helper for a popular repeating case of the spec:
		// Let integer be ? ToInteger(index).
		// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
		module.exports = function (index, length) {
		  var integer = toInteger(index);
		  return integer < 0 ? max(integer + length, 0) : min(integer, length);
		};


		/***/ }),

		/***/ 7067:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toInteger = __webpack_require__(9958);
		var toLength = __webpack_require__(7466);

		// `ToIndex` abstract operation
		// https://tc39.es/ecma262/#sec-toindex
		module.exports = function (it) {
		  if (it === undefined) return 0;
		  var number = toInteger(it);
		  var length = toLength(number);
		  if (number !== length) throw RangeError('Wrong length or index');
		  return length;
		};


		/***/ }),

		/***/ 5656:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		// toObject with fallback for non-array-like ES3 strings
		var IndexedObject = __webpack_require__(8361);
		var requireObjectCoercible = __webpack_require__(4488);

		module.exports = function (it) {
		  return IndexedObject(requireObjectCoercible(it));
		};


		/***/ }),

		/***/ 9958:
		/***/ (function(module) {

		var ceil = Math.ceil;
		var floor = Math.floor;

		// `ToInteger` abstract operation
		// https://tc39.es/ecma262/#sec-tointeger
		module.exports = function (argument) {
		  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
		};


		/***/ }),

		/***/ 7466:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toInteger = __webpack_require__(9958);

		var min = Math.min;

		// `ToLength` abstract operation
		// https://tc39.es/ecma262/#sec-tolength
		module.exports = function (argument) {
		  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
		};


		/***/ }),

		/***/ 7908:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var requireObjectCoercible = __webpack_require__(4488);

		// `ToObject` abstract operation
		// https://tc39.es/ecma262/#sec-toobject
		module.exports = function (argument) {
		  return Object(requireObjectCoercible(argument));
		};


		/***/ }),

		/***/ 4590:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toPositiveInteger = __webpack_require__(3002);

		module.exports = function (it, BYTES) {
		  var offset = toPositiveInteger(it);
		  if (offset % BYTES) throw RangeError('Wrong offset');
		  return offset;
		};


		/***/ }),

		/***/ 3002:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toInteger = __webpack_require__(9958);

		module.exports = function (it) {
		  var result = toInteger(it);
		  if (result < 0) throw RangeError("The argument can't be less than 0");
		  return result;
		};


		/***/ }),

		/***/ 7593:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		// `ToPrimitive` abstract operation
		// https://tc39.es/ecma262/#sec-toprimitive
		// instead of the ES6 spec version, we didn't implement @@toPrimitive case
		// and the second argument - flag - preferred type is a string
		module.exports = function (input, PREFERRED_STRING) {
		  if (!isObject(input)) return input;
		  var fn, val;
		  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
		  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
		  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
		  throw TypeError("Can't convert object to primitive value");
		};


		/***/ }),

		/***/ 1694:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var wellKnownSymbol = __webpack_require__(5112);

		var TO_STRING_TAG = wellKnownSymbol('toStringTag');
		var test = {};

		test[TO_STRING_TAG] = 'z';

		module.exports = String(test) === '[object z]';


		/***/ }),

		/***/ 9843:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var global = __webpack_require__(7854);
		var DESCRIPTORS = __webpack_require__(9781);
		var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(3832);
		var ArrayBufferViewCore = __webpack_require__(260);
		var ArrayBufferModule = __webpack_require__(3331);
		var anInstance = __webpack_require__(5787);
		var createPropertyDescriptor = __webpack_require__(9114);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var toLength = __webpack_require__(7466);
		var toIndex = __webpack_require__(7067);
		var toOffset = __webpack_require__(4590);
		var toPrimitive = __webpack_require__(7593);
		var has = __webpack_require__(6656);
		var classof = __webpack_require__(648);
		var isObject = __webpack_require__(111);
		var create = __webpack_require__(30);
		var setPrototypeOf = __webpack_require__(7674);
		var getOwnPropertyNames = __webpack_require__(8006).f;
		var typedArrayFrom = __webpack_require__(7321);
		var forEach = __webpack_require__(2092).forEach;
		var setSpecies = __webpack_require__(6340);
		var definePropertyModule = __webpack_require__(3070);
		var getOwnPropertyDescriptorModule = __webpack_require__(1236);
		var InternalStateModule = __webpack_require__(9909);
		var inheritIfRequired = __webpack_require__(9587);

		var getInternalState = InternalStateModule.get;
		var setInternalState = InternalStateModule.set;
		var nativeDefineProperty = definePropertyModule.f;
		var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
		var round = Math.round;
		var RangeError = global.RangeError;
		var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
		var DataView = ArrayBufferModule.DataView;
		var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
		var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
		var TypedArray = ArrayBufferViewCore.TypedArray;
		var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
		var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
		var isTypedArray = ArrayBufferViewCore.isTypedArray;
		var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
		var WRONG_LENGTH = 'Wrong length';

		var fromList = function (C, list) {
		  var index = 0;
		  var length = list.length;
		  var result = new (aTypedArrayConstructor(C))(length);
		  while (length > index) result[index] = list[index++];
		  return result;
		};

		var addGetter = function (it, key) {
		  nativeDefineProperty(it, key, { get: function () {
		    return getInternalState(this)[key];
		  } });
		};

		var isArrayBuffer = function (it) {
		  var klass;
		  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
		};

		var isTypedArrayIndex = function (target, key) {
		  return isTypedArray(target)
		    && typeof key != 'symbol'
		    && key in target
		    && String(+key) == String(key);
		};

		var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
		  return isTypedArrayIndex(target, key = toPrimitive(key, true))
		    ? createPropertyDescriptor(2, target[key])
		    : nativeGetOwnPropertyDescriptor(target, key);
		};

		var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
		  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
		    && isObject(descriptor)
		    && has(descriptor, 'value')
		    && !has(descriptor, 'get')
		    && !has(descriptor, 'set')
		    // TODO: add validation descriptor w/o calling accessors
		    && !descriptor.configurable
		    && (!has(descriptor, 'writable') || descriptor.writable)
		    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
		  ) {
		    target[key] = descriptor.value;
		    return target;
		  } return nativeDefineProperty(target, key, descriptor);
		};

		if (DESCRIPTORS) {
		  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
		    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
		    definePropertyModule.f = wrappedDefineProperty;
		    addGetter(TypedArrayPrototype, 'buffer');
		    addGetter(TypedArrayPrototype, 'byteOffset');
		    addGetter(TypedArrayPrototype, 'byteLength');
		    addGetter(TypedArrayPrototype, 'length');
		  }

		  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
		    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
		    defineProperty: wrappedDefineProperty
		  });

		  module.exports = function (TYPE, wrapper, CLAMPED) {
		    var BYTES = TYPE.match(/\d+$/)[0] / 8;
		    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
		    var GETTER = 'get' + TYPE;
		    var SETTER = 'set' + TYPE;
		    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
		    var TypedArrayConstructor = NativeTypedArrayConstructor;
		    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
		    var exported = {};

		    var getter = function (that, index) {
		      var data = getInternalState(that);
		      return data.view[GETTER](index * BYTES + data.byteOffset, true);
		    };

		    var setter = function (that, index, value) {
		      var data = getInternalState(that);
		      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
		      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
		    };

		    var addElement = function (that, index) {
		      nativeDefineProperty(that, index, {
		        get: function () {
		          return getter(this, index);
		        },
		        set: function (value) {
		          return setter(this, index, value);
		        },
		        enumerable: true
		      });
		    };

		    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
		      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
		        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
		        var index = 0;
		        var byteOffset = 0;
		        var buffer, byteLength, length;
		        if (!isObject(data)) {
		          length = toIndex(data);
		          byteLength = length * BYTES;
		          buffer = new ArrayBuffer(byteLength);
		        } else if (isArrayBuffer(data)) {
		          buffer = data;
		          byteOffset = toOffset(offset, BYTES);
		          var $len = data.byteLength;
		          if ($length === undefined) {
		            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
		            byteLength = $len - byteOffset;
		            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
		          } else {
		            byteLength = toLength($length) * BYTES;
		            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
		          }
		          length = byteLength / BYTES;
		        } else if (isTypedArray(data)) {
		          return fromList(TypedArrayConstructor, data);
		        } else {
		          return typedArrayFrom.call(TypedArrayConstructor, data);
		        }
		        setInternalState(that, {
		          buffer: buffer,
		          byteOffset: byteOffset,
		          byteLength: byteLength,
		          length: length,
		          view: new DataView(buffer)
		        });
		        while (index < length) addElement(that, index++);
		      });

		      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
		      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
		    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
		      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
		        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
		        return inheritIfRequired(function () {
		          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
		          if (isArrayBuffer(data)) return $length !== undefined
		            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
		            : typedArrayOffset !== undefined
		              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
		              : new NativeTypedArrayConstructor(data);
		          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
		          return typedArrayFrom.call(TypedArrayConstructor, data);
		        }(), dummy, TypedArrayConstructor);
		      });

		      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
		      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
		        if (!(key in TypedArrayConstructor)) {
		          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
		        }
		      });
		      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
		    }

		    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
		      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
		    }

		    if (TYPED_ARRAY_TAG) {
		      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
		    }

		    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

		    $({
		      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
		    }, exported);

		    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
		      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
		    }

		    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
		      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
		    }

		    setSpecies(CONSTRUCTOR_NAME);
		  };
		} else module.exports = function () { /* empty */ };


		/***/ }),

		/***/ 3832:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		/* eslint-disable no-new -- required for testing */
		var global = __webpack_require__(7854);
		var fails = __webpack_require__(7293);
		var checkCorrectnessOfIteration = __webpack_require__(7072);
		var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__(260).NATIVE_ARRAY_BUFFER_VIEWS;

		var ArrayBuffer = global.ArrayBuffer;
		var Int8Array = global.Int8Array;

		module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
		  Int8Array(1);
		}) || !fails(function () {
		  new Int8Array(-1);
		}) || !checkCorrectnessOfIteration(function (iterable) {
		  new Int8Array();
		  new Int8Array(null);
		  new Int8Array(1.5);
		  new Int8Array(iterable);
		}, true) || fails(function () {
		  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
		  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
		});


		/***/ }),

		/***/ 3074:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var aTypedArrayConstructor = __webpack_require__(260).aTypedArrayConstructor;
		var speciesConstructor = __webpack_require__(6707);

		module.exports = function (instance, list) {
		  var C = speciesConstructor(instance, instance.constructor);
		  var index = 0;
		  var length = list.length;
		  var result = new (aTypedArrayConstructor(C))(length);
		  while (length > index) result[index] = list[index++];
		  return result;
		};


		/***/ }),

		/***/ 7321:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toObject = __webpack_require__(7908);
		var toLength = __webpack_require__(7466);
		var getIteratorMethod = __webpack_require__(1246);
		var isArrayIteratorMethod = __webpack_require__(7659);
		var bind = __webpack_require__(9974);
		var aTypedArrayConstructor = __webpack_require__(260).aTypedArrayConstructor;

		module.exports = function from(source /* , mapfn, thisArg */) {
		  var O = toObject(source);
		  var argumentsLength = arguments.length;
		  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
		  var mapping = mapfn !== undefined;
		  var iteratorMethod = getIteratorMethod(O);
		  var i, length, result, step, iterator, next;
		  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
		    iterator = iteratorMethod.call(O);
		    next = iterator.next;
		    O = [];
		    while (!(step = next.call(iterator)).done) {
		      O.push(step.value);
		    }
		  }
		  if (mapping && argumentsLength > 2) {
		    mapfn = bind(mapfn, arguments[2], 2);
		  }
		  length = toLength(O.length);
		  result = new (aTypedArrayConstructor(this))(length);
		  for (i = 0; length > i; i++) {
		    result[i] = mapping ? mapfn(O[i], i) : O[i];
		  }
		  return result;
		};


		/***/ }),

		/***/ 9711:
		/***/ (function(module) {

		var id = 0;
		var postfix = Math.random();

		module.exports = function (key) {
		  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
		};


		/***/ }),

		/***/ 3307:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var NATIVE_SYMBOL = __webpack_require__(133);

		module.exports = NATIVE_SYMBOL
		  /* global Symbol -- safe */
		  && !Symbol.sham
		  && typeof Symbol.iterator == 'symbol';


		/***/ }),

		/***/ 5112:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var shared = __webpack_require__(2309);
		var has = __webpack_require__(6656);
		var uid = __webpack_require__(9711);
		var NATIVE_SYMBOL = __webpack_require__(133);
		var USE_SYMBOL_AS_UID = __webpack_require__(3307);

		var WellKnownSymbolsStore = shared('wks');
		var Symbol = global.Symbol;
		var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

		module.exports = function (name) {
		  if (!has(WellKnownSymbolsStore, name)) {
		    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
		    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
		  } return WellKnownSymbolsStore[name];
		};


		/***/ }),

		/***/ 1361:
		/***/ (function(module) {

		// a string of all valid unicode whitespaces
		module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
		  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


		/***/ }),

		/***/ 8264:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var global = __webpack_require__(7854);
		var arrayBufferModule = __webpack_require__(3331);
		var setSpecies = __webpack_require__(6340);

		var ARRAY_BUFFER = 'ArrayBuffer';
		var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
		var NativeArrayBuffer = global[ARRAY_BUFFER];

		// `ArrayBuffer` constructor
		// https://tc39.es/ecma262/#sec-arraybuffer-constructor
		$({ global: true, forced: NativeArrayBuffer !== ArrayBuffer }, {
		  ArrayBuffer: ArrayBuffer
		});

		setSpecies(ARRAY_BUFFER);


		/***/ }),

		/***/ 2222:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var fails = __webpack_require__(7293);
		var isArray = __webpack_require__(3157);
		var isObject = __webpack_require__(111);
		var toObject = __webpack_require__(7908);
		var toLength = __webpack_require__(7466);
		var createProperty = __webpack_require__(6135);
		var arraySpeciesCreate = __webpack_require__(5417);
		var arrayMethodHasSpeciesSupport = __webpack_require__(1194);
		var wellKnownSymbol = __webpack_require__(5112);
		var V8_VERSION = __webpack_require__(7392);

		var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
		var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
		var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

		// We can't use this feature detection in V8 since it causes
		// deoptimization and serious performance degradation
		// https://github.com/zloirock/core-js/issues/679
		var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
		  var array = [];
		  array[IS_CONCAT_SPREADABLE] = false;
		  return array.concat()[0] !== array;
		});

		var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

		var isConcatSpreadable = function (O) {
		  if (!isObject(O)) return false;
		  var spreadable = O[IS_CONCAT_SPREADABLE];
		  return spreadable !== undefined ? !!spreadable : isArray(O);
		};

		var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

		// `Array.prototype.concat` method
		// https://tc39.es/ecma262/#sec-array.prototype.concat
		// with adding support of @@isConcatSpreadable and @@species
		$({ target: 'Array', proto: true, forced: FORCED }, {
		  // eslint-disable-next-line no-unused-vars -- required for `.length`
		  concat: function concat(arg) {
		    var O = toObject(this);
		    var A = arraySpeciesCreate(O, 0);
		    var n = 0;
		    var i, k, length, len, E;
		    for (i = -1, length = arguments.length; i < length; i++) {
		      E = i === -1 ? O : arguments[i];
		      if (isConcatSpreadable(E)) {
		        len = toLength(E.length);
		        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
		        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
		      } else {
		        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
		        createProperty(A, n++, E);
		      }
		    }
		    A.length = n;
		    return A;
		  }
		});


		/***/ }),

		/***/ 7327:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var $filter = __webpack_require__(2092).filter;
		var arrayMethodHasSpeciesSupport = __webpack_require__(1194);

		var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

		// `Array.prototype.filter` method
		// https://tc39.es/ecma262/#sec-array.prototype.filter
		// with adding support of @@species
		$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
		  filter: function filter(callbackfn /* , thisArg */) {
		    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		  }
		});


		/***/ }),

		/***/ 2772:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var $indexOf = __webpack_require__(1318).indexOf;
		var arrayMethodIsStrict = __webpack_require__(9341);

		var nativeIndexOf = [].indexOf;

		var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
		var STRICT_METHOD = arrayMethodIsStrict('indexOf');

		// `Array.prototype.indexOf` method
		// https://tc39.es/ecma262/#sec-array.prototype.indexof
		$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
		  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
		    return NEGATIVE_ZERO
		      // convert -0 to +0
		      ? nativeIndexOf.apply(this, arguments) || 0
		      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
		  }
		});


		/***/ }),

		/***/ 6992:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		var toIndexedObject = __webpack_require__(5656);
		var addToUnscopables = __webpack_require__(1223);
		var Iterators = __webpack_require__(7497);
		var InternalStateModule = __webpack_require__(9909);
		var defineIterator = __webpack_require__(654);

		var ARRAY_ITERATOR = 'Array Iterator';
		var setInternalState = InternalStateModule.set;
		var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

		// `Array.prototype.entries` method
		// https://tc39.es/ecma262/#sec-array.prototype.entries
		// `Array.prototype.keys` method
		// https://tc39.es/ecma262/#sec-array.prototype.keys
		// `Array.prototype.values` method
		// https://tc39.es/ecma262/#sec-array.prototype.values
		// `Array.prototype[@@iterator]` method
		// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
		// `CreateArrayIterator` internal method
		// https://tc39.es/ecma262/#sec-createarrayiterator
		module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
		  setInternalState(this, {
		    type: ARRAY_ITERATOR,
		    target: toIndexedObject(iterated), // target
		    index: 0,                          // next index
		    kind: kind                         // kind
		  });
		// `%ArrayIteratorPrototype%.next` method
		// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
		}, function () {
		  var state = getInternalState(this);
		  var target = state.target;
		  var kind = state.kind;
		  var index = state.index++;
		  if (!target || index >= target.length) {
		    state.target = undefined;
		    return { value: undefined, done: true };
		  }
		  if (kind == 'keys') return { value: index, done: false };
		  if (kind == 'values') return { value: target[index], done: false };
		  return { value: [index, target[index]], done: false };
		}, 'values');

		// argumentsList[@@iterator] is %ArrayProto_values%
		// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
		// https://tc39.es/ecma262/#sec-createmappedargumentsobject
		Iterators.Arguments = Iterators.Array;

		// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
		addToUnscopables('keys');
		addToUnscopables('values');
		addToUnscopables('entries');


		/***/ }),

		/***/ 1249:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var $map = __webpack_require__(2092).map;
		var arrayMethodHasSpeciesSupport = __webpack_require__(1194);

		var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

		// `Array.prototype.map` method
		// https://tc39.es/ecma262/#sec-array.prototype.map
		// with adding support of @@species
		$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
		  map: function map(callbackfn /* , thisArg */) {
		    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		  }
		});


		/***/ }),

		/***/ 7042:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var isObject = __webpack_require__(111);
		var isArray = __webpack_require__(3157);
		var toAbsoluteIndex = __webpack_require__(1400);
		var toLength = __webpack_require__(7466);
		var toIndexedObject = __webpack_require__(5656);
		var createProperty = __webpack_require__(6135);
		var wellKnownSymbol = __webpack_require__(5112);
		var arrayMethodHasSpeciesSupport = __webpack_require__(1194);

		var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

		var SPECIES = wellKnownSymbol('species');
		var nativeSlice = [].slice;
		var max = Math.max;

		// `Array.prototype.slice` method
		// https://tc39.es/ecma262/#sec-array.prototype.slice
		// fallback for not array-like ES3 strings and DOM objects
		$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
		  slice: function slice(start, end) {
		    var O = toIndexedObject(this);
		    var length = toLength(O.length);
		    var k = toAbsoluteIndex(start, length);
		    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
		    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
		    var Constructor, result, n;
		    if (isArray(O)) {
		      Constructor = O.constructor;
		      // cross-realm fallback
		      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
		        Constructor = undefined;
		      } else if (isObject(Constructor)) {
		        Constructor = Constructor[SPECIES];
		        if (Constructor === null) Constructor = undefined;
		      }
		      if (Constructor === Array || Constructor === undefined) {
		        return nativeSlice.call(O, k, fin);
		      }
		    }
		    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
		    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
		    result.length = n;
		    return result;
		  }
		});


		/***/ }),

		/***/ 561:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var toAbsoluteIndex = __webpack_require__(1400);
		var toInteger = __webpack_require__(9958);
		var toLength = __webpack_require__(7466);
		var toObject = __webpack_require__(7908);
		var arraySpeciesCreate = __webpack_require__(5417);
		var createProperty = __webpack_require__(6135);
		var arrayMethodHasSpeciesSupport = __webpack_require__(1194);

		var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

		var max = Math.max;
		var min = Math.min;
		var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
		var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

		// `Array.prototype.splice` method
		// https://tc39.es/ecma262/#sec-array.prototype.splice
		// with adding support of @@species
		$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
		  splice: function splice(start, deleteCount /* , ...items */) {
		    var O = toObject(this);
		    var len = toLength(O.length);
		    var actualStart = toAbsoluteIndex(start, len);
		    var argumentsLength = arguments.length;
		    var insertCount, actualDeleteCount, A, k, from, to;
		    if (argumentsLength === 0) {
		      insertCount = actualDeleteCount = 0;
		    } else if (argumentsLength === 1) {
		      insertCount = 0;
		      actualDeleteCount = len - actualStart;
		    } else {
		      insertCount = argumentsLength - 2;
		      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
		    }
		    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
		      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
		    }
		    A = arraySpeciesCreate(O, actualDeleteCount);
		    for (k = 0; k < actualDeleteCount; k++) {
		      from = actualStart + k;
		      if (from in O) createProperty(A, k, O[from]);
		    }
		    A.length = actualDeleteCount;
		    if (insertCount < actualDeleteCount) {
		      for (k = actualStart; k < len - actualDeleteCount; k++) {
		        from = k + actualDeleteCount;
		        to = k + insertCount;
		        if (from in O) O[to] = O[from];
		        else delete O[to];
		      }
		      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
		    } else if (insertCount > actualDeleteCount) {
		      for (k = len - actualDeleteCount; k > actualStart; k--) {
		        from = k + actualDeleteCount - 1;
		        to = k + insertCount - 1;
		        if (from in O) O[to] = O[from];
		        else delete O[to];
		      }
		    }
		    for (k = 0; k < insertCount; k++) {
		      O[k + actualStart] = arguments[k + 2];
		    }
		    O.length = len - actualDeleteCount + insertCount;
		    return A;
		  }
		});


		/***/ }),

		/***/ 8309:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var DESCRIPTORS = __webpack_require__(9781);
		var defineProperty = __webpack_require__(3070).f;

		var FunctionPrototype = Function.prototype;
		var FunctionPrototypeToString = FunctionPrototype.toString;
		var nameRE = /^\s*function ([^ (]*)/;
		var NAME = 'name';

		// Function instances `.name` property
		// https://tc39.es/ecma262/#sec-function-instances-name
		if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
		  defineProperty(FunctionPrototype, NAME, {
		    configurable: true,
		    get: function () {
		      try {
		        return FunctionPrototypeToString.call(this).match(nameRE)[1];
		      } catch (error) {
		        return '';
		      }
		    }
		  });
		}


		/***/ }),

		/***/ 489:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var fails = __webpack_require__(7293);
		var toObject = __webpack_require__(7908);
		var nativeGetPrototypeOf = __webpack_require__(9518);
		var CORRECT_PROTOTYPE_GETTER = __webpack_require__(8544);

		var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

		// `Object.getPrototypeOf` method
		// https://tc39.es/ecma262/#sec-object.getprototypeof
		$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
		  getPrototypeOf: function getPrototypeOf(it) {
		    return nativeGetPrototypeOf(toObject(it));
		  }
		});



		/***/ }),

		/***/ 1539:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var TO_STRING_TAG_SUPPORT = __webpack_require__(1694);
		var redefine = __webpack_require__(1320);
		var toString = __webpack_require__(288);

		// `Object.prototype.toString` method
		// https://tc39.es/ecma262/#sec-object.prototype.tostring
		if (!TO_STRING_TAG_SUPPORT) {
		  redefine(Object.prototype, 'toString', toString, { unsafe: true });
		}


		/***/ }),

		/***/ 4916:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var exec = __webpack_require__(2261);

		// `RegExp.prototype.exec` method
		// https://tc39.es/ecma262/#sec-regexp.prototype.exec
		$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
		  exec: exec
		});


		/***/ }),

		/***/ 9714:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var redefine = __webpack_require__(1320);
		var anObject = __webpack_require__(9670);
		var fails = __webpack_require__(7293);
		var flags = __webpack_require__(7066);

		var TO_STRING = 'toString';
		var RegExpPrototype = RegExp.prototype;
		var nativeToString = RegExpPrototype[TO_STRING];

		var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
		// FF44- RegExp#toString has a wrong name
		var INCORRECT_NAME = nativeToString.name != TO_STRING;

		// `RegExp.prototype.toString` method
		// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
		if (NOT_GENERIC || INCORRECT_NAME) {
		  redefine(RegExp.prototype, TO_STRING, function toString() {
		    var R = anObject(this);
		    var p = String(R.source);
		    var rf = R.flags;
		    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
		    return '/' + p + '/' + f;
		  }, { unsafe: true });
		}


		/***/ }),

		/***/ 8783:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var charAt = __webpack_require__(8710).charAt;
		var InternalStateModule = __webpack_require__(9909);
		var defineIterator = __webpack_require__(654);

		var STRING_ITERATOR = 'String Iterator';
		var setInternalState = InternalStateModule.set;
		var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

		// `String.prototype[@@iterator]` method
		// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
		defineIterator(String, 'String', function (iterated) {
		  setInternalState(this, {
		    type: STRING_ITERATOR,
		    string: String(iterated),
		    index: 0
		  });
		// `%StringIteratorPrototype%.next` method
		// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
		}, function next() {
		  var state = getInternalState(this);
		  var string = state.string;
		  var index = state.index;
		  var point;
		  if (index >= string.length) return { value: undefined, done: true };
		  point = charAt(string, index);
		  state.index += point.length;
		  return { value: point, done: false };
		});


		/***/ }),

		/***/ 4723:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var fixRegExpWellKnownSymbolLogic = __webpack_require__(7007);
		var anObject = __webpack_require__(9670);
		var toLength = __webpack_require__(7466);
		var requireObjectCoercible = __webpack_require__(4488);
		var advanceStringIndex = __webpack_require__(1530);
		var regExpExec = __webpack_require__(7651);

		// @@match logic
		fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
		  return [
		    // `String.prototype.match` method
		    // https://tc39.es/ecma262/#sec-string.prototype.match
		    function match(regexp) {
		      var O = requireObjectCoercible(this);
		      var matcher = regexp == undefined ? undefined : regexp[MATCH];
		      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
		    },
		    // `RegExp.prototype[@@match]` method
		    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
		    function (regexp) {
		      var res = maybeCallNative(nativeMatch, regexp, this);
		      if (res.done) return res.value;

		      var rx = anObject(regexp);
		      var S = String(this);

		      if (!rx.global) return regExpExec(rx, S);

		      var fullUnicode = rx.unicode;
		      rx.lastIndex = 0;
		      var A = [];
		      var n = 0;
		      var result;
		      while ((result = regExpExec(rx, S)) !== null) {
		        var matchStr = String(result[0]);
		        A[n] = matchStr;
		        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
		        n++;
		      }
		      return n === 0 ? null : A;
		    }
		  ];
		});


		/***/ }),

		/***/ 5306:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var fixRegExpWellKnownSymbolLogic = __webpack_require__(7007);
		var anObject = __webpack_require__(9670);
		var toLength = __webpack_require__(7466);
		var toInteger = __webpack_require__(9958);
		var requireObjectCoercible = __webpack_require__(4488);
		var advanceStringIndex = __webpack_require__(1530);
		var getSubstitution = __webpack_require__(647);
		var regExpExec = __webpack_require__(7651);

		var max = Math.max;
		var min = Math.min;

		var maybeToString = function (it) {
		  return it === undefined ? it : String(it);
		};

		// @@replace logic
		fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
		  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
		  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
		  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

		  return [
		    // `String.prototype.replace` method
		    // https://tc39.es/ecma262/#sec-string.prototype.replace
		    function replace(searchValue, replaceValue) {
		      var O = requireObjectCoercible(this);
		      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
		      return replacer !== undefined
		        ? replacer.call(searchValue, O, replaceValue)
		        : nativeReplace.call(String(O), searchValue, replaceValue);
		    },
		    // `RegExp.prototype[@@replace]` method
		    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
		    function (regexp, replaceValue) {
		      if (
		        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
		        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
		      ) {
		        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
		        if (res.done) return res.value;
		      }

		      var rx = anObject(regexp);
		      var S = String(this);

		      var functionalReplace = typeof replaceValue === 'function';
		      if (!functionalReplace) replaceValue = String(replaceValue);

		      var global = rx.global;
		      if (global) {
		        var fullUnicode = rx.unicode;
		        rx.lastIndex = 0;
		      }
		      var results = [];
		      while (true) {
		        var result = regExpExec(rx, S);
		        if (result === null) break;

		        results.push(result);
		        if (!global) break;

		        var matchStr = String(result[0]);
		        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
		      }

		      var accumulatedResult = '';
		      var nextSourcePosition = 0;
		      for (var i = 0; i < results.length; i++) {
		        result = results[i];

		        var matched = String(result[0]);
		        var position = max(min(toInteger(result.index), S.length), 0);
		        var captures = [];
		        // NOTE: This is equivalent to
		        //   captures = result.slice(1).map(maybeToString)
		        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
		        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
		        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
		        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
		        var namedCaptures = result.groups;
		        if (functionalReplace) {
		          var replacerArgs = [matched].concat(captures, position, S);
		          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
		          var replacement = String(replaceValue.apply(undefined, replacerArgs));
		        } else {
		          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
		        }
		        if (position >= nextSourcePosition) {
		          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
		          nextSourcePosition = position + matched.length;
		        }
		      }
		      return accumulatedResult + S.slice(nextSourcePosition);
		    }
		  ];
		});


		/***/ }),

		/***/ 3123:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var fixRegExpWellKnownSymbolLogic = __webpack_require__(7007);
		var isRegExp = __webpack_require__(7850);
		var anObject = __webpack_require__(9670);
		var requireObjectCoercible = __webpack_require__(4488);
		var speciesConstructor = __webpack_require__(6707);
		var advanceStringIndex = __webpack_require__(1530);
		var toLength = __webpack_require__(7466);
		var callRegExpExec = __webpack_require__(7651);
		var regexpExec = __webpack_require__(2261);
		var fails = __webpack_require__(7293);

		var arrayPush = [].push;
		var min = Math.min;
		var MAX_UINT32 = 0xFFFFFFFF;

		// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
		var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

		// @@split logic
		fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
		  var internalSplit;
		  if (
		    'abbc'.split(/(b)*/)[1] == 'c' ||
		    // eslint-disable-next-line regexp/no-empty-group -- required for testing
		    'test'.split(/(?:)/, -1).length != 4 ||
		    'ab'.split(/(?:ab)*/).length != 2 ||
		    '.'.split(/(.?)(.?)/).length != 4 ||
		    // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
		    '.'.split(/()()/).length > 1 ||
		    ''.split(/.?/).length
		  ) {
		    // based on es5-shim implementation, need to rework it
		    internalSplit = function (separator, limit) {
		      var string = String(requireObjectCoercible(this));
		      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
		      if (lim === 0) return [];
		      if (separator === undefined) return [string];
		      // If `separator` is not a regex, use native split
		      if (!isRegExp(separator)) {
		        return nativeSplit.call(string, separator, lim);
		      }
		      var output = [];
		      var flags = (separator.ignoreCase ? 'i' : '') +
		                  (separator.multiline ? 'm' : '') +
		                  (separator.unicode ? 'u' : '') +
		                  (separator.sticky ? 'y' : '');
		      var lastLastIndex = 0;
		      // Make `global` and avoid `lastIndex` issues by working with a copy
		      var separatorCopy = new RegExp(separator.source, flags + 'g');
		      var match, lastIndex, lastLength;
		      while (match = regexpExec.call(separatorCopy, string)) {
		        lastIndex = separatorCopy.lastIndex;
		        if (lastIndex > lastLastIndex) {
		          output.push(string.slice(lastLastIndex, match.index));
		          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
		          lastLength = match[0].length;
		          lastLastIndex = lastIndex;
		          if (output.length >= lim) break;
		        }
		        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
		      }
		      if (lastLastIndex === string.length) {
		        if (lastLength || !separatorCopy.test('')) output.push('');
		      } else output.push(string.slice(lastLastIndex));
		      return output.length > lim ? output.slice(0, lim) : output;
		    };
		  // Chakra, V8
		  } else if ('0'.split(undefined, 0).length) {
		    internalSplit = function (separator, limit) {
		      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
		    };
		  } else internalSplit = nativeSplit;

		  return [
		    // `String.prototype.split` method
		    // https://tc39.es/ecma262/#sec-string.prototype.split
		    function split(separator, limit) {
		      var O = requireObjectCoercible(this);
		      var splitter = separator == undefined ? undefined : separator[SPLIT];
		      return splitter !== undefined
		        ? splitter.call(separator, O, limit)
		        : internalSplit.call(String(O), separator, limit);
		    },
		    // `RegExp.prototype[@@split]` method
		    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
		    //
		    // NOTE: This cannot be properly polyfilled in engines that don't support
		    // the 'y' flag.
		    function (regexp, limit) {
		      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
		      if (res.done) return res.value;

		      var rx = anObject(regexp);
		      var S = String(this);
		      var C = speciesConstructor(rx, RegExp);

		      var unicodeMatching = rx.unicode;
		      var flags = (rx.ignoreCase ? 'i' : '') +
		                  (rx.multiline ? 'm' : '') +
		                  (rx.unicode ? 'u' : '') +
		                  (SUPPORTS_Y ? 'y' : 'g');

		      // ^(? + rx + ) is needed, in combination with some S slicing, to
		      // simulate the 'y' flag.
		      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
		      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
		      if (lim === 0) return [];
		      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
		      var p = 0;
		      var q = 0;
		      var A = [];
		      while (q < S.length) {
		        splitter.lastIndex = SUPPORTS_Y ? q : 0;
		        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
		        var e;
		        if (
		          z === null ||
		          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
		        ) {
		          q = advanceStringIndex(S, q, unicodeMatching);
		        } else {
		          A.push(S.slice(p, q));
		          if (A.length === lim) return A;
		          for (var i = 1; i <= z.length - 1; i++) {
		            A.push(z[i]);
		            if (A.length === lim) return A;
		          }
		          q = p = e;
		        }
		      }
		      A.push(S.slice(p));
		      return A;
		    }
		  ];
		}, !SUPPORTS_Y);


		/***/ }),

		/***/ 3210:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var $ = __webpack_require__(2109);
		var $trim = __webpack_require__(3111).trim;
		var forcedStringTrimMethod = __webpack_require__(6091);

		// `String.prototype.trim` method
		// https://tc39.es/ecma262/#sec-string.prototype.trim
		$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
		  trim: function trim() {
		    return $trim(this);
		  }
		});


		/***/ }),

		/***/ 2990:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $copyWithin = __webpack_require__(1048);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.copyWithin` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
		exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
		  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
		});


		/***/ }),

		/***/ 8927:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $every = __webpack_require__(2092).every;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.every` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
		exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
		  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 3105:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $fill = __webpack_require__(1285);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.fill` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
		// eslint-disable-next-line no-unused-vars -- required for `.length`
		exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
		  return $fill.apply(aTypedArray(this), arguments);
		});


		/***/ }),

		/***/ 5035:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $filter = __webpack_require__(2092).filter;
		var fromSpeciesAndList = __webpack_require__(3074);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.filter` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
		exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
		  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		  return fromSpeciesAndList(this, list);
		});


		/***/ }),

		/***/ 7174:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $findIndex = __webpack_require__(2092).findIndex;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.findIndex` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
		exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
		  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 4345:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $find = __webpack_require__(2092).find;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.find` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
		exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
		  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 2846:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $forEach = __webpack_require__(2092).forEach;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.forEach` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
		exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
		  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 4731:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $includes = __webpack_require__(1318).includes;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.includes` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
		exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
		  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 7209:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $indexOf = __webpack_require__(1318).indexOf;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.indexOf` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
		exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
		  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 6319:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var ArrayBufferViewCore = __webpack_require__(260);
		var ArrayIterators = __webpack_require__(6992);
		var wellKnownSymbol = __webpack_require__(5112);

		var ITERATOR = wellKnownSymbol('iterator');
		var Uint8Array = global.Uint8Array;
		var arrayValues = ArrayIterators.values;
		var arrayKeys = ArrayIterators.keys;
		var arrayEntries = ArrayIterators.entries;
		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

		var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
		  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

		var typedArrayValues = function values() {
		  return arrayValues.call(aTypedArray(this));
		};

		// `%TypedArray%.prototype.entries` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
		exportTypedArrayMethod('entries', function entries() {
		  return arrayEntries.call(aTypedArray(this));
		});
		// `%TypedArray%.prototype.keys` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
		exportTypedArrayMethod('keys', function keys() {
		  return arrayKeys.call(aTypedArray(this));
		});
		// `%TypedArray%.prototype.values` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
		exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
		// `%TypedArray%.prototype[@@iterator]` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
		exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);


		/***/ }),

		/***/ 8867:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var $join = [].join;

		// `%TypedArray%.prototype.join` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
		// eslint-disable-next-line no-unused-vars -- required for `.length`
		exportTypedArrayMethod('join', function join(separator) {
		  return $join.apply(aTypedArray(this), arguments);
		});


		/***/ }),

		/***/ 7789:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $lastIndexOf = __webpack_require__(6583);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.lastIndexOf` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
		// eslint-disable-next-line no-unused-vars -- required for `.length`
		exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
		  return $lastIndexOf.apply(aTypedArray(this), arguments);
		});


		/***/ }),

		/***/ 3739:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $map = __webpack_require__(2092).map;
		var speciesConstructor = __webpack_require__(6707);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.map` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
		exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
		  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
		    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
		  });
		});


		/***/ }),

		/***/ 4483:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $reduceRight = __webpack_require__(3671).right;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.reduceRicht` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
		exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
		  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 9368:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $reduce = __webpack_require__(3671).left;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.reduce` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
		exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
		  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 2056:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var floor = Math.floor;

		// `%TypedArray%.prototype.reverse` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
		exportTypedArrayMethod('reverse', function reverse() {
		  var that = this;
		  var length = aTypedArray(that).length;
		  var middle = floor(length / 2);
		  var index = 0;
		  var value;
		  while (index < middle) {
		    value = that[index];
		    that[index++] = that[--length];
		    that[length] = value;
		  } return that;
		});


		/***/ }),

		/***/ 3462:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var toLength = __webpack_require__(7466);
		var toOffset = __webpack_require__(4590);
		var toObject = __webpack_require__(7908);
		var fails = __webpack_require__(7293);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		var FORCED = fails(function () {
		  /* global Int8Array -- safe */
		  new Int8Array(1).set({});
		});

		// `%TypedArray%.prototype.set` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
		exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
		  aTypedArray(this);
		  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
		  var length = this.length;
		  var src = toObject(arrayLike);
		  var len = toLength(src.length);
		  var index = 0;
		  if (len + offset > length) throw RangeError('Wrong length');
		  while (index < len) this[offset + index] = src[index++];
		}, FORCED);


		/***/ }),

		/***/ 678:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var speciesConstructor = __webpack_require__(6707);
		var fails = __webpack_require__(7293);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var $slice = [].slice;

		var FORCED = fails(function () {
		  /* global Int8Array -- safe */
		  new Int8Array(1).slice();
		});

		// `%TypedArray%.prototype.slice` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
		exportTypedArrayMethod('slice', function slice(start, end) {
		  var list = $slice.call(aTypedArray(this), start, end);
		  var C = speciesConstructor(this, this.constructor);
		  var index = 0;
		  var length = list.length;
		  var result = new (aTypedArrayConstructor(C))(length);
		  while (length > index) result[index] = list[index++];
		  return result;
		}, FORCED);


		/***/ }),

		/***/ 7462:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var $some = __webpack_require__(2092).some;

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.some` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
		exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
		  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		});


		/***/ }),

		/***/ 3824:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var $sort = [].sort;

		// `%TypedArray%.prototype.sort` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
		exportTypedArrayMethod('sort', function sort(comparefn) {
		  return $sort.call(aTypedArray(this), comparefn);
		});


		/***/ }),

		/***/ 5021:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var ArrayBufferViewCore = __webpack_require__(260);
		var toLength = __webpack_require__(7466);
		var toAbsoluteIndex = __webpack_require__(1400);
		var speciesConstructor = __webpack_require__(6707);

		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

		// `%TypedArray%.prototype.subarray` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
		exportTypedArrayMethod('subarray', function subarray(begin, end) {
		  var O = aTypedArray(this);
		  var length = O.length;
		  var beginIndex = toAbsoluteIndex(begin, length);
		  return new (speciesConstructor(O, O.constructor))(
		    O.buffer,
		    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
		    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
		  );
		});


		/***/ }),

		/***/ 2974:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var ArrayBufferViewCore = __webpack_require__(260);
		var fails = __webpack_require__(7293);

		var Int8Array = global.Int8Array;
		var aTypedArray = ArrayBufferViewCore.aTypedArray;
		var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
		var $toLocaleString = [].toLocaleString;
		var $slice = [].slice;

		// iOS Safari 6.x fails here
		var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
		  $toLocaleString.call(new Int8Array(1));
		});

		var FORCED = fails(function () {
		  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
		}) || !fails(function () {
		  Int8Array.prototype.toLocaleString.call([1, 2]);
		});

		// `%TypedArray%.prototype.toLocaleString` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
		exportTypedArrayMethod('toLocaleString', function toLocaleString() {
		  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
		}, FORCED);


		/***/ }),

		/***/ 5016:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var exportTypedArrayMethod = __webpack_require__(260).exportTypedArrayMethod;
		var fails = __webpack_require__(7293);
		var global = __webpack_require__(7854);

		var Uint8Array = global.Uint8Array;
		var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
		var arrayToString = [].toString;
		var arrayJoin = [].join;

		if (fails(function () { arrayToString.call({}); })) {
		  arrayToString = function toString() {
		    return arrayJoin.call(this);
		  };
		}

		var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

		// `%TypedArray%.prototype.toString` method
		// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
		exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);


		/***/ }),

		/***/ 2472:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var createTypedArrayConstructor = __webpack_require__(9843);

		// `Uint8Array` constructor
		// https://tc39.es/ecma262/#sec-typedarray-objects
		createTypedArrayConstructor('Uint8', function (init) {
		  return function Uint8Array(data, byteOffset, length) {
		    return init(this, data, byteOffset, length);
		  };
		});


		/***/ }),

		/***/ 4747:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var DOMIterables = __webpack_require__(8324);
		var forEach = __webpack_require__(8533);
		var createNonEnumerableProperty = __webpack_require__(8880);

		for (var COLLECTION_NAME in DOMIterables) {
		  var Collection = global[COLLECTION_NAME];
		  var CollectionPrototype = Collection && Collection.prototype;
		  // some Chrome versions have non-configurable methods on DOMTokenList
		  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
		    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
		  } catch (error) {
		    CollectionPrototype.forEach = forEach;
		  }
		}


		/***/ }),

		/***/ 3948:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		var global = __webpack_require__(7854);
		var DOMIterables = __webpack_require__(8324);
		var ArrayIteratorMethods = __webpack_require__(6992);
		var createNonEnumerableProperty = __webpack_require__(8880);
		var wellKnownSymbol = __webpack_require__(5112);

		var ITERATOR = wellKnownSymbol('iterator');
		var TO_STRING_TAG = wellKnownSymbol('toStringTag');
		var ArrayValues = ArrayIteratorMethods.values;

		for (var COLLECTION_NAME in DOMIterables) {
		  var Collection = global[COLLECTION_NAME];
		  var CollectionPrototype = Collection && Collection.prototype;
		  if (CollectionPrototype) {
		    // some Chrome versions have non-configurable methods on DOMTokenList
		    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
		      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
		    } catch (error) {
		      CollectionPrototype[ITERATOR] = ArrayValues;
		    }
		    if (!CollectionPrototype[TO_STRING_TAG]) {
		      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
		    }
		    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
		      // some Chrome versions have non-configurable methods on DOMTokenList
		      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
		        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
		      } catch (error) {
		        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
		      }
		    }
		  }
		}


		/***/ }),

		/***/ 1637:
		/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

		// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
		__webpack_require__(6992);
		var $ = __webpack_require__(2109);
		var getBuiltIn = __webpack_require__(5005);
		var USE_NATIVE_URL = __webpack_require__(590);
		var redefine = __webpack_require__(1320);
		var redefineAll = __webpack_require__(2248);
		var setToStringTag = __webpack_require__(8003);
		var createIteratorConstructor = __webpack_require__(4994);
		var InternalStateModule = __webpack_require__(9909);
		var anInstance = __webpack_require__(5787);
		var hasOwn = __webpack_require__(6656);
		var bind = __webpack_require__(9974);
		var classof = __webpack_require__(648);
		var anObject = __webpack_require__(9670);
		var isObject = __webpack_require__(111);
		var create = __webpack_require__(30);
		var createPropertyDescriptor = __webpack_require__(9114);
		var getIterator = __webpack_require__(8554);
		var getIteratorMethod = __webpack_require__(1246);
		var wellKnownSymbol = __webpack_require__(5112);

		var $fetch = getBuiltIn('fetch');
		var Headers = getBuiltIn('Headers');
		var ITERATOR = wellKnownSymbol('iterator');
		var URL_SEARCH_PARAMS = 'URLSearchParams';
		var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
		var setInternalState = InternalStateModule.set;
		var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
		var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

		var plus = /\+/g;
		var sequences = Array(4);

		var percentSequence = function (bytes) {
		  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
		};

		var percentDecode = function (sequence) {
		  try {
		    return decodeURIComponent(sequence);
		  } catch (error) {
		    return sequence;
		  }
		};

		var deserialize = function (it) {
		  var result = it.replace(plus, ' ');
		  var bytes = 4;
		  try {
		    return decodeURIComponent(result);
		  } catch (error) {
		    while (bytes) {
		      result = result.replace(percentSequence(bytes--), percentDecode);
		    }
		    return result;
		  }
		};

		var find = /[!'()~]|%20/g;

		var replace = {
		  '!': '%21',
		  "'": '%27',
		  '(': '%28',
		  ')': '%29',
		  '~': '%7E',
		  '%20': '+'
		};

		var replacer = function (match) {
		  return replace[match];
		};

		var serialize = function (it) {
		  return encodeURIComponent(it).replace(find, replacer);
		};

		var parseSearchParams = function (result, query) {
		  if (query) {
		    var attributes = query.split('&');
		    var index = 0;
		    var attribute, entry;
		    while (index < attributes.length) {
		      attribute = attributes[index++];
		      if (attribute.length) {
		        entry = attribute.split('=');
		        result.push({
		          key: deserialize(entry.shift()),
		          value: deserialize(entry.join('='))
		        });
		      }
		    }
		  }
		};

		var updateSearchParams = function (query) {
		  this.entries.length = 0;
		  parseSearchParams(this.entries, query);
		};

		var validateArgumentsLength = function (passed, required) {
		  if (passed < required) throw TypeError('Not enough arguments');
		};

		var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
		  setInternalState(this, {
		    type: URL_SEARCH_PARAMS_ITERATOR,
		    iterator: getIterator(getInternalParamsState(params).entries),
		    kind: kind
		  });
		}, 'Iterator', function next() {
		  var state = getInternalIteratorState(this);
		  var kind = state.kind;
		  var step = state.iterator.next();
		  var entry = step.value;
		  if (!step.done) {
		    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
		  } return step;
		});

		// `URLSearchParams` constructor
		// https://url.spec.whatwg.org/#interface-urlsearchparams
		var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
		  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
		  var init = arguments.length > 0 ? arguments[0] : undefined;
		  var that = this;
		  var entries = [];
		  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

		  setInternalState(that, {
		    type: URL_SEARCH_PARAMS,
		    entries: entries,
		    updateURL: function () { /* empty */ },
		    updateSearchParams: updateSearchParams
		  });

		  if (init !== undefined) {
		    if (isObject(init)) {
		      iteratorMethod = getIteratorMethod(init);
		      if (typeof iteratorMethod === 'function') {
		        iterator = iteratorMethod.call(init);
		        next = iterator.next;
		        while (!(step = next.call(iterator)).done) {
		          entryIterator = getIterator(anObject(step.value));
		          entryNext = entryIterator.next;
		          if (
		            (first = entryNext.call(entryIterator)).done ||
		            (second = entryNext.call(entryIterator)).done ||
		            !entryNext.call(entryIterator).done
		          ) throw TypeError('Expected sequence with length 2');
		          entries.push({ key: first.value + '', value: second.value + '' });
		        }
		      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
		    } else {
		      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
		    }
		  }
		};

		var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

		redefineAll(URLSearchParamsPrototype, {
		  // `URLSearchParams.prototype.append` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
		  append: function append(name, value) {
		    validateArgumentsLength(arguments.length, 2);
		    var state = getInternalParamsState(this);
		    state.entries.push({ key: name + '', value: value + '' });
		    state.updateURL();
		  },
		  // `URLSearchParams.prototype.delete` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
		  'delete': function (name) {
		    validateArgumentsLength(arguments.length, 1);
		    var state = getInternalParamsState(this);
		    var entries = state.entries;
		    var key = name + '';
		    var index = 0;
		    while (index < entries.length) {
		      if (entries[index].key === key) entries.splice(index, 1);
		      else index++;
		    }
		    state.updateURL();
		  },
		  // `URLSearchParams.prototype.get` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
		  get: function get(name) {
		    validateArgumentsLength(arguments.length, 1);
		    var entries = getInternalParamsState(this).entries;
		    var key = name + '';
		    var index = 0;
		    for (; index < entries.length; index++) {
		      if (entries[index].key === key) return entries[index].value;
		    }
		    return null;
		  },
		  // `URLSearchParams.prototype.getAll` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
		  getAll: function getAll(name) {
		    validateArgumentsLength(arguments.length, 1);
		    var entries = getInternalParamsState(this).entries;
		    var key = name + '';
		    var result = [];
		    var index = 0;
		    for (; index < entries.length; index++) {
		      if (entries[index].key === key) result.push(entries[index].value);
		    }
		    return result;
		  },
		  // `URLSearchParams.prototype.has` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
		  has: function has(name) {
		    validateArgumentsLength(arguments.length, 1);
		    var entries = getInternalParamsState(this).entries;
		    var key = name + '';
		    var index = 0;
		    while (index < entries.length) {
		      if (entries[index++].key === key) return true;
		    }
		    return false;
		  },
		  // `URLSearchParams.prototype.set` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
		  set: function set(name, value) {
		    validateArgumentsLength(arguments.length, 1);
		    var state = getInternalParamsState(this);
		    var entries = state.entries;
		    var found = false;
		    var key = name + '';
		    var val = value + '';
		    var index = 0;
		    var entry;
		    for (; index < entries.length; index++) {
		      entry = entries[index];
		      if (entry.key === key) {
		        if (found) entries.splice(index--, 1);
		        else {
		          found = true;
		          entry.value = val;
		        }
		      }
		    }
		    if (!found) entries.push({ key: key, value: val });
		    state.updateURL();
		  },
		  // `URLSearchParams.prototype.sort` method
		  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
		  sort: function sort() {
		    var state = getInternalParamsState(this);
		    var entries = state.entries;
		    // Array#sort is not stable in some engines
		    var slice = entries.slice();
		    var entry, entriesIndex, sliceIndex;
		    entries.length = 0;
		    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
		      entry = slice[sliceIndex];
		      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
		        if (entries[entriesIndex].key > entry.key) {
		          entries.splice(entriesIndex, 0, entry);
		          break;
		        }
		      }
		      if (entriesIndex === sliceIndex) entries.push(entry);
		    }
		    state.updateURL();
		  },
		  // `URLSearchParams.prototype.forEach` method
		  forEach: function forEach(callback /* , thisArg */) {
		    var entries = getInternalParamsState(this).entries;
		    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
		    var index = 0;
		    var entry;
		    while (index < entries.length) {
		      entry = entries[index++];
		      boundFunction(entry.value, entry.key, this);
		    }
		  },
		  // `URLSearchParams.prototype.keys` method
		  keys: function keys() {
		    return new URLSearchParamsIterator(this, 'keys');
		  },
		  // `URLSearchParams.prototype.values` method
		  values: function values() {
		    return new URLSearchParamsIterator(this, 'values');
		  },
		  // `URLSearchParams.prototype.entries` method
		  entries: function entries() {
		    return new URLSearchParamsIterator(this, 'entries');
		  }
		}, { enumerable: true });

		// `URLSearchParams.prototype[@@iterator]` method
		redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

		// `URLSearchParams.prototype.toString` method
		// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
		redefine(URLSearchParamsPrototype, 'toString', function toString() {
		  var entries = getInternalParamsState(this).entries;
		  var result = [];
		  var index = 0;
		  var entry;
		  while (index < entries.length) {
		    entry = entries[index++];
		    result.push(serialize(entry.key) + '=' + serialize(entry.value));
		  } return result.join('&');
		}, { enumerable: true });

		setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

		$({ global: true, forced: !USE_NATIVE_URL }, {
		  URLSearchParams: URLSearchParamsConstructor
		});

		// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
		// https://github.com/zloirock/core-js/issues/674
		if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
		  $({ global: true, enumerable: true, forced: true }, {
		    fetch: function fetch(input /* , init */) {
		      var args = [input];
		      var init, body, headers;
		      if (arguments.length > 1) {
		        init = arguments[1];
		        if (isObject(init)) {
		          body = init.body;
		          if (classof(body) === URL_SEARCH_PARAMS) {
		            headers = init.headers ? new Headers(init.headers) : new Headers();
		            if (!headers.has('content-type')) {
		              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
		            }
		            init = create(init, {
		              body: createPropertyDescriptor(0, String(body)),
		              headers: createPropertyDescriptor(0, headers)
		            });
		          }
		        }
		        args.push(init);
		      } return $fetch.apply(this, args);
		    }
		  });
		}

		module.exports = {
		  URLSearchParams: URLSearchParamsConstructor,
		  getState: getInternalParamsState
		};


		/***/ }),

		/***/ 285:
		/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

		// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
		__webpack_require__(8783);
		var $ = __webpack_require__(2109);
		var DESCRIPTORS = __webpack_require__(9781);
		var USE_NATIVE_URL = __webpack_require__(590);
		var global = __webpack_require__(7854);
		var defineProperties = __webpack_require__(6048);
		var redefine = __webpack_require__(1320);
		var anInstance = __webpack_require__(5787);
		var has = __webpack_require__(6656);
		var assign = __webpack_require__(1574);
		var arrayFrom = __webpack_require__(8457);
		var codeAt = __webpack_require__(8710).codeAt;
		var toASCII = __webpack_require__(3197);
		var setToStringTag = __webpack_require__(8003);
		var URLSearchParamsModule = __webpack_require__(1637);
		var InternalStateModule = __webpack_require__(9909);

		var NativeURL = global.URL;
		var URLSearchParams = URLSearchParamsModule.URLSearchParams;
		var getInternalSearchParamsState = URLSearchParamsModule.getState;
		var setInternalState = InternalStateModule.set;
		var getInternalURLState = InternalStateModule.getterFor('URL');
		var floor = Math.floor;
		var pow = Math.pow;

		var INVALID_AUTHORITY = 'Invalid authority';
		var INVALID_SCHEME = 'Invalid scheme';
		var INVALID_HOST = 'Invalid host';
		var INVALID_PORT = 'Invalid port';

		var ALPHA = /[A-Za-z]/;
		var ALPHANUMERIC = /[\d+-.A-Za-z]/;
		var DIGIT = /\d/;
		var HEX_START = /^(0x|0X)/;
		var OCT = /^[0-7]+$/;
		var DEC = /^\d+$/;
		var HEX = /^[\dA-Fa-f]+$/;
		/* eslint-disable no-control-regex -- safe */
		var FORBIDDEN_HOST_CODE_POINT = /[\u0000\t\u000A\u000D #%/:?@[\\]]/;
		var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\t\u000A\u000D #/:?@[\\]]/;
		var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
		var TAB_AND_NEW_LINE = /[\t\u000A\u000D]/g;
		/* eslint-enable no-control-regex -- safe */
		var EOF;

		var parseHost = function (url, input) {
		  var result, codePoints, index;
		  if (input.charAt(0) == '[') {
		    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
		    result = parseIPv6(input.slice(1, -1));
		    if (!result) return INVALID_HOST;
		    url.host = result;
		  // opaque host
		  } else if (!isSpecial(url)) {
		    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
		    result = '';
		    codePoints = arrayFrom(input);
		    for (index = 0; index < codePoints.length; index++) {
		      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
		    }
		    url.host = result;
		  } else {
		    input = toASCII(input);
		    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
		    result = parseIPv4(input);
		    if (result === null) return INVALID_HOST;
		    url.host = result;
		  }
		};

		var parseIPv4 = function (input) {
		  var parts = input.split('.');
		  var partsLength, numbers, index, part, radix, number, ipv4;
		  if (parts.length && parts[parts.length - 1] == '') {
		    parts.pop();
		  }
		  partsLength = parts.length;
		  if (partsLength > 4) return input;
		  numbers = [];
		  for (index = 0; index < partsLength; index++) {
		    part = parts[index];
		    if (part == '') return input;
		    radix = 10;
		    if (part.length > 1 && part.charAt(0) == '0') {
		      radix = HEX_START.test(part) ? 16 : 8;
		      part = part.slice(radix == 8 ? 1 : 2);
		    }
		    if (part === '') {
		      number = 0;
		    } else {
		      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
		      number = parseInt(part, radix);
		    }
		    numbers.push(number);
		  }
		  for (index = 0; index < partsLength; index++) {
		    number = numbers[index];
		    if (index == partsLength - 1) {
		      if (number >= pow(256, 5 - partsLength)) return null;
		    } else if (number > 255) return null;
		  }
		  ipv4 = numbers.pop();
		  for (index = 0; index < numbers.length; index++) {
		    ipv4 += numbers[index] * pow(256, 3 - index);
		  }
		  return ipv4;
		};

		// eslint-disable-next-line max-statements -- TODO
		var parseIPv6 = function (input) {
		  var address = [0, 0, 0, 0, 0, 0, 0, 0];
		  var pieceIndex = 0;
		  var compress = null;
		  var pointer = 0;
		  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

		  var char = function () {
		    return input.charAt(pointer);
		  };

		  if (char() == ':') {
		    if (input.charAt(1) != ':') return;
		    pointer += 2;
		    pieceIndex++;
		    compress = pieceIndex;
		  }
		  while (char()) {
		    if (pieceIndex == 8) return;
		    if (char() == ':') {
		      if (compress !== null) return;
		      pointer++;
		      pieceIndex++;
		      compress = pieceIndex;
		      continue;
		    }
		    value = length = 0;
		    while (length < 4 && HEX.test(char())) {
		      value = value * 16 + parseInt(char(), 16);
		      pointer++;
		      length++;
		    }
		    if (char() == '.') {
		      if (length == 0) return;
		      pointer -= length;
		      if (pieceIndex > 6) return;
		      numbersSeen = 0;
		      while (char()) {
		        ipv4Piece = null;
		        if (numbersSeen > 0) {
		          if (char() == '.' && numbersSeen < 4) pointer++;
		          else return;
		        }
		        if (!DIGIT.test(char())) return;
		        while (DIGIT.test(char())) {
		          number = parseInt(char(), 10);
		          if (ipv4Piece === null) ipv4Piece = number;
		          else if (ipv4Piece == 0) return;
		          else ipv4Piece = ipv4Piece * 10 + number;
		          if (ipv4Piece > 255) return;
		          pointer++;
		        }
		        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
		        numbersSeen++;
		        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
		      }
		      if (numbersSeen != 4) return;
		      break;
		    } else if (char() == ':') {
		      pointer++;
		      if (!char()) return;
		    } else if (char()) return;
		    address[pieceIndex++] = value;
		  }
		  if (compress !== null) {
		    swaps = pieceIndex - compress;
		    pieceIndex = 7;
		    while (pieceIndex != 0 && swaps > 0) {
		      swap = address[pieceIndex];
		      address[pieceIndex--] = address[compress + swaps - 1];
		      address[compress + --swaps] = swap;
		    }
		  } else if (pieceIndex != 8) return;
		  return address;
		};

		var findLongestZeroSequence = function (ipv6) {
		  var maxIndex = null;
		  var maxLength = 1;
		  var currStart = null;
		  var currLength = 0;
		  var index = 0;
		  for (; index < 8; index++) {
		    if (ipv6[index] !== 0) {
		      if (currLength > maxLength) {
		        maxIndex = currStart;
		        maxLength = currLength;
		      }
		      currStart = null;
		      currLength = 0;
		    } else {
		      if (currStart === null) currStart = index;
		      ++currLength;
		    }
		  }
		  if (currLength > maxLength) {
		    maxIndex = currStart;
		    maxLength = currLength;
		  }
		  return maxIndex;
		};

		var serializeHost = function (host) {
		  var result, index, compress, ignore0;
		  // ipv4
		  if (typeof host == 'number') {
		    result = [];
		    for (index = 0; index < 4; index++) {
		      result.unshift(host % 256);
		      host = floor(host / 256);
		    } return result.join('.');
		  // ipv6
		  } else if (typeof host == 'object') {
		    result = '';
		    compress = findLongestZeroSequence(host);
		    for (index = 0; index < 8; index++) {
		      if (ignore0 && host[index] === 0) continue;
		      if (ignore0) ignore0 = false;
		      if (compress === index) {
		        result += index ? ':' : '::';
		        ignore0 = true;
		      } else {
		        result += host[index].toString(16);
		        if (index < 7) result += ':';
		      }
		    }
		    return '[' + result + ']';
		  } return host;
		};

		var C0ControlPercentEncodeSet = {};
		var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
		  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
		});
		var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
		  '#': 1, '?': 1, '{': 1, '}': 1
		});
		var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
		  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
		});

		var percentEncode = function (char, set) {
		  var code = codeAt(char, 0);
		  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
		};

		var specialSchemes = {
		  ftp: 21,
		  file: null,
		  http: 80,
		  https: 443,
		  ws: 80,
		  wss: 443
		};

		var isSpecial = function (url) {
		  return has(specialSchemes, url.scheme);
		};

		var includesCredentials = function (url) {
		  return url.username != '' || url.password != '';
		};

		var cannotHaveUsernamePasswordPort = function (url) {
		  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
		};

		var isWindowsDriveLetter = function (string, normalized) {
		  var second;
		  return string.length == 2 && ALPHA.test(string.charAt(0))
		    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
		};

		var startsWithWindowsDriveLetter = function (string) {
		  var third;
		  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
		    string.length == 2 ||
		    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
		  );
		};

		var shortenURLsPath = function (url) {
		  var path = url.path;
		  var pathSize = path.length;
		  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
		    path.pop();
		  }
		};

		var isSingleDot = function (segment) {
		  return segment === '.' || segment.toLowerCase() === '%2e';
		};

		var isDoubleDot = function (segment) {
		  segment = segment.toLowerCase();
		  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
		};

		// States:
		var SCHEME_START = {};
		var SCHEME = {};
		var NO_SCHEME = {};
		var SPECIAL_RELATIVE_OR_AUTHORITY = {};
		var PATH_OR_AUTHORITY = {};
		var RELATIVE = {};
		var RELATIVE_SLASH = {};
		var SPECIAL_AUTHORITY_SLASHES = {};
		var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
		var AUTHORITY = {};
		var HOST = {};
		var HOSTNAME = {};
		var PORT = {};
		var FILE = {};
		var FILE_SLASH = {};
		var FILE_HOST = {};
		var PATH_START = {};
		var PATH = {};
		var CANNOT_BE_A_BASE_URL_PATH = {};
		var QUERY = {};
		var FRAGMENT = {};

		// eslint-disable-next-line max-statements -- TODO
		var parseURL = function (url, input, stateOverride, base) {
		  var state = stateOverride || SCHEME_START;
		  var pointer = 0;
		  var buffer = '';
		  var seenAt = false;
		  var seenBracket = false;
		  var seenPasswordToken = false;
		  var codePoints, char, bufferCodePoints, failure;

		  if (!stateOverride) {
		    url.scheme = '';
		    url.username = '';
		    url.password = '';
		    url.host = null;
		    url.port = null;
		    url.path = [];
		    url.query = null;
		    url.fragment = null;
		    url.cannotBeABaseURL = false;
		    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
		  }

		  input = input.replace(TAB_AND_NEW_LINE, '');

		  codePoints = arrayFrom(input);

		  while (pointer <= codePoints.length) {
		    char = codePoints[pointer];
		    switch (state) {
		      case SCHEME_START:
		        if (char && ALPHA.test(char)) {
		          buffer += char.toLowerCase();
		          state = SCHEME;
		        } else if (!stateOverride) {
		          state = NO_SCHEME;
		          continue;
		        } else return INVALID_SCHEME;
		        break;

		      case SCHEME:
		        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
		          buffer += char.toLowerCase();
		        } else if (char == ':') {
		          if (stateOverride && (
		            (isSpecial(url) != has(specialSchemes, buffer)) ||
		            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
		            (url.scheme == 'file' && !url.host)
		          )) return;
		          url.scheme = buffer;
		          if (stateOverride) {
		            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
		            return;
		          }
		          buffer = '';
		          if (url.scheme == 'file') {
		            state = FILE;
		          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
		            state = SPECIAL_RELATIVE_OR_AUTHORITY;
		          } else if (isSpecial(url)) {
		            state = SPECIAL_AUTHORITY_SLASHES;
		          } else if (codePoints[pointer + 1] == '/') {
		            state = PATH_OR_AUTHORITY;
		            pointer++;
		          } else {
		            url.cannotBeABaseURL = true;
		            url.path.push('');
		            state = CANNOT_BE_A_BASE_URL_PATH;
		          }
		        } else if (!stateOverride) {
		          buffer = '';
		          state = NO_SCHEME;
		          pointer = 0;
		          continue;
		        } else return INVALID_SCHEME;
		        break;

		      case NO_SCHEME:
		        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
		        if (base.cannotBeABaseURL && char == '#') {
		          url.scheme = base.scheme;
		          url.path = base.path.slice();
		          url.query = base.query;
		          url.fragment = '';
		          url.cannotBeABaseURL = true;
		          state = FRAGMENT;
		          break;
		        }
		        state = base.scheme == 'file' ? FILE : RELATIVE;
		        continue;

		      case SPECIAL_RELATIVE_OR_AUTHORITY:
		        if (char == '/' && codePoints[pointer + 1] == '/') {
		          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
		          pointer++;
		        } else {
		          state = RELATIVE;
		          continue;
		        } break;

		      case PATH_OR_AUTHORITY:
		        if (char == '/') {
		          state = AUTHORITY;
		          break;
		        } else {
		          state = PATH;
		          continue;
		        }

		      case RELATIVE:
		        url.scheme = base.scheme;
		        if (char == EOF) {
		          url.username = base.username;
		          url.password = base.password;
		          url.host = base.host;
		          url.port = base.port;
		          url.path = base.path.slice();
		          url.query = base.query;
		        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
		          state = RELATIVE_SLASH;
		        } else if (char == '?') {
		          url.username = base.username;
		          url.password = base.password;
		          url.host = base.host;
		          url.port = base.port;
		          url.path = base.path.slice();
		          url.query = '';
		          state = QUERY;
		        } else if (char == '#') {
		          url.username = base.username;
		          url.password = base.password;
		          url.host = base.host;
		          url.port = base.port;
		          url.path = base.path.slice();
		          url.query = base.query;
		          url.fragment = '';
		          state = FRAGMENT;
		        } else {
		          url.username = base.username;
		          url.password = base.password;
		          url.host = base.host;
		          url.port = base.port;
		          url.path = base.path.slice();
		          url.path.pop();
		          state = PATH;
		          continue;
		        } break;

		      case RELATIVE_SLASH:
		        if (isSpecial(url) && (char == '/' || char == '\\')) {
		          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
		        } else if (char == '/') {
		          state = AUTHORITY;
		        } else {
		          url.username = base.username;
		          url.password = base.password;
		          url.host = base.host;
		          url.port = base.port;
		          state = PATH;
		          continue;
		        } break;

		      case SPECIAL_AUTHORITY_SLASHES:
		        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
		        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
		        pointer++;
		        break;

		      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
		        if (char != '/' && char != '\\') {
		          state = AUTHORITY;
		          continue;
		        } break;

		      case AUTHORITY:
		        if (char == '@') {
		          if (seenAt) buffer = '%40' + buffer;
		          seenAt = true;
		          bufferCodePoints = arrayFrom(buffer);
		          for (var i = 0; i < bufferCodePoints.length; i++) {
		            var codePoint = bufferCodePoints[i];
		            if (codePoint == ':' && !seenPasswordToken) {
		              seenPasswordToken = true;
		              continue;
		            }
		            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
		            if (seenPasswordToken) url.password += encodedCodePoints;
		            else url.username += encodedCodePoints;
		          }
		          buffer = '';
		        } else if (
		          char == EOF || char == '/' || char == '?' || char == '#' ||
		          (char == '\\' && isSpecial(url))
		        ) {
		          if (seenAt && buffer == '') return INVALID_AUTHORITY;
		          pointer -= arrayFrom(buffer).length + 1;
		          buffer = '';
		          state = HOST;
		        } else buffer += char;
		        break;

		      case HOST:
		      case HOSTNAME:
		        if (stateOverride && url.scheme == 'file') {
		          state = FILE_HOST;
		          continue;
		        } else if (char == ':' && !seenBracket) {
		          if (buffer == '') return INVALID_HOST;
		          failure = parseHost(url, buffer);
		          if (failure) return failure;
		          buffer = '';
		          state = PORT;
		          if (stateOverride == HOSTNAME) return;
		        } else if (
		          char == EOF || char == '/' || char == '?' || char == '#' ||
		          (char == '\\' && isSpecial(url))
		        ) {
		          if (isSpecial(url) && buffer == '') return INVALID_HOST;
		          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
		          failure = parseHost(url, buffer);
		          if (failure) return failure;
		          buffer = '';
		          state = PATH_START;
		          if (stateOverride) return;
		          continue;
		        } else {
		          if (char == '[') seenBracket = true;
		          else if (char == ']') seenBracket = false;
		          buffer += char;
		        } break;

		      case PORT:
		        if (DIGIT.test(char)) {
		          buffer += char;
		        } else if (
		          char == EOF || char == '/' || char == '?' || char == '#' ||
		          (char == '\\' && isSpecial(url)) ||
		          stateOverride
		        ) {
		          if (buffer != '') {
		            var port = parseInt(buffer, 10);
		            if (port > 0xFFFF) return INVALID_PORT;
		            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
		            buffer = '';
		          }
		          if (stateOverride) return;
		          state = PATH_START;
		          continue;
		        } else return INVALID_PORT;
		        break;

		      case FILE:
		        url.scheme = 'file';
		        if (char == '/' || char == '\\') state = FILE_SLASH;
		        else if (base && base.scheme == 'file') {
		          if (char == EOF) {
		            url.host = base.host;
		            url.path = base.path.slice();
		            url.query = base.query;
		          } else if (char == '?') {
		            url.host = base.host;
		            url.path = base.path.slice();
		            url.query = '';
		            state = QUERY;
		          } else if (char == '#') {
		            url.host = base.host;
		            url.path = base.path.slice();
		            url.query = base.query;
		            url.fragment = '';
		            state = FRAGMENT;
		          } else {
		            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
		              url.host = base.host;
		              url.path = base.path.slice();
		              shortenURLsPath(url);
		            }
		            state = PATH;
		            continue;
		          }
		        } else {
		          state = PATH;
		          continue;
		        } break;

		      case FILE_SLASH:
		        if (char == '/' || char == '\\') {
		          state = FILE_HOST;
		          break;
		        }
		        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
		          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
		          else url.host = base.host;
		        }
		        state = PATH;
		        continue;

		      case FILE_HOST:
		        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
		          if (!stateOverride && isWindowsDriveLetter(buffer)) {
		            state = PATH;
		          } else if (buffer == '') {
		            url.host = '';
		            if (stateOverride) return;
		            state = PATH_START;
		          } else {
		            failure = parseHost(url, buffer);
		            if (failure) return failure;
		            if (url.host == 'localhost') url.host = '';
		            if (stateOverride) return;
		            buffer = '';
		            state = PATH_START;
		          } continue;
		        } else buffer += char;
		        break;

		      case PATH_START:
		        if (isSpecial(url)) {
		          state = PATH;
		          if (char != '/' && char != '\\') continue;
		        } else if (!stateOverride && char == '?') {
		          url.query = '';
		          state = QUERY;
		        } else if (!stateOverride && char == '#') {
		          url.fragment = '';
		          state = FRAGMENT;
		        } else if (char != EOF) {
		          state = PATH;
		          if (char != '/') continue;
		        } break;

		      case PATH:
		        if (
		          char == EOF || char == '/' ||
		          (char == '\\' && isSpecial(url)) ||
		          (!stateOverride && (char == '?' || char == '#'))
		        ) {
		          if (isDoubleDot(buffer)) {
		            shortenURLsPath(url);
		            if (char != '/' && !(char == '\\' && isSpecial(url))) {
		              url.path.push('');
		            }
		          } else if (isSingleDot(buffer)) {
		            if (char != '/' && !(char == '\\' && isSpecial(url))) {
		              url.path.push('');
		            }
		          } else {
		            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
		              if (url.host) url.host = '';
		              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
		            }
		            url.path.push(buffer);
		          }
		          buffer = '';
		          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
		            while (url.path.length > 1 && url.path[0] === '') {
		              url.path.shift();
		            }
		          }
		          if (char == '?') {
		            url.query = '';
		            state = QUERY;
		          } else if (char == '#') {
		            url.fragment = '';
		            state = FRAGMENT;
		          }
		        } else {
		          buffer += percentEncode(char, pathPercentEncodeSet);
		        } break;

		      case CANNOT_BE_A_BASE_URL_PATH:
		        if (char == '?') {
		          url.query = '';
		          state = QUERY;
		        } else if (char == '#') {
		          url.fragment = '';
		          state = FRAGMENT;
		        } else if (char != EOF) {
		          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
		        } break;

		      case QUERY:
		        if (!stateOverride && char == '#') {
		          url.fragment = '';
		          state = FRAGMENT;
		        } else if (char != EOF) {
		          if (char == "'" && isSpecial(url)) url.query += '%27';
		          else if (char == '#') url.query += '%23';
		          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
		        } break;

		      case FRAGMENT:
		        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
		        break;
		    }

		    pointer++;
		  }
		};

		// `URL` constructor
		// https://url.spec.whatwg.org/#url-class
		var URLConstructor = function URL(url /* , base */) {
		  var that = anInstance(this, URLConstructor, 'URL');
		  var base = arguments.length > 1 ? arguments[1] : undefined;
		  var urlString = String(url);
		  var state = setInternalState(that, { type: 'URL' });
		  var baseState, failure;
		  if (base !== undefined) {
		    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
		    else {
		      failure = parseURL(baseState = {}, String(base));
		      if (failure) throw TypeError(failure);
		    }
		  }
		  failure = parseURL(state, urlString, null, baseState);
		  if (failure) throw TypeError(failure);
		  var searchParams = state.searchParams = new URLSearchParams();
		  var searchParamsState = getInternalSearchParamsState(searchParams);
		  searchParamsState.updateSearchParams(state.query);
		  searchParamsState.updateURL = function () {
		    state.query = String(searchParams) || null;
		  };
		  if (!DESCRIPTORS) {
		    that.href = serializeURL.call(that);
		    that.origin = getOrigin.call(that);
		    that.protocol = getProtocol.call(that);
		    that.username = getUsername.call(that);
		    that.password = getPassword.call(that);
		    that.host = getHost.call(that);
		    that.hostname = getHostname.call(that);
		    that.port = getPort.call(that);
		    that.pathname = getPathname.call(that);
		    that.search = getSearch.call(that);
		    that.searchParams = getSearchParams.call(that);
		    that.hash = getHash.call(that);
		  }
		};

		var URLPrototype = URLConstructor.prototype;

		var serializeURL = function () {
		  var url = getInternalURLState(this);
		  var scheme = url.scheme;
		  var username = url.username;
		  var password = url.password;
		  var host = url.host;
		  var port = url.port;
		  var path = url.path;
		  var query = url.query;
		  var fragment = url.fragment;
		  var output = scheme + ':';
		  if (host !== null) {
		    output += '//';
		    if (includesCredentials(url)) {
		      output += username + (password ? ':' + password : '') + '@';
		    }
		    output += serializeHost(host);
		    if (port !== null) output += ':' + port;
		  } else if (scheme == 'file') output += '//';
		  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
		  if (query !== null) output += '?' + query;
		  if (fragment !== null) output += '#' + fragment;
		  return output;
		};

		var getOrigin = function () {
		  var url = getInternalURLState(this);
		  var scheme = url.scheme;
		  var port = url.port;
		  if (scheme == 'blob') try {
		    return new URL(scheme.path[0]).origin;
		  } catch (error) {
		    return 'null';
		  }
		  if (scheme == 'file' || !isSpecial(url)) return 'null';
		  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
		};

		var getProtocol = function () {
		  return getInternalURLState(this).scheme + ':';
		};

		var getUsername = function () {
		  return getInternalURLState(this).username;
		};

		var getPassword = function () {
		  return getInternalURLState(this).password;
		};

		var getHost = function () {
		  var url = getInternalURLState(this);
		  var host = url.host;
		  var port = url.port;
		  return host === null ? ''
		    : port === null ? serializeHost(host)
		    : serializeHost(host) + ':' + port;
		};

		var getHostname = function () {
		  var host = getInternalURLState(this).host;
		  return host === null ? '' : serializeHost(host);
		};

		var getPort = function () {
		  var port = getInternalURLState(this).port;
		  return port === null ? '' : String(port);
		};

		var getPathname = function () {
		  var url = getInternalURLState(this);
		  var path = url.path;
		  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
		};

		var getSearch = function () {
		  var query = getInternalURLState(this).query;
		  return query ? '?' + query : '';
		};

		var getSearchParams = function () {
		  return getInternalURLState(this).searchParams;
		};

		var getHash = function () {
		  var fragment = getInternalURLState(this).fragment;
		  return fragment ? '#' + fragment : '';
		};

		var accessorDescriptor = function (getter, setter) {
		  return { get: getter, set: setter, configurable: true, enumerable: true };
		};

		if (DESCRIPTORS) {
		  defineProperties(URLPrototype, {
		    // `URL.prototype.href` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-href
		    href: accessorDescriptor(serializeURL, function (href) {
		      var url = getInternalURLState(this);
		      var urlString = String(href);
		      var failure = parseURL(url, urlString);
		      if (failure) throw TypeError(failure);
		      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
		    }),
		    // `URL.prototype.origin` getter
		    // https://url.spec.whatwg.org/#dom-url-origin
		    origin: accessorDescriptor(getOrigin),
		    // `URL.prototype.protocol` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-protocol
		    protocol: accessorDescriptor(getProtocol, function (protocol) {
		      var url = getInternalURLState(this);
		      parseURL(url, String(protocol) + ':', SCHEME_START);
		    }),
		    // `URL.prototype.username` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-username
		    username: accessorDescriptor(getUsername, function (username) {
		      var url = getInternalURLState(this);
		      var codePoints = arrayFrom(String(username));
		      if (cannotHaveUsernamePasswordPort(url)) return;
		      url.username = '';
		      for (var i = 0; i < codePoints.length; i++) {
		        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
		      }
		    }),
		    // `URL.prototype.password` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-password
		    password: accessorDescriptor(getPassword, function (password) {
		      var url = getInternalURLState(this);
		      var codePoints = arrayFrom(String(password));
		      if (cannotHaveUsernamePasswordPort(url)) return;
		      url.password = '';
		      for (var i = 0; i < codePoints.length; i++) {
		        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
		      }
		    }),
		    // `URL.prototype.host` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-host
		    host: accessorDescriptor(getHost, function (host) {
		      var url = getInternalURLState(this);
		      if (url.cannotBeABaseURL) return;
		      parseURL(url, String(host), HOST);
		    }),
		    // `URL.prototype.hostname` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-hostname
		    hostname: accessorDescriptor(getHostname, function (hostname) {
		      var url = getInternalURLState(this);
		      if (url.cannotBeABaseURL) return;
		      parseURL(url, String(hostname), HOSTNAME);
		    }),
		    // `URL.prototype.port` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-port
		    port: accessorDescriptor(getPort, function (port) {
		      var url = getInternalURLState(this);
		      if (cannotHaveUsernamePasswordPort(url)) return;
		      port = String(port);
		      if (port == '') url.port = null;
		      else parseURL(url, port, PORT);
		    }),
		    // `URL.prototype.pathname` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-pathname
		    pathname: accessorDescriptor(getPathname, function (pathname) {
		      var url = getInternalURLState(this);
		      if (url.cannotBeABaseURL) return;
		      url.path = [];
		      parseURL(url, pathname + '', PATH_START);
		    }),
		    // `URL.prototype.search` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-search
		    search: accessorDescriptor(getSearch, function (search) {
		      var url = getInternalURLState(this);
		      search = String(search);
		      if (search == '') {
		        url.query = null;
		      } else {
		        if ('?' == search.charAt(0)) search = search.slice(1);
		        url.query = '';
		        parseURL(url, search, QUERY);
		      }
		      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
		    }),
		    // `URL.prototype.searchParams` getter
		    // https://url.spec.whatwg.org/#dom-url-searchparams
		    searchParams: accessorDescriptor(getSearchParams),
		    // `URL.prototype.hash` accessors pair
		    // https://url.spec.whatwg.org/#dom-url-hash
		    hash: accessorDescriptor(getHash, function (hash) {
		      var url = getInternalURLState(this);
		      hash = String(hash);
		      if (hash == '') {
		        url.fragment = null;
		        return;
		      }
		      if ('#' == hash.charAt(0)) hash = hash.slice(1);
		      url.fragment = '';
		      parseURL(url, hash, FRAGMENT);
		    })
		  });
		}

		// `URL.prototype.toJSON` method
		// https://url.spec.whatwg.org/#dom-url-tojson
		redefine(URLPrototype, 'toJSON', function toJSON() {
		  return serializeURL.call(this);
		}, { enumerable: true });

		// `URL.prototype.toString` method
		// https://url.spec.whatwg.org/#URL-stringification-behavior
		redefine(URLPrototype, 'toString', function toString() {
		  return serializeURL.call(this);
		}, { enumerable: true });

		if (NativeURL) {
		  var nativeCreateObjectURL = NativeURL.createObjectURL;
		  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
		  // `URL.createObjectURL` method
		  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
		  // eslint-disable-next-line no-unused-vars -- required for `.length`
		  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
		    return nativeCreateObjectURL.apply(NativeURL, arguments);
		  });
		  // `URL.revokeObjectURL` method
		  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
		  // eslint-disable-next-line no-unused-vars -- required for `.length`
		  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
		    return nativeRevokeObjectURL.apply(NativeURL, arguments);
		  });
		}

		setToStringTag(URLConstructor, 'URL');

		$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
		  URL: URLConstructor
		});


		/***/ })

		/******/ 	});
		/************************************************************************/
		/******/ 	// The module cache
		/******/ 	var __webpack_module_cache__ = {};
		/******/ 	
		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {
		/******/ 		// Check if module is in cache
		/******/ 		if(__webpack_module_cache__[moduleId]) {
		/******/ 			return __webpack_module_cache__[moduleId].exports;
		/******/ 		}
		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = __webpack_module_cache__[moduleId] = {
		/******/ 			// no module.id needed
		/******/ 			// no module.loaded needed
		/******/ 			exports: {}
		/******/ 		};
		/******/ 	
		/******/ 		// Execute the module function
		/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
		/******/ 	
		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}
		/******/ 	
		/************************************************************************/
		/******/ 	/* webpack/runtime/define property getters */
		/******/ 	!function() {
		/******/ 		// define getter functions for harmony exports
		/******/ 		__webpack_require__.d = function(exports, definition) {
		/******/ 			for(var key in definition) {
		/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
		/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
		/******/ 				}
		/******/ 			}
		/******/ 		};
		/******/ 	}();
		/******/ 	
		/******/ 	/* webpack/runtime/global */
		/******/ 	!function() {
		/******/ 		__webpack_require__.g = (function() {
		/******/ 			if (typeof globalThis === 'object') return globalThis;
		/******/ 			try {
		/******/ 				return this || new Function('return this')();
		/******/ 			} catch (e) {
		/******/ 				if (typeof window === 'object') return window;
		/******/ 			}
		/******/ 		})();
		/******/ 	}();
		/******/ 	
		/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
		/******/ 	!function() {
		/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); };
		/******/ 	}();
		/******/ 	
		/******/ 	/* webpack/runtime/make namespace object */
		/******/ 	!function() {
		/******/ 		// define __esModule on exports
		/******/ 		__webpack_require__.r = function(exports) {
		/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
		/******/ 			}
		/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
		/******/ 		};
		/******/ 	}();
		/******/ 	
		/************************************************************************/
		var __webpack_exports__ = {};
		// This entry need to be wrapped in an IIFE because it need to be in strict mode.
		!function() {
		// ESM COMPAT FLAG
		__webpack_require__.r(__webpack_exports__);

		// EXPORTS
		__webpack_require__.d(__webpack_exports__, {
		  "Dropzone": function() { return /* reexport */ Dropzone; },
		  "default": function() { return /* binding */ dropzone_dist; }
		});

		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
		__webpack_require__(2222);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
		__webpack_require__(7327);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js
		__webpack_require__(2772);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
		__webpack_require__(6992);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
		__webpack_require__(1249);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
		__webpack_require__(7042);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
		__webpack_require__(561);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array-buffer.constructor.js
		__webpack_require__(8264);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
		__webpack_require__(8309);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js
		__webpack_require__(489);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
		__webpack_require__(1539);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
		__webpack_require__(4916);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
		__webpack_require__(9714);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
		__webpack_require__(8783);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js
		__webpack_require__(4723);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
		__webpack_require__(5306);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
		__webpack_require__(3123);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js
		__webpack_require__(3210);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js
		__webpack_require__(2472);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js
		__webpack_require__(2990);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js
		__webpack_require__(8927);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js
		__webpack_require__(3105);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js
		__webpack_require__(5035);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js
		__webpack_require__(4345);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js
		__webpack_require__(7174);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js
		__webpack_require__(2846);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js
		__webpack_require__(4731);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js
		__webpack_require__(7209);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js
		__webpack_require__(6319);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js
		__webpack_require__(8867);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js
		__webpack_require__(7789);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js
		__webpack_require__(3739);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js
		__webpack_require__(9368);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js
		__webpack_require__(4483);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js
		__webpack_require__(2056);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js
		__webpack_require__(3462);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js
		__webpack_require__(678);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js
		__webpack_require__(7462);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js
		__webpack_require__(3824);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.subarray.js
		__webpack_require__(5021);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js
		__webpack_require__(2974);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js
		__webpack_require__(5016);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
		__webpack_require__(4747);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
		__webpack_require__(3948);
		// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js
		__webpack_require__(285);


		function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		// The Emitter class provides the ability to call `.on()` on Dropzone to listen
		// to events.
		// It is strongly based on component's emitter class, and I removed the
		// functionality because of the dependency hell with different frameworks.
		var Emitter = /*#__PURE__*/function () {
		  function Emitter() {
		    _classCallCheck(this, Emitter);
		  }

		  _createClass(Emitter, [{
		    key: "on",
		    value: // Add an event listener for given event
		    function on(event, fn) {
		      this._callbacks = this._callbacks || {}; // Create namespace for this event

		      if (!this._callbacks[event]) {
		        this._callbacks[event] = [];
		      }

		      this._callbacks[event].push(fn);

		      return this;
		    }
		  }, {
		    key: "emit",
		    value: function emit(event) {
		      this._callbacks = this._callbacks || {};
		      var callbacks = this._callbacks[event];

		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      if (callbacks) {
		        var _iterator = _createForOfIteratorHelper(callbacks, true),
		            _step;

		        try {
		          for (_iterator.s(); !(_step = _iterator.n()).done;) {
		            var callback = _step.value;
		            callback.apply(this, args);
		          }
		        } catch (err) {
		          _iterator.e(err);
		        } finally {
		          _iterator.f();
		        }
		      } // trigger a corresponding DOM event


		      if (this.element) {
		        this.element.dispatchEvent(this.makeEvent("dropzone:" + event, {
		          args: args
		        }));
		      }

		      return this;
		    }
		  }, {
		    key: "makeEvent",
		    value: function makeEvent(eventName, detail) {
		      var params = {
		        bubbles: true,
		        cancelable: true,
		        detail: detail
		      };

		      if (typeof window.CustomEvent === "function") {
		        return new CustomEvent(eventName, params);
		      } else {
		        // IE 11 support
		        // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
		        var evt = document.createEvent("CustomEvent");
		        evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);
		        return evt;
		      }
		    } // Remove event listener for given event. If fn is not provided, all event
		    // listeners for that event will be removed. If neither is provided, all
		    // event listeners will be removed.

		  }, {
		    key: "off",
		    value: function off(event, fn) {
		      if (!this._callbacks || arguments.length === 0) {
		        this._callbacks = {};
		        return this;
		      } // specific event


		      var callbacks = this._callbacks[event];

		      if (!callbacks) {
		        return this;
		      } // remove all handlers


		      if (arguments.length === 1) {
		        delete this._callbacks[event];
		        return this;
		      } // remove specific handler


		      for (var i = 0; i < callbacks.length; i++) {
		        var callback = callbacks[i];

		        if (callback === fn) {
		          callbacks.splice(i, 1);
		          break;
		        }
		      }

		      return this;
		    }
		  }]);

		  return Emitter;
		}();
		// Module
		var code = "<div class=\"dz-preview dz-file-preview\"> <div class=\"dz-image\"><img data-dz-thumbnail/></div> <div class=\"dz-details\"> <div class=\"dz-size\"><span data-dz-size></span></div> <div class=\"dz-filename\"><span data-dz-name></span></div> </div> <div class=\"dz-progress\"> <span class=\"dz-upload\" data-dz-uploadprogress></span> </div> <div class=\"dz-error-message\"><span data-dz-errormessage></span></div> <div class=\"dz-success-mark\"> <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <title>Check</title> <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"> <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\"></path> </g> </svg> </div> <div class=\"dz-error-mark\"> <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <title>Error</title> <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"> <g stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\"> <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\"></path> </g> </g> </svg> </div> </div> ";
		// Exports
		/* harmony default export */ var preview_template = (code);





		function options_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = options_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function options_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return options_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return options_arrayLikeToArray(o, minLen); }

		function options_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



		var defaultOptions = {
		  /**
		   * Has to be specified on elements other than form (or when the form
		   * doesn't have an `action` attribute). You can also
		   * provide a function that will be called with `files` and
		   * must return the url (since `v3.12.0`)
		   */
		  url: null,

		  /**
		   * Can be changed to `"put"` if necessary. You can also provide a function
		   * that will be called with `files` and must return the method (since `v3.12.0`).
		   */
		  method: "post",

		  /**
		   * Will be set on the XHRequest.
		   */
		  withCredentials: false,

		  /**
		   * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
		   * If set to null or 0, no timeout is going to be set.
		   */
		  timeout: null,

		  /**
		   * How many file uploads to process in parallel (See the
		   * Enqueuing file uploads documentation section for more info)
		   */
		  parallelUploads: 2,

		  /**
		   * Whether to send multiple files in one request. If
		   * this it set to true, then the fallback file input element will
		   * have the `multiple` attribute as well. This option will
		   * also trigger additional events (like `processingmultiple`). See the events
		   * documentation section for more information.
		   */
		  uploadMultiple: false,

		  /**
		   * Whether you want files to be uploaded in chunks to your server. This can't be
		   * used in combination with `uploadMultiple`.
		   *
		   * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
		   */
		  chunking: false,

		  /**
		   * If `chunking` is enabled, this defines whether **every** file should be chunked,
		   * even if the file size is below chunkSize. This means, that the additional chunk
		   * form data will be submitted and the `chunksUploaded` callback will be invoked.
		   */
		  forceChunking: false,

		  /**
		   * If `chunking` is `true`, then this defines the chunk size in bytes.
		   */
		  chunkSize: 2000000,

		  /**
		   * If `true`, the individual chunks of a file are being uploaded simultaneously.
		   */
		  parallelChunkUploads: false,

		  /**
		   * Whether a chunk should be retried if it fails.
		   */
		  retryChunks: false,

		  /**
		   * If `retryChunks` is true, how many times should it be retried.
		   */
		  retryChunksLimit: 3,

		  /**
		   * The maximum filesize (in bytes) that is allowed to be uploaded.
		   */
		  maxFilesize: 256,

		  /**
		   * The name of the file param that gets transferred.
		   * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
		   * Dropzone will append `[]` to the name.
		   */
		  paramName: "file",

		  /**
		   * Whether thumbnails for images should be generated
		   */
		  createImageThumbnails: true,

		  /**
		   * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
		   */
		  maxThumbnailFilesize: 10,

		  /**
		   * If `null`, the ratio of the image will be used to calculate it.
		   */
		  thumbnailWidth: 120,

		  /**
		   * The same as `thumbnailWidth`. If both are null, images will not be resized.
		   */
		  thumbnailHeight: 120,

		  /**
		   * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
		   * Can be either `contain` or `crop`.
		   */
		  thumbnailMethod: "crop",

		  /**
		   * If set, images will be resized to these dimensions before being **uploaded**.
		   * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
		   * ratio of the file will be preserved.
		   *
		   * The `options.transformFile` function uses these options, so if the `transformFile` function
		   * is overridden, these options don't do anything.
		   */
		  resizeWidth: null,

		  /**
		   * See `resizeWidth`.
		   */
		  resizeHeight: null,

		  /**
		   * The mime type of the resized image (before it gets uploaded to the server).
		   * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
		   * See `resizeWidth` for more information.
		   */
		  resizeMimeType: null,

		  /**
		   * The quality of the resized images. See `resizeWidth`.
		   */
		  resizeQuality: 0.8,

		  /**
		   * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
		   * Can be either `contain` or `crop`.
		   */
		  resizeMethod: "contain",

		  /**
		   * The base that is used to calculate the **displayed** filesize. You can
		   * change this to 1024 if you would rather display kibibytes, mebibytes,
		   * etc... 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte`
		   * not `1 kilobyte`. You can change this to `1024` if you don't care about
		   * validity.
		   */
		  filesizeBase: 1000,

		  /**
		   * If not `null` defines how many files this Dropzone handles. If it exceeds,
		   * the event `maxfilesexceeded` will be called. The dropzone element gets the
		   * class `dz-max-files-reached` accordingly so you can provide visual
		   * feedback.
		   */
		  maxFiles: null,

		  /**
		   * An optional object to send additional headers to the server. Eg:
		   * `{ "My-Awesome-Header": "header value" }`
		   */
		  headers: null,

		  /**
		   * If `true`, the dropzone element itself will be clickable, if `false`
		   * nothing will be clickable.
		   *
		   * You can also pass an HTML element, a CSS selector (for multiple elements)
		   * or an array of those. In that case, all of those elements will trigger an
		   * upload when clicked.
		   */
		  clickable: true,

		  /**
		   * Whether hidden files in directories should be ignored.
		   */
		  ignoreHiddenFiles: true,

		  /**
		   * The default implementation of `accept` checks the file's mime type or
		   * extension against this list. This is a comma separated list of mime
		   * types or file extensions.
		   *
		   * Eg.: `image/*,application/pdf,.psd`
		   *
		   * If the Dropzone is `clickable` this option will also be used as
		   * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
		   * parameter on the hidden file input as well.
		   */
		  acceptedFiles: null,

		  /**
		   * **Deprecated!**
		   * Use acceptedFiles instead.
		   */
		  acceptedMimeTypes: null,

		  /**
		   * If false, files will be added to the queue but the queue will not be
		   * processed automatically.
		   * This can be useful if you need some additional user input before sending
		   * files (or if you want want all files sent at once).
		   * If you're ready to send the file simply call `myDropzone.processQueue()`.
		   *
		   * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
		   * section for more information.
		   */
		  autoProcessQueue: true,

		  /**
		   * If false, files added to the dropzone will not be queued by default.
		   * You'll have to call `enqueueFile(file)` manually.
		   */
		  autoQueue: true,

		  /**
		   * If `true`, this will add a link to every file preview to remove or cancel (if
		   * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
		   * and `dictRemoveFile` options are used for the wording.
		   */
		  addRemoveLinks: false,

		  /**
		   * Defines where to display the file previews – if `null` the
		   * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
		   * selector. The element should have the `dropzone-previews` class so
		   * the previews are displayed properly.
		   */
		  previewsContainer: null,

		  /**
		   * Set this to `true` if you don't want previews to be shown.
		   */
		  disablePreviews: false,

		  /**
		   * This is the element the hidden input field (which is used when clicking on the
		   * dropzone to trigger file selection) will be appended to. This might
		   * be important in case you use frameworks to switch the content of your page.
		   *
		   * Can be a selector string, or an element directly.
		   */
		  hiddenInputContainer: "body",

		  /**
		   * If null, no capture type will be specified
		   * If camera, mobile devices will skip the file selection and choose camera
		   * If microphone, mobile devices will skip the file selection and choose the microphone
		   * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
		   * On apple devices multiple must be set to false.  AcceptedFiles may need to
		   * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
		   */
		  capture: null,

		  /**
		   * **Deprecated**. Use `renameFile` instead.
		   */
		  renameFilename: null,

		  /**
		   * A function that is invoked before the file is uploaded to the server and renames the file.
		   * This function gets the `File` as argument and can use the `file.name`. The actual name of the
		   * file that gets used during the upload can be accessed through `file.upload.filename`.
		   */
		  renameFile: null,

		  /**
		   * If `true` the fallback will be forced. This is very useful to test your server
		   * implementations first and make sure that everything works as
		   * expected without dropzone if you experience problems, and to test
		   * how your fallbacks will look.
		   */
		  forceFallback: false,

		  /**
		   * The text used before any files are dropped.
		   */
		  dictDefaultMessage: "Drop files here to upload",

		  /**
		   * The text that replaces the default message text it the browser is not supported.
		   */
		  dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",

		  /**
		   * The text that will be added before the fallback form.
		   * If you provide a  fallback element yourself, or if this option is `null` this will
		   * be ignored.
		   */
		  dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",

		  /**
		   * If the filesize is too big.
		   * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
		   */
		  dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",

		  /**
		   * If the file doesn't match the file type.
		   */
		  dictInvalidFileType: "You can't upload files of this type.",

		  /**
		   * If the server response was invalid.
		   * `{{statusCode}}` will be replaced with the servers status code.
		   */
		  dictResponseError: "Server responded with {{statusCode}} code.",

		  /**
		   * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
		   */
		  dictCancelUpload: "Cancel upload",

		  /**
		   * The text that is displayed if an upload was manually canceled
		   */
		  dictUploadCanceled: "Upload canceled.",

		  /**
		   * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
		   */
		  dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",

		  /**
		   * If `addRemoveLinks` is true, the text to be used to remove a file.
		   */
		  dictRemoveFile: "Remove file",

		  /**
		   * If this is not null, then the user will be prompted before removing a file.
		   */
		  dictRemoveFileConfirmation: null,

		  /**
		   * Displayed if `maxFiles` is st and exceeded.
		   * The string `{{maxFiles}}` will be replaced by the configuration value.
		   */
		  dictMaxFilesExceeded: "You can not upload any more files.",

		  /**
		   * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
		   * `b` for bytes.
		   */
		  dictFileSizeUnits: {
		    tb: "TB",
		    gb: "GB",
		    mb: "MB",
		    kb: "KB",
		    b: "b"
		  },

		  /**
		   * Called when dropzone initialized
		   * You can add event listeners here
		   */
		  init: function init() {},

		  /**
		   * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
		   * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
		   * of a function, this needs to return a map.
		   *
		   * The default implementation does nothing for normal uploads, but adds relevant information for
		   * chunked uploads.
		   *
		   * This is the same as adding hidden input fields in the form element.
		   */
		  params: function params(files, xhr, chunk) {
		    if (chunk) {
		      return {
		        dzuuid: chunk.file.upload.uuid,
		        dzchunkindex: chunk.index,
		        dztotalfilesize: chunk.file.size,
		        dzchunksize: this.options.chunkSize,
		        dztotalchunkcount: chunk.file.upload.totalChunkCount,
		        dzchunkbyteoffset: chunk.index * this.options.chunkSize
		      };
		    }
		  },

		  /**
		   * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
		   * and a `done` function as parameters.
		   *
		   * If the done function is invoked without arguments, the file is "accepted" and will
		   * be processed. If you pass an error message, the file is rejected, and the error
		   * message will be displayed.
		   * This function will not be called if the file is too big or doesn't match the mime types.
		   */
		  accept: function accept(file, done) {
		    return done();
		  },

		  /**
		   * The callback that will be invoked when all chunks have been uploaded for a file.
		   * It gets the file for which the chunks have been uploaded as the first parameter,
		   * and the `done` function as second. `done()` needs to be invoked when everything
		   * needed to finish the upload process is done.
		   */
		  chunksUploaded: function chunksUploaded(file, done) {
		    done();
		  },

		  /**
		   * Gets called when the browser is not supported.
		   * The default implementation shows the fallback input field and adds
		   * a text.
		   */
		  fallback: function fallback() {
		    // This code should pass in IE7... :(
		    var messageElement;
		    this.element.className = "".concat(this.element.className, " dz-browser-not-supported");

		    var _iterator = options_createForOfIteratorHelper(this.element.getElementsByTagName("div"), true),
		        _step;

		    try {
		      for (_iterator.s(); !(_step = _iterator.n()).done;) {
		        var child = _step.value;

		        if (/(^| )dz-message($| )/.test(child.className)) {
		          messageElement = child;
		          child.className = "dz-message"; // Removes the 'dz-default' class

		          break;
		        }
		      }
		    } catch (err) {
		      _iterator.e(err);
		    } finally {
		      _iterator.f();
		    }

		    if (!messageElement) {
		      messageElement = Dropzone.createElement('<div class="dz-message"><span></span></div>');
		      this.element.appendChild(messageElement);
		    }

		    var span = messageElement.getElementsByTagName("span")[0];

		    if (span) {
		      if (span.textContent != null) {
		        span.textContent = this.options.dictFallbackMessage;
		      } else if (span.innerText != null) {
		        span.innerText = this.options.dictFallbackMessage;
		      }
		    }

		    return this.element.appendChild(this.getFallbackForm());
		  },

		  /**
		   * Gets called to calculate the thumbnail dimensions.
		   *
		   * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
		   *
		   *  - `srcWidth` & `srcHeight` (required)
		   *  - `trgWidth` & `trgHeight` (required)
		   *  - `srcX` & `srcY` (optional, default `0`)
		   *  - `trgX` & `trgY` (optional, default `0`)
		   *
		   * Those values are going to be used by `ctx.drawImage()`.
		   */
		  resize: function resize(file, width, height, resizeMethod) {
		    var info = {
		      srcX: 0,
		      srcY: 0,
		      srcWidth: file.width,
		      srcHeight: file.height
		    };
		    var srcRatio = file.width / file.height; // Automatically calculate dimensions if not specified

		    if (width == null && height == null) {
		      width = info.srcWidth;
		      height = info.srcHeight;
		    } else if (width == null) {
		      width = height * srcRatio;
		    } else if (height == null) {
		      height = width / srcRatio;
		    } // Make sure images aren't upscaled


		    width = Math.min(width, info.srcWidth);
		    height = Math.min(height, info.srcHeight);
		    var trgRatio = width / height;

		    if (info.srcWidth > width || info.srcHeight > height) {
		      // Image is bigger and needs rescaling
		      if (resizeMethod === "crop") {
		        if (srcRatio > trgRatio) {
		          info.srcHeight = file.height;
		          info.srcWidth = info.srcHeight * trgRatio;
		        } else {
		          info.srcWidth = file.width;
		          info.srcHeight = info.srcWidth / trgRatio;
		        }
		      } else if (resizeMethod === "contain") {
		        // Method 'contain'
		        if (srcRatio > trgRatio) {
		          height = width / srcRatio;
		        } else {
		          width = height * srcRatio;
		        }
		      } else {
		        throw new Error("Unknown resizeMethod '".concat(resizeMethod, "'"));
		      }
		    }

		    info.srcX = (file.width - info.srcWidth) / 2;
		    info.srcY = (file.height - info.srcHeight) / 2;
		    info.trgWidth = width;
		    info.trgHeight = height;
		    return info;
		  },

		  /**
		   * Can be used to transform the file (for example, resize an image if necessary).
		   *
		   * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
		   * images according to those dimensions.
		   *
		   * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
		   * to be invoked with the file when the transformation is done.
		   */
		  transformFile: function transformFile(file, done) {
		    if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {
		      return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);
		    } else {
		      return done(file);
		    }
		  },

		  /**
		   * A string that contains the template used for each dropped
		   * file. Change it to fulfill your needs but make sure to properly
		   * provide all elements.
		   *
		   * If you want to use an actual HTML element instead of providing a String
		   * as a config option, you could create a div with the id `tpl`,
		   * put the template inside it and provide the element like this:
		   *
		   *     document
		   *       .querySelector('#tpl')
		   *       .innerHTML
		   *
		   */
		  previewTemplate: preview_template,

		  /*
		   Those functions register themselves to the events on init and handle all
		   the user interface specific stuff. Overwriting them won't break the upload
		   but can break the way it's displayed.
		   You can overwrite them if you don't like the default behavior. If you just
		   want to add an additional event handler, register it on the dropzone object
		   and don't overwrite those options.
		   */
		  // Those are self explanatory and simply concern the DragnDrop.
		  drop: function drop(e) {
		    return this.element.classList.remove("dz-drag-hover");
		  },
		  dragstart: function dragstart(e) {},
		  dragend: function dragend(e) {
		    return this.element.classList.remove("dz-drag-hover");
		  },
		  dragenter: function dragenter(e) {
		    return this.element.classList.add("dz-drag-hover");
		  },
		  dragover: function dragover(e) {
		    return this.element.classList.add("dz-drag-hover");
		  },
		  dragleave: function dragleave(e) {
		    return this.element.classList.remove("dz-drag-hover");
		  },
		  paste: function paste(e) {},
		  // Called whenever there are no files left in the dropzone anymore, and the
		  // dropzone should be displayed as if in the initial state.
		  reset: function reset() {
		    return this.element.classList.remove("dz-started");
		  },
		  // Called when a file is added to the queue
		  // Receives `file`
		  addedfile: function addedfile(file) {
		    var _this = this;

		    if (this.element === this.previewsContainer) {
		      this.element.classList.add("dz-started");
		    }

		    if (this.previewsContainer && !this.options.disablePreviews) {
		      file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
		      file.previewTemplate = file.previewElement; // Backwards compatibility

		      this.previewsContainer.appendChild(file.previewElement);

		      var _iterator2 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-name]"), true),
		          _step2;

		      try {
		        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
		          var node = _step2.value;
		          node.textContent = file.name;
		        }
		      } catch (err) {
		        _iterator2.e(err);
		      } finally {
		        _iterator2.f();
		      }

		      var _iterator3 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-size]"), true),
		          _step3;

		      try {
		        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
		          node = _step3.value;
		          node.innerHTML = this.filesize(file.size);
		        }
		      } catch (err) {
		        _iterator3.e(err);
		      } finally {
		        _iterator3.f();
		      }

		      if (this.options.addRemoveLinks) {
		        file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>".concat(this.options.dictRemoveFile, "</a>"));
		        file.previewElement.appendChild(file._removeLink);
		      }

		      var removeFileEvent = function removeFileEvent(e) {
		        e.preventDefault();
		        e.stopPropagation();

		        if (file.status === Dropzone.UPLOADING) {
		          return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function () {
		            return _this.removeFile(file);
		          });
		        } else {
		          if (_this.options.dictRemoveFileConfirmation) {
		            return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function () {
		              return _this.removeFile(file);
		            });
		          } else {
		            return _this.removeFile(file);
		          }
		        }
		      };

		      var _iterator4 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-remove]"), true),
		          _step4;

		      try {
		        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
		          var removeLink = _step4.value;
		          removeLink.addEventListener("click", removeFileEvent);
		        }
		      } catch (err) {
		        _iterator4.e(err);
		      } finally {
		        _iterator4.f();
		      }
		    }
		  },
		  // Called whenever a file is removed.
		  removedfile: function removedfile(file) {
		    if (file.previewElement != null && file.previewElement.parentNode != null) {
		      file.previewElement.parentNode.removeChild(file.previewElement);
		    }

		    return this._updateMaxFilesReachedClass();
		  },
		  // Called when a thumbnail has been generated
		  // Receives `file` and `dataUrl`
		  thumbnail: function thumbnail(file, dataUrl) {
		    if (file.previewElement) {
		      file.previewElement.classList.remove("dz-file-preview");

		      var _iterator5 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-thumbnail]"), true),
		          _step5;

		      try {
		        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
		          var thumbnailElement = _step5.value;
		          thumbnailElement.alt = file.name;
		          thumbnailElement.src = dataUrl;
		        }
		      } catch (err) {
		        _iterator5.e(err);
		      } finally {
		        _iterator5.f();
		      }

		      return setTimeout(function () {
		        return file.previewElement.classList.add("dz-image-preview");
		      }, 1);
		    }
		  },
		  // Called whenever an error occurs
		  // Receives `file` and `message`
		  error: function error(file, message) {
		    if (file.previewElement) {
		      file.previewElement.classList.add("dz-error");

		      if (typeof message !== "string" && message.error) {
		        message = message.error;
		      }

		      var _iterator6 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-errormessage]"), true),
		          _step6;

		      try {
		        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
		          var node = _step6.value;
		          node.textContent = message;
		        }
		      } catch (err) {
		        _iterator6.e(err);
		      } finally {
		        _iterator6.f();
		      }
		    }
		  },
		  errormultiple: function errormultiple() {},
		  // Called when a file gets processed. Since there is a cue, not all added
		  // files are processed immediately.
		  // Receives `file`
		  processing: function processing(file) {
		    if (file.previewElement) {
		      file.previewElement.classList.add("dz-processing");

		      if (file._removeLink) {
		        return file._removeLink.innerHTML = this.options.dictCancelUpload;
		      }
		    }
		  },
		  processingmultiple: function processingmultiple() {},
		  // Called whenever the upload progress gets updated.
		  // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.
		  // To get the total number of bytes of the file, use `file.size`
		  uploadprogress: function uploadprogress(file, progress, bytesSent) {
		    if (file.previewElement) {
		      var _iterator7 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-uploadprogress]"), true),
		          _step7;

		      try {
		        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
		          var node = _step7.value;
		          node.nodeName === "PROGRESS" ? node.value = progress : node.style.width = "".concat(progress, "%");
		        }
		      } catch (err) {
		        _iterator7.e(err);
		      } finally {
		        _iterator7.f();
		      }
		    }
		  },
		  // Called whenever the total upload progress gets updated.
		  // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent
		  totaluploadprogress: function totaluploadprogress() {},
		  // Called just before the file is sent. Gets the `xhr` object as second
		  // parameter, so you can modify it (for example to add a CSRF token) and a
		  // `formData` object to add additional information.
		  sending: function sending() {},
		  sendingmultiple: function sendingmultiple() {},
		  // When the complete upload is finished and successful
		  // Receives `file`
		  success: function success(file) {
		    if (file.previewElement) {
		      return file.previewElement.classList.add("dz-success");
		    }
		  },
		  successmultiple: function successmultiple() {},
		  // When the upload is canceled.
		  canceled: function canceled(file) {
		    return this.emit("error", file, this.options.dictUploadCanceled);
		  },
		  canceledmultiple: function canceledmultiple() {},
		  // When the upload is finished, either with success or an error.
		  // Receives `file`
		  complete: function complete(file) {
		    if (file._removeLink) {
		      file._removeLink.innerHTML = this.options.dictRemoveFile;
		    }

		    if (file.previewElement) {
		      return file.previewElement.classList.add("dz-complete");
		    }
		  },
		  completemultiple: function completemultiple() {},
		  maxfilesexceeded: function maxfilesexceeded() {},
		  maxfilesreached: function maxfilesreached() {},
		  queuecomplete: function queuecomplete() {},
		  addedfiles: function addedfiles() {}
		};
		/* harmony default export */ var src_options = (defaultOptions);
		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }















































		function dropzone_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = dropzone_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function dropzone_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dropzone_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dropzone_arrayLikeToArray(o, minLen); }

		function dropzone_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function dropzone_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function dropzone_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function dropzone_createClass(Constructor, protoProps, staticProps) { if (protoProps) dropzone_defineProperties(Constructor.prototype, protoProps); if (staticProps) dropzone_defineProperties(Constructor, staticProps); return Constructor; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




		var Dropzone = /*#__PURE__*/function (_Emitter) {
		  _inherits(Dropzone, _Emitter);

		  var _super = _createSuper(Dropzone);

		  function Dropzone(el, options) {
		    var _this;

		    dropzone_classCallCheck(this, Dropzone);

		    _this = _super.call(this);
		    var fallback, left;
		    _this.element = el; // For backwards compatibility since the version was in the prototype previously

		    _this.version = Dropzone.version;
		    _this.clickableElements = [];
		    _this.listeners = [];
		    _this.files = []; // All files

		    if (typeof _this.element === "string") {
		      _this.element = document.querySelector(_this.element);
		    } // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.


		    if (!_this.element || _this.element.nodeType == null) {
		      throw new Error("Invalid dropzone element.");
		    }

		    if (_this.element.dropzone) {
		      throw new Error("Dropzone already attached.");
		    } // Now add this dropzone to the instances.


		    Dropzone.instances.push(_assertThisInitialized(_this)); // Put the dropzone inside the element itself.

		    _this.element.dropzone = _assertThisInitialized(_this);
		    var elementOptions = (left = Dropzone.optionsForElement(_this.element)) != null ? left : {};
		    _this.options = Dropzone.extend({}, src_options, elementOptions, options != null ? options : {});
		    _this.options.previewTemplate = _this.options.previewTemplate.replace(/\n*/g, ""); // If the browser failed, just call the fallback and leave

		    if (_this.options.forceFallback || !Dropzone.isBrowserSupported()) {
		      return _possibleConstructorReturn(_this, _this.options.fallback.call(_assertThisInitialized(_this)));
		    } // @options.url = @element.getAttribute "action" unless @options.url?


		    if (_this.options.url == null) {
		      _this.options.url = _this.element.getAttribute("action");
		    }

		    if (!_this.options.url) {
		      throw new Error("No URL provided.");
		    }

		    if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {
		      throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
		    }

		    if (_this.options.uploadMultiple && _this.options.chunking) {
		      throw new Error("You cannot set both: uploadMultiple and chunking.");
		    } // Backwards compatibility


		    if (_this.options.acceptedMimeTypes) {
		      _this.options.acceptedFiles = _this.options.acceptedMimeTypes;
		      delete _this.options.acceptedMimeTypes;
		    } // Backwards compatibility


		    if (_this.options.renameFilename != null) {
		      _this.options.renameFile = function (file) {
		        return _this.options.renameFilename.call(_assertThisInitialized(_this), file.name, file);
		      };
		    }

		    if (typeof _this.options.method === "string") {
		      _this.options.method = _this.options.method.toUpperCase();
		    }

		    if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {
		      // Remove the fallback
		      fallback.parentNode.removeChild(fallback);
		    } // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false


		    if (_this.options.previewsContainer !== false) {
		      if (_this.options.previewsContainer) {
		        _this.previewsContainer = Dropzone.getElement(_this.options.previewsContainer, "previewsContainer");
		      } else {
		        _this.previewsContainer = _this.element;
		      }
		    }

		    if (_this.options.clickable) {
		      if (_this.options.clickable === true) {
		        _this.clickableElements = [_this.element];
		      } else {
		        _this.clickableElements = Dropzone.getElements(_this.options.clickable, "clickable");
		      }
		    }

		    _this.init();

		    return _this;
		  } // Returns all files that have been accepted


		  dropzone_createClass(Dropzone, [{
		    key: "getAcceptedFiles",
		    value: function getAcceptedFiles() {
		      return this.files.filter(function (file) {
		        return file.accepted;
		      }).map(function (file) {
		        return file;
		      });
		    } // Returns all files that have been rejected
		    // Not sure when that's going to be useful, but added for completeness.

		  }, {
		    key: "getRejectedFiles",
		    value: function getRejectedFiles() {
		      return this.files.filter(function (file) {
		        return !file.accepted;
		      }).map(function (file) {
		        return file;
		      });
		    }
		  }, {
		    key: "getFilesWithStatus",
		    value: function getFilesWithStatus(status) {
		      return this.files.filter(function (file) {
		        return file.status === status;
		      }).map(function (file) {
		        return file;
		      });
		    } // Returns all files that are in the queue

		  }, {
		    key: "getQueuedFiles",
		    value: function getQueuedFiles() {
		      return this.getFilesWithStatus(Dropzone.QUEUED);
		    }
		  }, {
		    key: "getUploadingFiles",
		    value: function getUploadingFiles() {
		      return this.getFilesWithStatus(Dropzone.UPLOADING);
		    }
		  }, {
		    key: "getAddedFiles",
		    value: function getAddedFiles() {
		      return this.getFilesWithStatus(Dropzone.ADDED);
		    } // Files that are either queued or uploading

		  }, {
		    key: "getActiveFiles",
		    value: function getActiveFiles() {
		      return this.files.filter(function (file) {
		        return file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED;
		      }).map(function (file) {
		        return file;
		      });
		    } // The function that gets called when Dropzone is initialized. You
		    // can (and should) setup event listeners inside this function.

		  }, {
		    key: "init",
		    value: function init() {
		      var _this2 = this;

		      // In case it isn't set already
		      if (this.element.tagName === "form") {
		        this.element.setAttribute("enctype", "multipart/form-data");
		      }

		      if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
		        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><button class=\"dz-button\" type=\"button\">".concat(this.options.dictDefaultMessage, "</button></div>")));
		      }

		      if (this.clickableElements.length) {
		        var setupHiddenFileInput = function setupHiddenFileInput() {
		          if (_this2.hiddenFileInput) {
		            _this2.hiddenFileInput.parentNode.removeChild(_this2.hiddenFileInput);
		          }

		          _this2.hiddenFileInput = document.createElement("input");

		          _this2.hiddenFileInput.setAttribute("type", "file");

		          if (_this2.options.maxFiles === null || _this2.options.maxFiles > 1) {
		            _this2.hiddenFileInput.setAttribute("multiple", "multiple");
		          }

		          _this2.hiddenFileInput.className = "dz-hidden-input";

		          if (_this2.options.acceptedFiles !== null) {
		            _this2.hiddenFileInput.setAttribute("accept", _this2.options.acceptedFiles);
		          }

		          if (_this2.options.capture !== null) {
		            _this2.hiddenFileInput.setAttribute("capture", _this2.options.capture);
		          } // Making sure that no one can "tab" into this field.


		          _this2.hiddenFileInput.setAttribute("tabindex", "-1"); // Not setting `display="none"` because some browsers don't accept clicks
		          // on elements that aren't displayed.


		          _this2.hiddenFileInput.style.visibility = "hidden";
		          _this2.hiddenFileInput.style.position = "absolute";
		          _this2.hiddenFileInput.style.top = "0";
		          _this2.hiddenFileInput.style.left = "0";
		          _this2.hiddenFileInput.style.height = "0";
		          _this2.hiddenFileInput.style.width = "0";
		          Dropzone.getElement(_this2.options.hiddenInputContainer, "hiddenInputContainer").appendChild(_this2.hiddenFileInput);

		          _this2.hiddenFileInput.addEventListener("change", function () {
		            var files = _this2.hiddenFileInput.files;

		            if (files.length) {
		              var _iterator = dropzone_createForOfIteratorHelper(files, true),
		                  _step;

		              try {
		                for (_iterator.s(); !(_step = _iterator.n()).done;) {
		                  var file = _step.value;

		                  _this2.addFile(file);
		                }
		              } catch (err) {
		                _iterator.e(err);
		              } finally {
		                _iterator.f();
		              }
		            }

		            _this2.emit("addedfiles", files);

		            setupHiddenFileInput();
		          });
		        };

		        setupHiddenFileInput();
		      }

		      this.URL = window.URL !== null ? window.URL : window.webkitURL; // Setup all event listeners on the Dropzone object itself.
		      // They're not in @setupEventListeners() because they shouldn't be removed
		      // again when the dropzone gets disabled.

		      var _iterator2 = dropzone_createForOfIteratorHelper(this.events, true),
		          _step2;

		      try {
		        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
		          var eventName = _step2.value;
		          this.on(eventName, this.options[eventName]);
		        }
		      } catch (err) {
		        _iterator2.e(err);
		      } finally {
		        _iterator2.f();
		      }

		      this.on("uploadprogress", function () {
		        return _this2.updateTotalUploadProgress();
		      });
		      this.on("removedfile", function () {
		        return _this2.updateTotalUploadProgress();
		      });
		      this.on("canceled", function (file) {
		        return _this2.emit("complete", file);
		      }); // Emit a `queuecomplete` event if all files finished uploading.

		      this.on("complete", function (file) {
		        if (_this2.getAddedFiles().length === 0 && _this2.getUploadingFiles().length === 0 && _this2.getQueuedFiles().length === 0) {
		          // This needs to be deferred so that `queuecomplete` really triggers after `complete`
		          return setTimeout(function () {
		            return _this2.emit("queuecomplete");
		          }, 0);
		        }
		      });

		      var containsFiles = function containsFiles(e) {
		        if (e.dataTransfer.types) {
		          // Because e.dataTransfer.types is an Object in
		          // IE, we need to iterate like this instead of
		          // using e.dataTransfer.types.some()
		          for (var i = 0; i < e.dataTransfer.types.length; i++) {
		            if (e.dataTransfer.types[i] === "Files") return true;
		          }
		        }

		        return false;
		      };

		      var noPropagation = function noPropagation(e) {
		        // If there are no files, we don't want to stop
		        // propagation so we don't interfere with other
		        // drag and drop behaviour.
		        if (!containsFiles(e)) return;
		        e.stopPropagation();

		        if (e.preventDefault) {
		          return e.preventDefault();
		        } else {
		          return e.returnValue = false;
		        }
		      }; // Create the listeners


		      this.listeners = [{
		        element: this.element,
		        events: {
		          dragstart: function dragstart(e) {
		            return _this2.emit("dragstart", e);
		          },
		          dragenter: function dragenter(e) {
		            noPropagation(e);
		            return _this2.emit("dragenter", e);
		          },
		          dragover: function dragover(e) {
		            // Makes it possible to drag files from chrome's download bar
		            // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar
		            // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)
		            var efct;

		            try {
		              efct = e.dataTransfer.effectAllowed;
		            } catch (error) {}

		            e.dataTransfer.dropEffect = "move" === efct || "linkMove" === efct ? "move" : "copy";
		            noPropagation(e);
		            return _this2.emit("dragover", e);
		          },
		          dragleave: function dragleave(e) {
		            return _this2.emit("dragleave", e);
		          },
		          drop: function drop(e) {
		            noPropagation(e);
		            return _this2.drop(e);
		          },
		          dragend: function dragend(e) {
		            return _this2.emit("dragend", e);
		          }
		        } // This is disabled right now, because the browsers don't implement it properly.
		        // "paste": (e) =>
		        //   noPropagation e
		        //   @paste e

		      }];
		      this.clickableElements.forEach(function (clickableElement) {
		        return _this2.listeners.push({
		          element: clickableElement,
		          events: {
		            click: function click(evt) {
		              // Only the actual dropzone or the message element should trigger file selection
		              if (clickableElement !== _this2.element || evt.target === _this2.element || Dropzone.elementInside(evt.target, _this2.element.querySelector(".dz-message"))) {
		                _this2.hiddenFileInput.click(); // Forward the click

		              }

		              return true;
		            }
		          }
		        });
		      });
		      this.enable();
		      return this.options.init.call(this);
		    } // Not fully tested yet

		  }, {
		    key: "destroy",
		    value: function destroy() {
		      this.disable();
		      this.removeAllFiles(true);

		      if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {
		        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
		        this.hiddenFileInput = null;
		      }

		      delete this.element.dropzone;
		      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
		    }
		  }, {
		    key: "updateTotalUploadProgress",
		    value: function updateTotalUploadProgress() {
		      var totalUploadProgress;
		      var totalBytesSent = 0;
		      var totalBytes = 0;
		      var activeFiles = this.getActiveFiles();

		      if (activeFiles.length) {
		        var _iterator3 = dropzone_createForOfIteratorHelper(this.getActiveFiles(), true),
		            _step3;

		        try {
		          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
		            var file = _step3.value;
		            totalBytesSent += file.upload.bytesSent;
		            totalBytes += file.upload.total;
		          }
		        } catch (err) {
		          _iterator3.e(err);
		        } finally {
		          _iterator3.f();
		        }

		        totalUploadProgress = 100 * totalBytesSent / totalBytes;
		      } else {
		        totalUploadProgress = 100;
		      }

		      return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
		    } // @options.paramName can be a function taking one parameter rather than a string.
		    // A parameter name for a file is obtained simply by calling this with an index number.

		  }, {
		    key: "_getParamName",
		    value: function _getParamName(n) {
		      if (typeof this.options.paramName === "function") {
		        return this.options.paramName(n);
		      } else {
		        return "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(n, "]") : "");
		      }
		    } // If @options.renameFile is a function,
		    // the function will be used to rename the file.name before appending it to the formData

		  }, {
		    key: "_renameFile",
		    value: function _renameFile(file) {
		      if (typeof this.options.renameFile !== "function") {
		        return file.name;
		      }

		      return this.options.renameFile(file);
		    } // Returns a form that can be used as fallback if the browser does not support DragnDrop
		    //
		    // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.
		    // This code has to pass in IE7 :(

		  }, {
		    key: "getFallbackForm",
		    value: function getFallbackForm() {
		      var existingFallback, form;

		      if (existingFallback = this.getExistingFallback()) {
		        return existingFallback;
		      }

		      var fieldsString = '<div class="dz-fallback">';

		      if (this.options.dictFallbackText) {
		        fieldsString += "<p>".concat(this.options.dictFallbackText, "</p>");
		      }

		      fieldsString += "<input type=\"file\" name=\"".concat(this._getParamName(0), "\" ").concat(this.options.uploadMultiple ? 'multiple="multiple"' : undefined, " /><input type=\"submit\" value=\"Upload!\"></div>");
		      var fields = Dropzone.createElement(fieldsString);

		      if (this.element.tagName !== "FORM") {
		        form = Dropzone.createElement("<form action=\"".concat(this.options.url, "\" enctype=\"multipart/form-data\" method=\"").concat(this.options.method, "\"></form>"));
		        form.appendChild(fields);
		      } else {
		        // Make sure that the enctype and method attributes are set properly
		        this.element.setAttribute("enctype", "multipart/form-data");
		        this.element.setAttribute("method", this.options.method);
		      }

		      return form != null ? form : fields;
		    } // Returns the fallback elements if they exist already
		    //
		    // This code has to pass in IE7 :(

		  }, {
		    key: "getExistingFallback",
		    value: function getExistingFallback() {
		      var getFallback = function getFallback(elements) {
		        var _iterator4 = dropzone_createForOfIteratorHelper(elements, true),
		            _step4;

		        try {
		          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
		            var el = _step4.value;

		            if (/(^| )fallback($| )/.test(el.className)) {
		              return el;
		            }
		          }
		        } catch (err) {
		          _iterator4.e(err);
		        } finally {
		          _iterator4.f();
		        }
		      };

		      for (var _i = 0, _arr = ["div", "form"]; _i < _arr.length; _i++) {
		        var tagName = _arr[_i];
		        var fallback;

		        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
		          return fallback;
		        }
		      }
		    } // Activates all listeners stored in @listeners

		  }, {
		    key: "setupEventListeners",
		    value: function setupEventListeners() {
		      return this.listeners.map(function (elementListeners) {
		        return function () {
		          var result = [];

		          for (var event in elementListeners.events) {
		            var listener = elementListeners.events[event];
		            result.push(elementListeners.element.addEventListener(event, listener, false));
		          }

		          return result;
		        }();
		      });
		    } // Deactivates all listeners stored in @listeners

		  }, {
		    key: "removeEventListeners",
		    value: function removeEventListeners() {
		      return this.listeners.map(function (elementListeners) {
		        return function () {
		          var result = [];

		          for (var event in elementListeners.events) {
		            var listener = elementListeners.events[event];
		            result.push(elementListeners.element.removeEventListener(event, listener, false));
		          }

		          return result;
		        }();
		      });
		    } // Removes all event listeners and cancels all files in the queue or being processed.

		  }, {
		    key: "disable",
		    value: function disable() {
		      var _this3 = this;

		      this.clickableElements.forEach(function (element) {
		        return element.classList.remove("dz-clickable");
		      });
		      this.removeEventListeners();
		      this.disabled = true;
		      return this.files.map(function (file) {
		        return _this3.cancelUpload(file);
		      });
		    }
		  }, {
		    key: "enable",
		    value: function enable() {
		      delete this.disabled;
		      this.clickableElements.forEach(function (element) {
		        return element.classList.add("dz-clickable");
		      });
		      return this.setupEventListeners();
		    } // Returns a nicely formatted filesize

		  }, {
		    key: "filesize",
		    value: function filesize(size) {
		      var selectedSize = 0;
		      var selectedUnit = "b";

		      if (size > 0) {
		        var units = ["tb", "gb", "mb", "kb", "b"];

		        for (var i = 0; i < units.length; i++) {
		          var unit = units[i];
		          var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;

		          if (size >= cutoff) {
		            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
		            selectedUnit = unit;
		            break;
		          }
		        }

		        selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits
		      }

		      return "<strong>".concat(selectedSize, "</strong> ").concat(this.options.dictFileSizeUnits[selectedUnit]);
		    } // Adds or removes the `dz-max-files-reached` class from the form.

		  }, {
		    key: "_updateMaxFilesReachedClass",
		    value: function _updateMaxFilesReachedClass() {
		      if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
		        if (this.getAcceptedFiles().length === this.options.maxFiles) {
		          this.emit("maxfilesreached", this.files);
		        }

		        return this.element.classList.add("dz-max-files-reached");
		      } else {
		        return this.element.classList.remove("dz-max-files-reached");
		      }
		    }
		  }, {
		    key: "drop",
		    value: function drop(e) {
		      if (!e.dataTransfer) {
		        return;
		      }

		      this.emit("drop", e); // Convert the FileList to an Array
		      // This is necessary for IE11

		      var files = [];

		      for (var i = 0; i < e.dataTransfer.files.length; i++) {
		        files[i] = e.dataTransfer.files[i];
		      } // Even if it's a folder, files.length will contain the folders.


		      if (files.length) {
		        var items = e.dataTransfer.items;

		        if (items && items.length && items[0].webkitGetAsEntry != null) {
		          // The browser supports dropping of folders, so handle items instead of files
		          this._addFilesFromItems(items);
		        } else {
		          this.handleFiles(files);
		        }
		      }

		      this.emit("addedfiles", files);
		    }
		  }, {
		    key: "paste",
		    value: function paste(e) {
		      if (__guard__(e != null ? e.clipboardData : undefined, function (x) {
		        return x.items;
		      }) == null) {
		        return;
		      }

		      this.emit("paste", e);
		      var items = e.clipboardData.items;

		      if (items.length) {
		        return this._addFilesFromItems(items);
		      }
		    }
		  }, {
		    key: "handleFiles",
		    value: function handleFiles(files) {
		      var _iterator5 = dropzone_createForOfIteratorHelper(files, true),
		          _step5;

		      try {
		        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
		          var file = _step5.value;
		          this.addFile(file);
		        }
		      } catch (err) {
		        _iterator5.e(err);
		      } finally {
		        _iterator5.f();
		      }
		    } // When a folder is dropped (or files are pasted), items must be handled
		    // instead of files.

		  }, {
		    key: "_addFilesFromItems",
		    value: function _addFilesFromItems(items) {
		      var _this4 = this;

		      return function () {
		        var result = [];

		        var _iterator6 = dropzone_createForOfIteratorHelper(items, true),
		            _step6;

		        try {
		          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
		            var item = _step6.value;
		            var entry;

		            if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {
		              if (entry.isFile) {
		                result.push(_this4.addFile(item.getAsFile()));
		              } else if (entry.isDirectory) {
		                // Append all files from that directory to files
		                result.push(_this4._addFilesFromDirectory(entry, entry.name));
		              } else {
		                result.push(undefined);
		              }
		            } else if (item.getAsFile != null) {
		              if (item.kind == null || item.kind === "file") {
		                result.push(_this4.addFile(item.getAsFile()));
		              } else {
		                result.push(undefined);
		              }
		            } else {
		              result.push(undefined);
		            }
		          }
		        } catch (err) {
		          _iterator6.e(err);
		        } finally {
		          _iterator6.f();
		        }

		        return result;
		      }();
		    } // Goes through the directory, and adds each file it finds recursively

		  }, {
		    key: "_addFilesFromDirectory",
		    value: function _addFilesFromDirectory(directory, path) {
		      var _this5 = this;

		      var dirReader = directory.createReader();

		      var errorHandler = function errorHandler(error) {
		        return __guardMethod__(console, "log", function (o) {
		          return o.log(error);
		        });
		      };

		      var readEntries = function readEntries() {
		        return dirReader.readEntries(function (entries) {
		          if (entries.length > 0) {
		            var _iterator7 = dropzone_createForOfIteratorHelper(entries, true),
		                _step7;

		            try {
		              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
		                var entry = _step7.value;

		                if (entry.isFile) {
		                  entry.file(function (file) {
		                    if (_this5.options.ignoreHiddenFiles && file.name.substring(0, 1) === ".") {
		                      return;
		                    }

		                    file.fullPath = "".concat(path, "/").concat(file.name);
		                    return _this5.addFile(file);
		                  });
		                } else if (entry.isDirectory) {
		                  _this5._addFilesFromDirectory(entry, "".concat(path, "/").concat(entry.name));
		                }
		              } // Recursively call readEntries() again, since browser only handle
		              // the first 100 entries.
		              // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries

		            } catch (err) {
		              _iterator7.e(err);
		            } finally {
		              _iterator7.f();
		            }

		            readEntries();
		          }

		          return null;
		        }, errorHandler);
		      };

		      return readEntries();
		    } // If `done()` is called without argument the file is accepted
		    // If you call it with an error message, the file is rejected
		    // (This allows for asynchronous validation)
		    //
		    // This function checks the filesize, and if the file.type passes the
		    // `acceptedFiles` check.

		  }, {
		    key: "accept",
		    value: function accept(file, done) {
		      if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1024 * 1024) {
		        done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
		      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
		        done(this.options.dictInvalidFileType);
		      } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
		        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
		        this.emit("maxfilesexceeded", file);
		      } else {
		        this.options.accept.call(this, file, done);
		      }
		    }
		  }, {
		    key: "addFile",
		    value: function addFile(file) {
		      var _this6 = this;

		      file.upload = {
		        uuid: Dropzone.uuidv4(),
		        progress: 0,
		        // Setting the total upload size to file.size for the beginning
		        // It's actual different than the size to be transmitted.
		        total: file.size,
		        bytesSent: 0,
		        filename: this._renameFile(file) // Not setting chunking information here, because the acutal data — and
		        // thus the chunks — might change if `options.transformFile` is set
		        // and does something to the data.

		      };
		      this.files.push(file);
		      file.status = Dropzone.ADDED;
		      this.emit("addedfile", file);

		      this._enqueueThumbnail(file);

		      this.accept(file, function (error) {
		        if (error) {
		          file.accepted = false;

		          _this6._errorProcessing([file], error); // Will set the file.status

		        } else {
		          file.accepted = true;

		          if (_this6.options.autoQueue) {
		            _this6.enqueueFile(file);
		          } // Will set .accepted = true

		        }

		        _this6._updateMaxFilesReachedClass();
		      });
		    } // Wrapper for enqueueFile

		  }, {
		    key: "enqueueFiles",
		    value: function enqueueFiles(files) {
		      var _iterator8 = dropzone_createForOfIteratorHelper(files, true),
		          _step8;

		      try {
		        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
		          var file = _step8.value;
		          this.enqueueFile(file);
		        }
		      } catch (err) {
		        _iterator8.e(err);
		      } finally {
		        _iterator8.f();
		      }

		      return null;
		    }
		  }, {
		    key: "enqueueFile",
		    value: function enqueueFile(file) {
		      var _this7 = this;

		      if (file.status === Dropzone.ADDED && file.accepted === true) {
		        file.status = Dropzone.QUEUED;

		        if (this.options.autoProcessQueue) {
		          return setTimeout(function () {
		            return _this7.processQueue();
		          }, 0); // Deferring the call
		        }
		      } else {
		        throw new Error("This file can't be queued because it has already been processed or was rejected.");
		      }
		    }
		  }, {
		    key: "_enqueueThumbnail",
		    value: function _enqueueThumbnail(file) {
		      var _this8 = this;

		      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
		        this._thumbnailQueue.push(file);

		        return setTimeout(function () {
		          return _this8._processThumbnailQueue();
		        }, 0); // Deferring the call
		      }
		    }
		  }, {
		    key: "_processThumbnailQueue",
		    value: function _processThumbnailQueue() {
		      var _this9 = this;

		      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
		        return;
		      }

		      this._processingThumbnail = true;

		      var file = this._thumbnailQueue.shift();

		      return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (dataUrl) {
		        _this9.emit("thumbnail", file, dataUrl);

		        _this9._processingThumbnail = false;
		        return _this9._processThumbnailQueue();
		      });
		    } // Can be called by the user to remove a file

		  }, {
		    key: "removeFile",
		    value: function removeFile(file) {
		      if (file.status === Dropzone.UPLOADING) {
		        this.cancelUpload(file);
		      }

		      this.files = without(this.files, file);
		      this.emit("removedfile", file);

		      if (this.files.length === 0) {
		        return this.emit("reset");
		      }
		    } // Removes all files that aren't currently processed from the list

		  }, {
		    key: "removeAllFiles",
		    value: function removeAllFiles(cancelIfNecessary) {
		      // Create a copy of files since removeFile() changes the @files array.
		      if (cancelIfNecessary == null) {
		        cancelIfNecessary = false;
		      }

		      var _iterator9 = dropzone_createForOfIteratorHelper(this.files.slice(), true),
		          _step9;

		      try {
		        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
		          var file = _step9.value;

		          if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
		            this.removeFile(file);
		          }
		        }
		      } catch (err) {
		        _iterator9.e(err);
		      } finally {
		        _iterator9.f();
		      }

		      return null;
		    } // Resizes an image before it gets sent to the server. This function is the default behavior of
		    // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with
		    // the resized blob.

		  }, {
		    key: "resizeImage",
		    value: function resizeImage(file, width, height, resizeMethod, callback) {
		      var _this10 = this;

		      return this.createThumbnail(file, width, height, resizeMethod, true, function (dataUrl, canvas) {
		        if (canvas == null) {
		          // The image has not been resized
		          return callback(file);
		        } else {
		          var resizeMimeType = _this10.options.resizeMimeType;

		          if (resizeMimeType == null) {
		            resizeMimeType = file.type;
		          }

		          var resizedDataURL = canvas.toDataURL(resizeMimeType, _this10.options.resizeQuality);

		          if (resizeMimeType === "image/jpeg" || resizeMimeType === "image/jpg") {
		            // Now add the original EXIF information
		            resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);
		          }

		          return callback(Dropzone.dataURItoBlob(resizedDataURL));
		        }
		      });
		    }
		  }, {
		    key: "createThumbnail",
		    value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {
		      var _this11 = this;

		      var fileReader = new FileReader();

		      fileReader.onload = function () {
		        file.dataURL = fileReader.result; // Don't bother creating a thumbnail for SVG images since they're vector

		        if (file.type === "image/svg+xml") {
		          if (callback != null) {
		            callback(fileReader.result);
		          }

		          return;
		        }

		        _this11.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);
		      };

		      fileReader.readAsDataURL(file);
		    } // `mockFile` needs to have these attributes:
		    //
		    //     { name: 'name', size: 12345, imageUrl: '' }
		    //
		    // `callback` will be invoked when the image has been downloaded and displayed.
		    // `crossOrigin` will be added to the `img` tag when accessing the file.

		  }, {
		    key: "displayExistingFile",
		    value: function displayExistingFile(mockFile, imageUrl, callback, crossOrigin) {
		      var _this12 = this;

		      var resizeThumbnail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
		      this.emit("addedfile", mockFile);
		      this.emit("complete", mockFile);

		      if (!resizeThumbnail) {
		        this.emit("thumbnail", mockFile, imageUrl);
		        if (callback) callback();
		      } else {
		        var onDone = function onDone(thumbnail) {
		          _this12.emit("thumbnail", mockFile, thumbnail);

		          if (callback) callback();
		        };

		        mockFile.dataURL = imageUrl;
		        this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, onDone, crossOrigin);
		      }
		    }
		  }, {
		    key: "createThumbnailFromUrl",
		    value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {
		      var _this13 = this;

		      // Not using `new Image` here because of a bug in latest Chrome versions.
		      // See https://github.com/enyo/dropzone/pull/226
		      var img = document.createElement("img");

		      if (crossOrigin) {
		        img.crossOrigin = crossOrigin;
		      } // fixOrientation is not needed anymore with browsers handling imageOrientation


		      fixOrientation = getComputedStyle(document.body)["imageOrientation"] == "from-image" ? false : fixOrientation;

		      img.onload = function () {
		        var loadExif = function loadExif(callback) {
		          return callback(1);
		        };

		        if (typeof EXIF !== "undefined" && EXIF !== null && fixOrientation) {
		          loadExif = function loadExif(callback) {
		            return EXIF.getData(img, function () {
		              return callback(EXIF.getTag(this, "Orientation"));
		            });
		          };
		        }

		        return loadExif(function (orientation) {
		          file.width = img.width;
		          file.height = img.height;

		          var resizeInfo = _this13.options.resize.call(_this13, file, width, height, resizeMethod);

		          var canvas = document.createElement("canvas");
		          var ctx = canvas.getContext("2d");
		          canvas.width = resizeInfo.trgWidth;
		          canvas.height = resizeInfo.trgHeight;

		          if (orientation > 4) {
		            canvas.width = resizeInfo.trgHeight;
		            canvas.height = resizeInfo.trgWidth;
		          }

		          switch (orientation) {
		            case 2:
		              // horizontal flip
		              ctx.translate(canvas.width, 0);
		              ctx.scale(-1, 1);
		              break;

		            case 3:
		              // 180° rotate left
		              ctx.translate(canvas.width, canvas.height);
		              ctx.rotate(Math.PI);
		              break;

		            case 4:
		              // vertical flip
		              ctx.translate(0, canvas.height);
		              ctx.scale(1, -1);
		              break;

		            case 5:
		              // vertical flip + 90 rotate right
		              ctx.rotate(0.5 * Math.PI);
		              ctx.scale(1, -1);
		              break;

		            case 6:
		              // 90° rotate right
		              ctx.rotate(0.5 * Math.PI);
		              ctx.translate(0, -canvas.width);
		              break;

		            case 7:
		              // horizontal flip + 90 rotate right
		              ctx.rotate(0.5 * Math.PI);
		              ctx.translate(canvas.height, -canvas.width);
		              ctx.scale(-1, 1);
		              break;

		            case 8:
		              // 90° rotate left
		              ctx.rotate(-0.5 * Math.PI);
		              ctx.translate(-canvas.height, 0);
		              break;
		          } // This is a bugfix for iOS' scaling bug.


		          drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
		          var thumbnail = canvas.toDataURL("image/png");

		          if (callback != null) {
		            return callback(thumbnail, canvas);
		          }
		        });
		      };

		      if (callback != null) {
		        img.onerror = callback;
		      }

		      return img.src = file.dataURL;
		    } // Goes through the queue and processes files if there aren't too many already.

		  }, {
		    key: "processQueue",
		    value: function processQueue() {
		      var parallelUploads = this.options.parallelUploads;
		      var processingLength = this.getUploadingFiles().length;
		      var i = processingLength; // There are already at least as many files uploading than should be

		      if (processingLength >= parallelUploads) {
		        return;
		      }

		      var queuedFiles = this.getQueuedFiles();

		      if (!(queuedFiles.length > 0)) {
		        return;
		      }

		      if (this.options.uploadMultiple) {
		        // The files should be uploaded in one request
		        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
		      } else {
		        while (i < parallelUploads) {
		          if (!queuedFiles.length) {
		            return;
		          } // Nothing left to process


		          this.processFile(queuedFiles.shift());
		          i++;
		        }
		      }
		    } // Wrapper for `processFiles`

		  }, {
		    key: "processFile",
		    value: function processFile(file) {
		      return this.processFiles([file]);
		    } // Loads the file, then calls finishedLoading()

		  }, {
		    key: "processFiles",
		    value: function processFiles(files) {
		      var _iterator10 = dropzone_createForOfIteratorHelper(files, true),
		          _step10;

		      try {
		        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
		          var file = _step10.value;
		          file.processing = true; // Backwards compatibility

		          file.status = Dropzone.UPLOADING;
		          this.emit("processing", file);
		        }
		      } catch (err) {
		        _iterator10.e(err);
		      } finally {
		        _iterator10.f();
		      }

		      if (this.options.uploadMultiple) {
		        this.emit("processingmultiple", files);
		      }

		      return this.uploadFiles(files);
		    }
		  }, {
		    key: "_getFilesWithXhr",
		    value: function _getFilesWithXhr(xhr) {
		      return this.files.filter(function (file) {
		        return file.xhr === xhr;
		      }).map(function (file) {
		        return file;
		      });
		    } // Cancels the file upload and sets the status to CANCELED
		    // **if** the file is actually being uploaded.
		    // If it's still in the queue, the file is being removed from it and the status
		    // set to CANCELED.

		  }, {
		    key: "cancelUpload",
		    value: function cancelUpload(file) {
		      if (file.status === Dropzone.UPLOADING) {
		        var groupedFiles = this._getFilesWithXhr(file.xhr);

		        var _iterator11 = dropzone_createForOfIteratorHelper(groupedFiles, true),
		            _step11;

		        try {
		          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
		            var groupedFile = _step11.value;
		            groupedFile.status = Dropzone.CANCELED;
		          }
		        } catch (err) {
		          _iterator11.e(err);
		        } finally {
		          _iterator11.f();
		        }

		        if (typeof file.xhr !== "undefined") {
		          file.xhr.abort();
		        }

		        var _iterator12 = dropzone_createForOfIteratorHelper(groupedFiles, true),
		            _step12;

		        try {
		          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
		            var _groupedFile = _step12.value;
		            this.emit("canceled", _groupedFile);
		          }
		        } catch (err) {
		          _iterator12.e(err);
		        } finally {
		          _iterator12.f();
		        }

		        if (this.options.uploadMultiple) {
		          this.emit("canceledmultiple", groupedFiles);
		        }
		      } else if (file.status === Dropzone.ADDED || file.status === Dropzone.QUEUED) {
		        file.status = Dropzone.CANCELED;
		        this.emit("canceled", file);

		        if (this.options.uploadMultiple) {
		          this.emit("canceledmultiple", [file]);
		        }
		      }

		      if (this.options.autoProcessQueue) {
		        return this.processQueue();
		      }
		    }
		  }, {
		    key: "resolveOption",
		    value: function resolveOption(option) {
		      if (typeof option === "function") {
		        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		          args[_key - 1] = arguments[_key];
		        }

		        return option.apply(this, args);
		      }

		      return option;
		    }
		  }, {
		    key: "uploadFile",
		    value: function uploadFile(file) {
		      return this.uploadFiles([file]);
		    }
		  }, {
		    key: "uploadFiles",
		    value: function uploadFiles(files) {
		      var _this14 = this;

		      this._transformFiles(files, function (transformedFiles) {
		        if (_this14.options.chunking) {
		          // Chunking is not allowed to be used with `uploadMultiple` so we know
		          // that there is only __one__file.
		          var transformedFile = transformedFiles[0];
		          files[0].upload.chunked = _this14.options.chunking && (_this14.options.forceChunking || transformedFile.size > _this14.options.chunkSize);
		          files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / _this14.options.chunkSize);
		        }

		        if (files[0].upload.chunked) {
		          // This file should be sent in chunks!
		          // If the chunking option is set, we **know** that there can only be **one** file, since
		          // uploadMultiple is not allowed with this option.
		          var file = files[0];
		          var _transformedFile = transformedFiles[0];
		          file.upload.chunks = [];

		          var handleNextChunk = function handleNextChunk() {
		            var chunkIndex = 0; // Find the next item in file.upload.chunks that is not defined yet.

		            while (file.upload.chunks[chunkIndex] !== undefined) {
		              chunkIndex++;
		            } // This means, that all chunks have already been started.


		            if (chunkIndex >= file.upload.totalChunkCount) return;
		            var start = chunkIndex * _this14.options.chunkSize;
		            var end = Math.min(start + _this14.options.chunkSize, _transformedFile.size);
		            var dataBlock = {
		              name: _this14._getParamName(0),
		              data: _transformedFile.webkitSlice ? _transformedFile.webkitSlice(start, end) : _transformedFile.slice(start, end),
		              filename: file.upload.filename,
		              chunkIndex: chunkIndex
		            };
		            file.upload.chunks[chunkIndex] = {
		              file: file,
		              index: chunkIndex,
		              dataBlock: dataBlock,
		              // In case we want to retry.
		              status: Dropzone.UPLOADING,
		              progress: 0,
		              retries: 0 // The number of times this block has been retried.

		            };

		            _this14._uploadData(files, [dataBlock]);
		          };

		          file.upload.finishedChunkUpload = function (chunk, response) {
		            var allFinished = true;
		            chunk.status = Dropzone.SUCCESS; // Clear the data from the chunk

		            chunk.dataBlock = null; // Leaving this reference to xhr intact here will cause memory leaks in some browsers

		            chunk.xhr = null;

		            for (var i = 0; i < file.upload.totalChunkCount; i++) {
		              if (file.upload.chunks[i] === undefined) {
		                return handleNextChunk();
		              }

		              if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {
		                allFinished = false;
		              }
		            }

		            if (allFinished) {
		              _this14.options.chunksUploaded(file, function () {
		                _this14._finished(files, response, null);
		              });
		            }
		          };

		          if (_this14.options.parallelChunkUploads) {
		            for (var i = 0; i < file.upload.totalChunkCount; i++) {
		              handleNextChunk();
		            }
		          } else {
		            handleNextChunk();
		          }
		        } else {
		          var dataBlocks = [];

		          for (var _i2 = 0; _i2 < files.length; _i2++) {
		            dataBlocks[_i2] = {
		              name: _this14._getParamName(_i2),
		              data: transformedFiles[_i2],
		              filename: files[_i2].upload.filename
		            };
		          }

		          _this14._uploadData(files, dataBlocks);
		        }
		      });
		    } /// Returns the right chunk for given file and xhr

		  }, {
		    key: "_getChunk",
		    value: function _getChunk(file, xhr) {
		      for (var i = 0; i < file.upload.totalChunkCount; i++) {
		        if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) {
		          return file.upload.chunks[i];
		        }
		      }
		    } // This function actually uploads the file(s) to the server.
		    // If dataBlocks contains the actual data to upload (meaning, that this could either be transformed
		    // files, or individual chunks for chunked upload).

		  }, {
		    key: "_uploadData",
		    value: function _uploadData(files, dataBlocks) {
		      var _this15 = this;

		      var xhr = new XMLHttpRequest(); // Put the xhr object in the file objects to be able to reference it later.

		      var _iterator13 = dropzone_createForOfIteratorHelper(files, true),
		          _step13;

		      try {
		        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
		          var file = _step13.value;
		          file.xhr = xhr;
		        }
		      } catch (err) {
		        _iterator13.e(err);
		      } finally {
		        _iterator13.f();
		      }

		      if (files[0].upload.chunked) {
		        // Put the xhr object in the right chunk object, so it can be associated later, and found with _getChunk
		        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;
		      }

		      var method = this.resolveOption(this.options.method, files);
		      var url = this.resolveOption(this.options.url, files);
		      xhr.open(method, url, true); // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8

		      var timeout = this.resolveOption(this.options.timeout, files);
		      if (timeout) xhr.timeout = this.resolveOption(this.options.timeout, files); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179

		      xhr.withCredentials = !!this.options.withCredentials;

		      xhr.onload = function (e) {
		        _this15._finishedUploading(files, xhr, e);
		      };

		      xhr.ontimeout = function () {
		        _this15._handleUploadError(files, xhr, "Request timedout after ".concat(_this15.options.timeout / 1000, " seconds"));
		      };

		      xhr.onerror = function () {
		        _this15._handleUploadError(files, xhr);
		      }; // Some browsers do not have the .upload property


		      var progressObj = xhr.upload != null ? xhr.upload : xhr;

		      progressObj.onprogress = function (e) {
		        return _this15._updateFilesUploadProgress(files, xhr, e);
		      };

		      var headers = {
		        Accept: "application/json",
		        "Cache-Control": "no-cache",
		        "X-Requested-With": "XMLHttpRequest"
		      };

		      if (this.options.headers) {
		        Dropzone.extend(headers, this.options.headers);
		      }

		      for (var headerName in headers) {
		        var headerValue = headers[headerName];

		        if (headerValue) {
		          xhr.setRequestHeader(headerName, headerValue);
		        }
		      }

		      var formData = new FormData(); // Adding all @options parameters

		      if (this.options.params) {
		        var additionalParams = this.options.params;

		        if (typeof additionalParams === "function") {
		          additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);
		        }

		        for (var key in additionalParams) {
		          var value = additionalParams[key];

		          if (Array.isArray(value)) {
		            // The additional parameter contains an array,
		            // so lets iterate over it to attach each value
		            // individually.
		            for (var i = 0; i < value.length; i++) {
		              formData.append(key, value[i]);
		            }
		          } else {
		            formData.append(key, value);
		          }
		        }
		      } // Let the user add additional data if necessary


		      var _iterator14 = dropzone_createForOfIteratorHelper(files, true),
		          _step14;

		      try {
		        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
		          var _file = _step14.value;
		          this.emit("sending", _file, xhr, formData);
		        }
		      } catch (err) {
		        _iterator14.e(err);
		      } finally {
		        _iterator14.f();
		      }

		      if (this.options.uploadMultiple) {
		        this.emit("sendingmultiple", files, xhr, formData);
		      }

		      this._addFormElementData(formData); // Finally add the files
		      // Has to be last because some servers (eg: S3) expect the file to be the last parameter


		      for (var _i3 = 0; _i3 < dataBlocks.length; _i3++) {
		        var dataBlock = dataBlocks[_i3];
		        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);
		      }

		      this.submitRequest(xhr, formData, files);
		    } // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.

		  }, {
		    key: "_transformFiles",
		    value: function _transformFiles(files, done) {
		      var _this16 = this;

		      var transformedFiles = []; // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.

		      var doneCounter = 0;

		      var _loop = function _loop(i) {
		        _this16.options.transformFile.call(_this16, files[i], function (transformedFile) {
		          transformedFiles[i] = transformedFile;

		          if (++doneCounter === files.length) {
		            done(transformedFiles);
		          }
		        });
		      };

		      for (var i = 0; i < files.length; i++) {
		        _loop(i);
		      }
		    } // Takes care of adding other input elements of the form to the AJAX request

		  }, {
		    key: "_addFormElementData",
		    value: function _addFormElementData(formData) {
		      // Take care of other input elements
		      if (this.element.tagName === "FORM") {
		        var _iterator15 = dropzone_createForOfIteratorHelper(this.element.querySelectorAll("input, textarea, select, button"), true),
		            _step15;

		        try {
		          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
		            var input = _step15.value;
		            var inputName = input.getAttribute("name");
		            var inputType = input.getAttribute("type");
		            if (inputType) inputType = inputType.toLowerCase(); // If the input doesn't have a name, we can't use it.

		            if (typeof inputName === "undefined" || inputName === null) continue;

		            if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
		              // Possibly multiple values
		              var _iterator16 = dropzone_createForOfIteratorHelper(input.options, true),
		                  _step16;

		              try {
		                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
		                  var option = _step16.value;

		                  if (option.selected) {
		                    formData.append(inputName, option.value);
		                  }
		                }
		              } catch (err) {
		                _iterator16.e(err);
		              } finally {
		                _iterator16.f();
		              }
		            } else if (!inputType || inputType !== "checkbox" && inputType !== "radio" || input.checked) {
		              formData.append(inputName, input.value);
		            }
		          }
		        } catch (err) {
		          _iterator15.e(err);
		        } finally {
		          _iterator15.f();
		        }
		      }
		    } // Invoked when there is new progress information about given files.
		    // If e is not provided, it is assumed that the upload is finished.

		  }, {
		    key: "_updateFilesUploadProgress",
		    value: function _updateFilesUploadProgress(files, xhr, e) {
		      if (!files[0].upload.chunked) {
		        // Handle file uploads without chunking
		        var _iterator17 = dropzone_createForOfIteratorHelper(files, true),
		            _step17;

		        try {
		          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
		            var file = _step17.value;

		            if (file.upload.total && file.upload.bytesSent && file.upload.bytesSent == file.upload.total) {
		              // If both, the `total` and `bytesSent` have already been set, and
		              // they are equal (meaning progress is at 100%), we can skip this
		              // file, since an upload progress shouldn't go down.
		              continue;
		            }

		            if (e) {
		              file.upload.progress = 100 * e.loaded / e.total;
		              file.upload.total = e.total;
		              file.upload.bytesSent = e.loaded;
		            } else {
		              // No event, so we're at 100%
		              file.upload.progress = 100;
		              file.upload.bytesSent = file.upload.total;
		            }

		            this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
		          }
		        } catch (err) {
		          _iterator17.e(err);
		        } finally {
		          _iterator17.f();
		        }
		      } else {
		        // Handle chunked file uploads
		        // Chunked upload is not compatible with uploading multiple files in one
		        // request, so we know there's only one file.
		        var _file2 = files[0]; // Since this is a chunked upload, we need to update the appropriate chunk
		        // progress.

		        var chunk = this._getChunk(_file2, xhr);

		        if (e) {
		          chunk.progress = 100 * e.loaded / e.total;
		          chunk.total = e.total;
		          chunk.bytesSent = e.loaded;
		        } else {
		          // No event, so we're at 100%
		          chunk.progress = 100;
		          chunk.bytesSent = chunk.total;
		        } // Now tally the *file* upload progress from its individual chunks


		        _file2.upload.progress = 0;
		        _file2.upload.total = 0;
		        _file2.upload.bytesSent = 0;

		        for (var i = 0; i < _file2.upload.totalChunkCount; i++) {
		          if (_file2.upload.chunks[i] && typeof _file2.upload.chunks[i].progress !== "undefined") {
		            _file2.upload.progress += _file2.upload.chunks[i].progress;
		            _file2.upload.total += _file2.upload.chunks[i].total;
		            _file2.upload.bytesSent += _file2.upload.chunks[i].bytesSent;
		          }
		        } // Since the process is a percentage, we need to divide by the amount of
		        // chunks we've used.


		        _file2.upload.progress = _file2.upload.progress / _file2.upload.totalChunkCount;
		        this.emit("uploadprogress", _file2, _file2.upload.progress, _file2.upload.bytesSent);
		      }
		    }
		  }, {
		    key: "_finishedUploading",
		    value: function _finishedUploading(files, xhr, e) {
		      var response;

		      if (files[0].status === Dropzone.CANCELED) {
		        return;
		      }

		      if (xhr.readyState !== 4) {
		        return;
		      }

		      if (xhr.responseType !== "arraybuffer" && xhr.responseType !== "blob") {
		        response = xhr.responseText;

		        if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
		          try {
		            response = JSON.parse(response);
		          } catch (error) {
		            e = error;
		            response = "Invalid JSON response from server.";
		          }
		        }
		      }

		      this._updateFilesUploadProgress(files, xhr);

		      if (!(200 <= xhr.status && xhr.status < 300)) {
		        this._handleUploadError(files, xhr, response);
		      } else {
		        if (files[0].upload.chunked) {
		          files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr), response);
		        } else {
		          this._finished(files, response, e);
		        }
		      }
		    }
		  }, {
		    key: "_handleUploadError",
		    value: function _handleUploadError(files, xhr, response) {
		      if (files[0].status === Dropzone.CANCELED) {
		        return;
		      }

		      if (files[0].upload.chunked && this.options.retryChunks) {
		        var chunk = this._getChunk(files[0], xhr);

		        if (chunk.retries++ < this.options.retryChunksLimit) {
		          this._uploadData(files, [chunk.dataBlock]);

		          return;
		        } else {
		          console.warn("Retried this chunk too often. Giving up.");
		        }
		      }

		      this._errorProcessing(files, response || this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr);
		    }
		  }, {
		    key: "submitRequest",
		    value: function submitRequest(xhr, formData, files) {
		      if (xhr.readyState != 1) {
		        console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.");
		        return;
		      }

		      xhr.send(formData);
		    } // Called internally when processing is finished.
		    // Individual callbacks have to be called in the appropriate sections.

		  }, {
		    key: "_finished",
		    value: function _finished(files, responseText, e) {
		      var _iterator18 = dropzone_createForOfIteratorHelper(files, true),
		          _step18;

		      try {
		        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
		          var file = _step18.value;
		          file.status = Dropzone.SUCCESS;
		          this.emit("success", file, responseText, e);
		          this.emit("complete", file);
		        }
		      } catch (err) {
		        _iterator18.e(err);
		      } finally {
		        _iterator18.f();
		      }

		      if (this.options.uploadMultiple) {
		        this.emit("successmultiple", files, responseText, e);
		        this.emit("completemultiple", files);
		      }

		      if (this.options.autoProcessQueue) {
		        return this.processQueue();
		      }
		    } // Called internally when processing is finished.
		    // Individual callbacks have to be called in the appropriate sections.

		  }, {
		    key: "_errorProcessing",
		    value: function _errorProcessing(files, message, xhr) {
		      var _iterator19 = dropzone_createForOfIteratorHelper(files, true),
		          _step19;

		      try {
		        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
		          var file = _step19.value;
		          file.status = Dropzone.ERROR;
		          this.emit("error", file, message, xhr);
		          this.emit("complete", file);
		        }
		      } catch (err) {
		        _iterator19.e(err);
		      } finally {
		        _iterator19.f();
		      }

		      if (this.options.uploadMultiple) {
		        this.emit("errormultiple", files, message, xhr);
		        this.emit("completemultiple", files);
		      }

		      if (this.options.autoProcessQueue) {
		        return this.processQueue();
		      }
		    }
		  }], [{
		    key: "initClass",
		    value: function initClass() {
		      // Exposing the emitter class, mainly for tests
		      this.prototype.Emitter = Emitter;
		      /*
		       This is a list of all available events you can register on a dropzone object.
		        You can register an event handler like this:
		        dropzone.on("dragEnter", function() { });
		        */

		      this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];
		      this.prototype._thumbnailQueue = [];
		      this.prototype._processingThumbnail = false;
		    } // global utility

		  }, {
		    key: "extend",
		    value: function extend(target) {
		      for (var _len2 = arguments.length, objects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        objects[_key2 - 1] = arguments[_key2];
		      }

		      for (var _i4 = 0, _objects = objects; _i4 < _objects.length; _i4++) {
		        var object = _objects[_i4];

		        for (var key in object) {
		          var val = object[key];
		          target[key] = val;
		        }
		      }

		      return target;
		    }
		  }, {
		    key: "uuidv4",
		    value: function uuidv4() {
		      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		        var r = Math.random() * 16 | 0,
		            v = c === "x" ? r : r & 0x3 | 0x8;
		        return v.toString(16);
		      });
		    }
		  }]);

		  return Dropzone;
		}(Emitter);


		Dropzone.initClass();
		Dropzone.version = "5.9.3"; // This is a map of options for your different dropzones. Add configurations
		// to this object for your different dropzone elemens.
		//
		// Example:
		//
		//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };
		//
		// To disable autoDiscover for a specific element, you can set `false` as an option:
		//
		//     Dropzone.options.myDisabledElementId = false;
		//
		// And in html:
		//
		//     <form action="/upload" id="my-dropzone-element-id" class="dropzone"></form>

		Dropzone.options = {}; // Returns the options for an element or undefined if none available.

		Dropzone.optionsForElement = function (element) {
		  // Get the `Dropzone.options.elementId` for this element if it exists
		  if (element.getAttribute("id")) {
		    return Dropzone.options[camelize(element.getAttribute("id"))];
		  } else {
		    return undefined;
		  }
		}; // Holds a list of all dropzone instances


		Dropzone.instances = []; // Returns the dropzone for given element if any

		Dropzone.forElement = function (element) {
		  if (typeof element === "string") {
		    element = document.querySelector(element);
		  }

		  if ((element != null ? element.dropzone : undefined) == null) {
		    throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
		  }

		  return element.dropzone;
		}; // Set to false if you don't want Dropzone to automatically find and attach to .dropzone elements.


		Dropzone.autoDiscover = true; // Looks for all .dropzone elements and creates a dropzone for them

		Dropzone.discover = function () {
		  var dropzones;

		  if (document.querySelectorAll) {
		    dropzones = document.querySelectorAll(".dropzone");
		  } else {
		    dropzones = []; // IE :(

		    var checkElements = function checkElements(elements) {
		      return function () {
		        var result = [];

		        var _iterator20 = dropzone_createForOfIteratorHelper(elements, true),
		            _step20;

		        try {
		          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
		            var el = _step20.value;

		            if (/(^| )dropzone($| )/.test(el.className)) {
		              result.push(dropzones.push(el));
		            } else {
		              result.push(undefined);
		            }
		          }
		        } catch (err) {
		          _iterator20.e(err);
		        } finally {
		          _iterator20.f();
		        }

		        return result;
		      }();
		    };

		    checkElements(document.getElementsByTagName("div"));
		    checkElements(document.getElementsByTagName("form"));
		  }

		  return function () {
		    var result = [];

		    var _iterator21 = dropzone_createForOfIteratorHelper(dropzones, true),
		        _step21;

		    try {
		      for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
		        var dropzone = _step21.value;

		        // Create a dropzone unless auto discover has been disabled for specific element
		        if (Dropzone.optionsForElement(dropzone) !== false) {
		          result.push(new Dropzone(dropzone));
		        } else {
		          result.push(undefined);
		        }
		      }
		    } catch (err) {
		      _iterator21.e(err);
		    } finally {
		      _iterator21.f();
		    }

		    return result;
		  }();
		}; // Some browsers support drag and drog functionality, but not correctly.
		//
		// So I created a blocklist of userAgents. Yes, yes. Browser sniffing, I know.
		// But what to do when browsers *theoretically* support an API, but crash
		// when using it.
		//
		// This is a list of regular expressions tested against navigator.userAgent
		//
		// ** It should only be used on browser that *do* support the API, but
		// incorrectly **


		Dropzone.blockedBrowsers = [// The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.
		/opera.*(Macintosh|Windows Phone).*version\/12/i]; // Checks if the browser is supported

		Dropzone.isBrowserSupported = function () {
		  var capableBrowser = true;

		  if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
		    if (!("classList" in document.createElement("a"))) {
		      capableBrowser = false;
		    } else {
		      if (Dropzone.blacklistedBrowsers !== undefined) {
		        // Since this has been renamed, this makes sure we don't break older
		        // configuration.
		        Dropzone.blockedBrowsers = Dropzone.blacklistedBrowsers;
		      } // The browser supports the API, but may be blocked.


		      var _iterator22 = dropzone_createForOfIteratorHelper(Dropzone.blockedBrowsers, true),
		          _step22;

		      try {
		        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
		          var regex = _step22.value;

		          if (regex.test(navigator.userAgent)) {
		            capableBrowser = false;
		            continue;
		          }
		        }
		      } catch (err) {
		        _iterator22.e(err);
		      } finally {
		        _iterator22.f();
		      }
		    }
		  } else {
		    capableBrowser = false;
		  }

		  return capableBrowser;
		};

		Dropzone.dataURItoBlob = function (dataURI) {
		  // convert base64 to raw binary data held in a string
		  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
		  var byteString = atob(dataURI.split(",")[1]); // separate out the mime component

		  var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0]; // write the bytes of the string to an ArrayBuffer

		  var ab = new ArrayBuffer(byteString.length);
		  var ia = new Uint8Array(ab);

		  for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {
		    ia[i] = byteString.charCodeAt(i);
		  } // write the ArrayBuffer to a blob


		  return new Blob([ab], {
		    type: mimeString
		  });
		}; // Returns an array without the rejected item


		var without = function without(list, rejectedItem) {
		  return list.filter(function (item) {
		    return item !== rejectedItem;
		  }).map(function (item) {
		    return item;
		  });
		}; // abc-def_ghi -> abcDefGhi


		var camelize = function camelize(str) {
		  return str.replace(/[\-_](\w)/g, function (match) {
		    return match.charAt(1).toUpperCase();
		  });
		}; // Creates an element from string


		Dropzone.createElement = function (string) {
		  var div = document.createElement("div");
		  div.innerHTML = string;
		  return div.childNodes[0];
		}; // Tests if given element is inside (or simply is) the container


		Dropzone.elementInside = function (element, container) {
		  if (element === container) {
		    return true;
		  } // Coffeescript doesn't support do/while loops


		  while (element = element.parentNode) {
		    if (element === container) {
		      return true;
		    }
		  }

		  return false;
		};

		Dropzone.getElement = function (el, name) {
		  var element;

		  if (typeof el === "string") {
		    element = document.querySelector(el);
		  } else if (el.nodeType != null) {
		    element = el;
		  }

		  if (element == null) {
		    throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector or a plain HTML element."));
		  }

		  return element;
		};

		Dropzone.getElements = function (els, name) {
		  var el, elements;

		  if (els instanceof Array) {
		    elements = [];

		    try {
		      var _iterator23 = dropzone_createForOfIteratorHelper(els, true),
		          _step23;

		      try {
		        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
		          el = _step23.value;
		          elements.push(this.getElement(el, name));
		        }
		      } catch (err) {
		        _iterator23.e(err);
		      } finally {
		        _iterator23.f();
		      }
		    } catch (e) {
		      elements = null;
		    }
		  } else if (typeof els === "string") {
		    elements = [];

		    var _iterator24 = dropzone_createForOfIteratorHelper(document.querySelectorAll(els), true),
		        _step24;

		    try {
		      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
		        el = _step24.value;
		        elements.push(el);
		      }
		    } catch (err) {
		      _iterator24.e(err);
		    } finally {
		      _iterator24.f();
		    }
		  } else if (els.nodeType != null) {
		    elements = [els];
		  }

		  if (elements == null || !elements.length) {
		    throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."));
		  }

		  return elements;
		}; // Asks the user the question and calls accepted or rejected accordingly
		//
		// The default implementation just uses `window.confirm` and then calls the
		// appropriate callback.


		Dropzone.confirm = function (question, accepted, rejected) {
		  if (window.confirm(question)) {
		    return accepted();
		  } else if (rejected != null) {
		    return rejected();
		  }
		}; // Validates the mime type like this:
		//
		// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept


		Dropzone.isValidFile = function (file, acceptedFiles) {
		  if (!acceptedFiles) {
		    return true;
		  } // If there are no accepted mime types, it's OK


		  acceptedFiles = acceptedFiles.split(",");
		  var mimeType = file.type;
		  var baseMimeType = mimeType.replace(/\/.*$/, "");

		  var _iterator25 = dropzone_createForOfIteratorHelper(acceptedFiles, true),
		      _step25;

		  try {
		    for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
		      var validType = _step25.value;
		      validType = validType.trim();

		      if (validType.charAt(0) === ".") {
		        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
		          return true;
		        }
		      } else if (/\/\*$/.test(validType)) {
		        // This is something like a image/* mime type
		        if (baseMimeType === validType.replace(/\/.*$/, "")) {
		          return true;
		        }
		      } else {
		        if (mimeType === validType) {
		          return true;
		        }
		      }
		    }
		  } catch (err) {
		    _iterator25.e(err);
		  } finally {
		    _iterator25.f();
		  }

		  return false;
		}; // Augment jQuery


		if (typeof jQuery !== "undefined" && jQuery !== null) {
		  jQuery.fn.dropzone = function (options) {
		    return this.each(function () {
		      return new Dropzone(this, options);
		    });
		  };
		} // Dropzone file status codes


		Dropzone.ADDED = "added";
		Dropzone.QUEUED = "queued"; // For backwards compatibility. Now, if a file is accepted, it's either queued
		// or uploading.

		Dropzone.ACCEPTED = Dropzone.QUEUED;
		Dropzone.UPLOADING = "uploading";
		Dropzone.PROCESSING = Dropzone.UPLOADING; // alias

		Dropzone.CANCELED = "canceled";
		Dropzone.ERROR = "error";
		Dropzone.SUCCESS = "success";
		/*

		 Bugfix for iOS 6 and 7
		 Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
		 based on the work of https://github.com/stomita/ios-imagefile-megapixel

		 */
		// Detecting vertical squash in loaded image.
		// Fixes a bug which squash image vertically while drawing into canvas for some images.
		// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel

		var detectVerticalSquash = function detectVerticalSquash(img) {
		  img.naturalWidth;
		  var ih = img.naturalHeight;
		  var canvas = document.createElement("canvas");
		  canvas.width = 1;
		  canvas.height = ih;
		  var ctx = canvas.getContext("2d");
		  ctx.drawImage(img, 0, 0);

		  var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih),
		      data = _ctx$getImageData.data; // search image edge pixel position in case it is squashed vertically.


		  var sy = 0;
		  var ey = ih;
		  var py = ih;

		  while (py > sy) {
		    var alpha = data[(py - 1) * 4 + 3];

		    if (alpha === 0) {
		      ey = py;
		    } else {
		      sy = py;
		    }

		    py = ey + sy >> 1;
		  }

		  var ratio = py / ih;

		  if (ratio === 0) {
		    return 1;
		  } else {
		    return ratio;
		  }
		}; // A replacement for context.drawImage
		// (args are for source and destination).


		var drawImageIOSFix = function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
		  var vertSquashRatio = detectVerticalSquash(img);
		  return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
		}; // Based on MinifyJpeg
		// Source: http://www.perry.cz/files/ExifRestorer.js
		// http://elicon.blog57.fc2.com/blog-entry-206.html


		var ExifRestore = /*#__PURE__*/function () {
		  function ExifRestore() {
		    dropzone_classCallCheck(this, ExifRestore);
		  }

		  dropzone_createClass(ExifRestore, null, [{
		    key: "initClass",
		    value: function initClass() {
		      this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		    }
		  }, {
		    key: "encode64",
		    value: function encode64(input) {
		      var output = "";
		      var chr1 = undefined;
		      var chr2 = undefined;
		      var chr3 = "";
		      var enc1 = undefined;
		      var enc2 = undefined;
		      var enc3 = undefined;
		      var enc4 = "";
		      var i = 0;

		      while (true) {
		        chr1 = input[i++];
		        chr2 = input[i++];
		        chr3 = input[i++];
		        enc1 = chr1 >> 2;
		        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
		        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
		        enc4 = chr3 & 63;

		        if (isNaN(chr2)) {
		          enc3 = enc4 = 64;
		        } else if (isNaN(chr3)) {
		          enc4 = 64;
		        }

		        output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);
		        chr1 = chr2 = chr3 = "";
		        enc1 = enc2 = enc3 = enc4 = "";

		        if (!(i < input.length)) {
		          break;
		        }
		      }

		      return output;
		    }
		  }, {
		    key: "restore",
		    value: function restore(origFileBase64, resizedFileBase64) {
		      if (!origFileBase64.match("data:image/jpeg;base64,")) {
		        return resizedFileBase64;
		      }

		      var rawImage = this.decode64(origFileBase64.replace("data:image/jpeg;base64,", ""));
		      var segments = this.slice2Segments(rawImage);
		      var image = this.exifManipulation(resizedFileBase64, segments);
		      return "data:image/jpeg;base64,".concat(this.encode64(image));
		    }
		  }, {
		    key: "exifManipulation",
		    value: function exifManipulation(resizedFileBase64, segments) {
		      var exifArray = this.getExifArray(segments);
		      var newImageArray = this.insertExif(resizedFileBase64, exifArray);
		      var aBuffer = new Uint8Array(newImageArray);
		      return aBuffer;
		    }
		  }, {
		    key: "getExifArray",
		    value: function getExifArray(segments) {
		      var seg = undefined;
		      var x = 0;

		      while (x < segments.length) {
		        seg = segments[x];

		        if (seg[0] === 255 & seg[1] === 225) {
		          return seg;
		        }

		        x++;
		      }

		      return [];
		    }
		  }, {
		    key: "insertExif",
		    value: function insertExif(resizedFileBase64, exifArray) {
		      var imageData = resizedFileBase64.replace("data:image/jpeg;base64,", "");
		      var buf = this.decode64(imageData);
		      var separatePoint = buf.indexOf(255, 3);
		      var mae = buf.slice(0, separatePoint);
		      var ato = buf.slice(separatePoint);
		      var array = mae;
		      array = array.concat(exifArray);
		      array = array.concat(ato);
		      return array;
		    }
		  }, {
		    key: "slice2Segments",
		    value: function slice2Segments(rawImageArray) {
		      var head = 0;
		      var segments = [];

		      while (true) {
		        var length;

		        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
		          break;
		        }

		        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
		          head += 2;
		        } else {
		          length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];
		          var endPoint = head + length + 2;
		          var seg = rawImageArray.slice(head, endPoint);
		          segments.push(seg);
		          head = endPoint;
		        }

		        if (head > rawImageArray.length) {
		          break;
		        }
		      }

		      return segments;
		    }
		  }, {
		    key: "decode64",
		    value: function decode64(input) {
		      var chr1 = undefined;
		      var chr2 = undefined;
		      var chr3 = "";
		      var enc1 = undefined;
		      var enc2 = undefined;
		      var enc3 = undefined;
		      var enc4 = "";
		      var i = 0;
		      var buf = []; // remove all characters that are not A-Z, a-z, 0-9, +, /, or =

		      var base64test = /[^A-Za-z0-9\+\/\=]/g;

		      if (base64test.exec(input)) {
		        console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");
		      }

		      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		      while (true) {
		        enc1 = this.KEY_STR.indexOf(input.charAt(i++));
		        enc2 = this.KEY_STR.indexOf(input.charAt(i++));
		        enc3 = this.KEY_STR.indexOf(input.charAt(i++));
		        enc4 = this.KEY_STR.indexOf(input.charAt(i++));
		        chr1 = enc1 << 2 | enc2 >> 4;
		        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
		        chr3 = (enc3 & 3) << 6 | enc4;
		        buf.push(chr1);

		        if (enc3 !== 64) {
		          buf.push(chr2);
		        }

		        if (enc4 !== 64) {
		          buf.push(chr3);
		        }

		        chr1 = chr2 = chr3 = "";
		        enc1 = enc2 = enc3 = enc4 = "";

		        if (!(i < input.length)) {
		          break;
		        }
		      }

		      return buf;
		    }
		  }]);

		  return ExifRestore;
		}();

		ExifRestore.initClass();
		/*
		 * contentloaded.js
		 *
		 * Author: Diego Perini (diego.perini at gmail.com)
		 * Summary: cross-browser wrapper for DOMContentLoaded
		 * Updated: 20101020
		 * License: MIT
		 * Version: 1.2
		 *
		 * URL:
		 * http://javascript.nwbox.com/ContentLoaded/
		 * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
		 */
		// @win window reference
		// @fn function reference

		var contentLoaded = function contentLoaded(win, fn) {
		  var done = false;
		  var top = true;
		  var doc = win.document;
		  var root = doc.documentElement;
		  var add = doc.addEventListener ? "addEventListener" : "attachEvent";
		  var rem = doc.addEventListener ? "removeEventListener" : "detachEvent";
		  var pre = doc.addEventListener ? "" : "on";

		  var init = function init(e) {
		    if (e.type === "readystatechange" && doc.readyState !== "complete") {
		      return;
		    }

		    (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);

		    if (!done && (done = true)) {
		      return fn.call(win, e.type || e);
		    }
		  };

		  var poll = function poll() {
		    try {
		      root.doScroll("left");
		    } catch (e) {
		      setTimeout(poll, 50);
		      return;
		    }

		    return init("poll");
		  };

		  if (doc.readyState !== "complete") {
		    if (doc.createEventObject && root.doScroll) {
		      try {
		        top = !win.frameElement;
		      } catch (error) {}

		      if (top) {
		        poll();
		      }
		    }

		    doc[add](pre + "DOMContentLoaded", init, false);
		    doc[add](pre + "readystatechange", init, false);
		    return win[add](pre + "load", init, false);
		  }
		}; // As a single function to be able to write tests.


		Dropzone._autoDiscoverFunction = function () {
		  if (Dropzone.autoDiscover) {
		    return Dropzone.discover();
		  }
		};

		contentLoaded(window, Dropzone._autoDiscoverFunction);

		function __guard__(value, transform) {
		  return typeof value !== "undefined" && value !== null ? transform(value) : undefined;
		}

		function __guardMethod__(obj, methodName, transform) {
		  if (typeof obj !== "undefined" && obj !== null && typeof obj[methodName] === "function") {
		    return transform(obj, methodName);
		  } else {
		    return undefined;
		  }
		}
		 /// Make Dropzone a global variable.

		window.Dropzone = Dropzone;
		/* harmony default export */ var dropzone_dist = (Dropzone);

		}();
		/******/ 	return __webpack_exports__;
		/******/ })()
		;
		}); 
	} (dropzone));

	var dropzoneExports = dropzone.exports;

	dropzoneExports.Dropzone.autoDiscover = false;

	/**
	 * A utility class for interacting with the Dropzone library
	 *
	 * Compatible with @dropzone v5.9.3
	 */
	class FileSelector {
	  /**
	   * Constructor
	   *
	   * @param  {Object}  element  Required. A pre-queried Dropzone element to initialize
	   * @param  {Object}  s        Optional settings configuration that will be processed and passed to Dropzone
	   *
	   * @return {Object}           Instance of FileSelector
	   */
	  constructor(element, s = {}) {
	    this.element = element;

	    this.selectors = s.selectors ? s.selectors : FileSelector.selectors;

	    this.dropzoneOptions = s.dropzoneOptions ?
	      Object.assign(FileSelector.dropzoneOptions, s.dropzoneOptions) : FileSelector.dropzoneOptions;

	    this.mockFiles = s.mockFiles ? s.mockFiles : [];

	    this.maxFilesReached = s.maxFilesReached ? s.maxFilesReached : FileSelector.maxFilesReached;

	    this.maxFilesReset = s.maxFilesReset ? s.maxFilesReset : FileSelector.maxFilesReset;

	    this.elFocusable = s.elFocusable ? s.elFocusable : FileSelector.elFocusable;

	    this.index = s.index ? s.index : FileSelector.index;

	    this.addedFile = s.addedFile ? s.addedFile : this.addedFile;

	    this.removedFile = s.removedFile ? s.removedFile : this.removedFile;

	    /**
	     * Configure and initialize Dropzone
	     */

	    this.dropzone = this.configDropzone(this.dropzoneOptions);

	    /**
	     * Append custom init method. This is not the same as the Dropzone init callback
	     */

	    this.init(this.dropzone);

	    /**
	     * Event handlers for development
	     */

	    {
	      document.querySelector('body').addEventListener('click', event => {
	        if (event.target.matches(this.selectors.previewStateToggle)) {
	          event.target.closest(this.selectors.previewTemplate)
	            .className = event.target.dataset.dropzonePreviewState;
	        }
	      });
	    }

	    {
	      console.dir(this);
	    }

	    return this;
	  }

	  /**
	   * Set Dropzone options, relevant to the template, and initialize Dropzone.
	   * @source https://github.com/dropzone/dropzone/blob/main/src/options.js
	   *
	   * @param   {Object}  options  Options to pass to configure and pass to the Dropzone class
	   *
	   * @return  {Object}           Instance of FileSelector
	   */
	  configDropzone(options) {
	    let fallback = this.element.querySelector(this.selectors.fallback);
	    let previewContainer = this.element.querySelector(this.selectors.previewContainer);
	    let previewTemplate = this.element.querySelector(this.selectors.previewTemplate);
	    let thumbnail = previewTemplate.querySelector(this.selectors.thumbnail);
	    let hiddenInputContainer = this.element.querySelector(this.selectors.hiddenInputContainer);
	    let dict = this.element.querySelectorAll(this.selectors.dict);

	    thumbnail.classList.add(`width-${options.thumbnailWidth}`);
	    thumbnail.classList.add(`height-${options.thumbnailHeight}`);

	    options.thumbnailWidth = options.thumbnailWidth * 8;
	    options.thumbnailHeight = options.thumbnailHeight * 8;

	    options.previewsContainer = (previewContainer) ? previewContainer : null;

	    options.acceptedFiles = (fallback) ? fallback.getAttribute('accept') : null;

	    options.hiddenInputContainer = (hiddenInputContainer) ? hiddenInputContainer : region;

	    options.previewTemplate = (previewTemplate) ? previewTemplate.outerHTML : null;

	    /**
	     * Set all provided dictionary items from the template
	     */

	    for (let i = 0; i < dict.length; i++) {
	      let d = dict[i].dataset['dropzoneDict'];
	      let key = `dict${d.charAt(0).toUpperCase() + d.slice(1)}`;
	      let value = dict[i].innerText;

	      if (value != '') {
	        options[key] = value;
	      }
	    }

	    /**
	     * Events
	     */

	    options.dragover = event => {
	      this.dragover(event);
	    };

	    options.dragleave = event => {
	      this.dragleave(event);
	    };

	    options.drop = event => {
	      this.drop(event);
	    };

	    /**
	     * Initialize Dropzone
	     */

	    return new dropzoneExports.Dropzone(this.element, options);
	  }

	  /**
	   * An init function for Dropzone. This is not the same as Dropzone's provided
	   * init event handler. However, this handler does trigger after Dropzone is
	   * initialized.
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  init() {

	    this.preview()
	      .maxFiles()
	      .swapFallback()
	      .addedFile()
	      .removedFile();

	    /**
	     * Add previously uploaded documents
	     */
	    for (let i = 0; i < this.mockFiles.length; i++) {
	      this.addFile(this.mockFiles[i]);
	    }

	    return this;
	  }

	  /**
	   * Swaps attributes on the fallback file input with attributes on the hidden
	   * Dropzone file input. This makes the presentation of the Dropzone element
	   * compatible with the default USWDS File Input component.
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  swapFallback() {
	    let fallback = this.dropzone.element.querySelector(this.selectors.fallback);

	    for (let i = 0; i < FileSelector.fallbackAttrs.length; i++) {
	      let attr = FileSelector.fallbackAttrs[i];
	      let value = fallback.getAttribute(attr);

	      if (value) this.dropzone.hiddenFileInput.setAttribute(attr, value);
	    }

	    fallback.remove();

	    for (let i = 0; i < FileSelector.removeAttrs.length; i++) {
	      let attr = FileSelector.removeAttrs[i];

	      this.dropzone.hiddenFileInput.removeAttribute(attr);
	    }

	    return this;
	  }

	  /**
	   * Add the Dropzone event listener for 'addedfile'. This method property could
	   * be overridden to customize the chain of events contained within.
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  addedFile() {
	    this.dropzone.on('addedfile', file => {
	      this.formatFilename(file)
	        .maxFiles()
	        .preview()
	        .previewNumber()
	        .previewHeader();
	    });

	    return this;
	  }

	  /**
	   * Add the Dropzone event listener for 'removedfile'. This method property could
	   * be overridden to customize the chain of events contained within.
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  removedFile() {
	    this.dropzone.on('removedfile', file => {
	      this.maxFiles()
	        .preview()
	        .previewNumber();
	    });
	  }

	  /**
	   * Event handler for the dragover event on the Dropzone region
	   *
	   * @param   {Object}  event  Dragover event
	   *
	   * @return  {Object}         Instance of FileSelector
	   */
	  dragover(event) {
	    if (event.srcElement.matches(this.selectors.dragRegion)) {
	      event.srcElement.classList.add(FileSelector.classes.dragOver);
	    }

	    return this;
	  }

	  /**
	   * Event handler for the dragleave event on the Dropzone region
	   *
	   * @param   {Object}  event  Dragleave event
	   *
	   * @return  {Object}         Instance of FileSelector
	   */
	  dragleave(event) {
	    if (event.srcElement.matches(this.selectors.dragRegion)) {
	      event.srcElement.classList.remove(FileSelector.classes.dragOver);
	    }

	    return this;
	  }

	  /**
	   * Event handler for the drop event on the Dropzone region
	   *
	   * @param   {Object}  event  Drop event
	   *
	   * @return  {Object}         Instance of FileSelector
	   */
	  drop(event) {
	    this.dragleave(event);

	    return this;
	  }

	  /**
	   * Format the filename label so that the name overflow
	   *
	   * @param   {Object}  file  Most recently added Dropzone file object
	   *
	   * @return  {Object}        Instance of FileSelector
	   */
	  formatFilename(file) {
	    let nameElement = file.previewElement.querySelector('[data-dz-name]');
	    let label = nameElement.innerText;

	    /**
	     * Get filename extension
	     *
	     * @source https://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript/12900504#12900504
	     */

	    let ext = label.slice((label.lastIndexOf('.') - 1 >>> 0) + 2);

	    let name = (ext === '') ? label : label.slice(0, label.lastIndexOf('.'));

	    nameElement.innerHTML = [
	      `<span class="dropzone__filename-name" aria-hidden="true">${name}</span>`,
	      ((ext !== '') ? `<span class="filename__filename-ext" aria-hidden="true">.${ext}</span>` : '')
	    ].join('');

	    nameElement.setAttribute('aria-label', label);

	    return this;
	  }

	  /**
	   * Show or hide the preview based on the number of added files
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  preview() {
	    let preview = this.element.querySelector(this.selectors.preview);

	    if (this.dropzone.files.length > 0) {
	      preview.removeAttribute('aria-hidden');
	      preview.removeAttribute('hidden');
	    } else {
	      preview.setAttribute('aria-hidden', 'true');
	      preview.setAttribute('hidden', '');
	    }

	    return this;
	  }

	  /**
	   * Update the uploaded number inner text to reflect the number of added files
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  previewNumber() {
	    let number = this.element.querySelector(this.selectors.previewNumber);

	    if (number) {
	      number.innerText = this.dropzone.files.length;
	    }

	    return this;
	  }

	  /**
	   * Shift focus to the uploads header with additional information
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  previewHeader() {
	    let header = this.element.querySelector(this.selectors.previewHeader);

	    if (header) {
	      header.setAttribute('tabindex', '-1');
	      header.focus();
	    }

	    return this;
	  }

	  /**
	   * Hide the preview template
	   *
	   * @param   {Object}  remove  If set to true the element will be removed from the DOM
	   *
	   * @return  {Object}          Instance of FileSelector
	   */
	  hidePreviewTemplate(remove = false) {
	    if (remove) {
	      previewTemplate.remove();
	    } else {
	      let previewTemplate = this.element.querySelector(this.selectors.previewTemplate);

	      previewTemplate.setAttribute('aria-hidden', 'true');
	      previewTemplate.setAttribute('hidden', '');

	      this.index(previewTemplate.querySelectorAll(this.elFocusable.join(', ')), false);
	    }

	    return this;
	  }

	  /**
	   * Assert if max files have been reached and toggle messaging and other relevant events
	   *
	   * @return  {Object}  Instance of FileSelector
	   */
	  maxFiles() {
	    let inputErrorMessage = this.element.querySelector(this.selectors.inputErrorMessage);

	    if (inputErrorMessage.getAttribute('aria-hidden') === 'true' &&
	      this.dropzone.files.length >= this.dropzone.options.maxFiles) {
	      let inputErrorMessage = this.element.querySelector(this.selectors.inputErrorMessage);

	      inputErrorMessage.innerText = this.dropzone.options.dictMaxFilesExceeded;
	      inputErrorMessage.removeAttribute('aria-hidden');
	      inputErrorMessage.setAttribute('role', 'alert');
	      inputErrorMessage.setAttribute('aria-live', 'polite');

	      this.maxFilesReached(this);
	    }

	    if (this.dropzone.files.length <= this.dropzone.options.maxFiles) {
	      let inputErrorMessage = this.element.querySelector(this.selectors.inputErrorMessage);

	      inputErrorMessage.innerText = '';
	      inputErrorMessage.setAttribute('aria-hidden', 'true');
	      inputErrorMessage.removeAttribute('role');
	      inputErrorMessage.removeAttribute('aria-live');

	      this.maxFilesReset(this);
	    }

	    return this;
	  }

	  /**
	   * Forces the display of a previously uploaded document programatically.
	   *
	   * @param   {Object}  file  Object containing parameters needed to mock a file: {
	   *                            @name:     {String}   file name including extension,
	   *                            @size:     {Number}   file size in bytes,
	   *                            @type:     {String}   file type,
	   *                            @id:       {String}   file ID,
	   *                            @dataURL:  {String}   data encoded URI of the image thumbnail,
	   *                            @accepted: {Boolean}  defaults to true
	   *                          }
	   *                          Example: {
	   *                            name: 'filename.png',
	   *                            size: 192435,
	   *                            type: 'image/png',
	   *                            id: '0f488973-63e2-4a1d-a509-d1b492f10344',
	   *                            dataURL: "data:image/png;base64,...",
	   *                            accepted: true
	   *                          }
	   *
	   * @return  {Object}        Instance of FileSelector
	   */
	  addFile(file) {
	    this.dropzone.files.push(file);

	    this.dropzone.emit('addedfile', file);
	    this.dropzone.emit('thumbnail', file, file.dataURL);
	    this.dropzone.emit('success', file, file.id);
	    this.dropzone.emit('complete', file);

	    return this;
	  }
	}

	/** @type  {String}  The main selector for File Selector components **/
	FileSelector.selector = '[data-js="file-selector"]';

	/** @type  {Object}  A dictionary of selectors used by the utility class **/
	FileSelector.selectors = {
	  'dragRegion': '[data-dropzone="drag-and-drop-region"]',
	  'inputErrorMessage': '[data-dropzone="input-error-message"]',
	  'fallback': '[data-dropzone="fallback"]',
	  'previewHeader': '[data-dropzone="preview-header"]',
	  'previewNumber': '[data-dropzone="preview-number"]',
	  'preview': '[data-dropzone="preview"]',
	  'previewContainer': '[data-dropzone="preview-container"]',
	  'previewTemplate': '[data-dropzone="preview-template"]',
	  'previewStateToggle': '[data-dropzone="toggle-preview-state"]',
	  'thumbnail': '[data-dropzone="thumbnail"]',
	  'hiddenInputContainer': '[data-dropzone="hidden-input-container"]',
	  'dict': '[data-dropzone="dict"]',
	  'fileRemove': '[data-dropzone="file-remove"]',
	  'fileRemoveLabel': '[data-dropzone="file-remove-label"]',
	  'remove': '[data-dropzone="remove"]'
	};

	/** @type  {Object}  A dictionary of classes used by the utility class **/
	FileSelector.classes = {
	  'dragOver': 'usa-file-input--drag'
	};

	/** @type  {Object}  Default options to pass to the Dropzone library **/
	FileSelector.dropzoneOptions = {
	  'clickable': FileSelector.selectors.dragRegion,
	  'thumbnailMethod': 'crop',
	  'thumbnailWidth': 8, // to be multiplied by 8
	  'thumbnailHeight': 8, // to be multiplied by 8
	  'maxFiles': 20,
	  'maxFilesize': 20
	};

	/** @type  {Array}  A list of attributes to swap from the fallback file input to the hidden Dropzone input **/
	FileSelector.fallbackAttrs = ['class', 'id', 'name', 'aria-labelledby', 'aria-describedby', 'multiple', 'accept'];

	/** @type  {Array}  A list of attributes remove from the hidden Dropzone input **/
	FileSelector.removeAttrs = ['tabindex', 'style'];

	/** @type  {Function}  A callback function for reaching max files within this utility **/
	FileSelector.maxFilesReached = () => {
	  {
	    console.dir('Max files limit reached!');
	  }
	};

	/** @type  {Function}  A callback function for when the max files warning is reset within this utility **/
	FileSelector.maxFilesReset = () => {
	  {
	    console.dir('Max files threshold not reached!');
	  }
	};

	/** @type  {Array}  A list of potentially focusable element selectors */
	FileSelector.elFocusable = [
	  'a', 'button', 'input', 'select', 'textarea', 'object', 'embed', 'form',
	  'fieldset', 'legend', 'label', 'area', 'audio', 'video', 'iframe', 'svg',
	  'details', 'table', '[tabindex]', '[contenteditable]', '[usemap]'
	];

	/**
	 * Method for adding or removing potentially focusable elements from the
	 * dom tabbing order within the target region.
	 *
	 * @param   {NodeList}  elements  Elements to index
	 * @param   {Boolean}   index     Wether to index elements or not
	 *
	 * @return  {Object}              The indexed elements
	 */
	FileSelector.index = (elements, index = false) => {
	  for (let i = 0; i < elements.length; i++) {
	    let element = elements[i];

	    if (index) {
	      let dataDefault = element.getAttribute(`data-js-tabindex`);

	      if (dataDefault) {
	        element.setAttribute('tabindex', dataDefault);
	      } else {
	        element.removeAttribute('tabindex');
	      }
	    } else {
	      element.setAttribute('tabindex', '-1');
	    }
	  }
	  return elements;
	};

	window.uswdsPresent = true; // Indicate uswds.js has loaded in the DOM.

	/**
	 * Initialize USWDS and Code for America theme utilities and components
	 */

	accordion$2.on(document.body);
	button.on(document.body);

	new Copy({
	  copied: c => {
	    let icon = c.element.querySelector(c.selectors.ICON);
	    let href = icon.getAttribute('href').split('#');
	    icon.setAttribute('href', `${href[0]}#check_circle`);
	  },
	  after: c => {
	    let icon = c.element.querySelector(c.selectors.ICON);
	    let href = icon.getAttribute('href').split('#');
	    icon.setAttribute('href', `${href[0]}#content_copy`);
	  }
	});

	new Details();
	new FollowUpQuestion();

	navigation$1.on(document.body);

	new MaskDollars();
	new MaskTel();
	new MaskSSN();

	skipnav.on(document.body);
	tooltip$1.on(document.body);

	/**
	 * Upload Documents component
	 */
	(elements => {
	  for (let i = 0; i < elements.length; i++) {
	    new FileSelector(elements[i], {
	      // /**
	      //  * Example of passing already uploaded files to the utility
	      //  *
	      //  * @type  {Array}
	      //  */
	      // mockFiles: [
	      //   {
	      //     @name:     {String}   file name including extension,
	      //     @size:     {Number}   file size in bytes,
	      //     @type:     {String}   file type,
	      //     @id:       {String}   file ID,
	      //     @dataURL:  {String}   data encoded URI of the image thumbnail,
	      //     @accepted: {Boolean}  defaults to true
	      //   },
	      //   {
	      //     name: 'filename.png',
	      //     size: 192435,
	      //     type: 'image/png',
	      //     id: '0f488973-63e2-4a1d-a509-d1b492f10344',
	      //     dataURL: "data:image/png;base64,...",
	      //     accepted: true
	      //   }
	      // ],

	      /**
	       * Dropzone Options. These will be passed to the Dropzone instantiation.
	       *
	       * @url https://github.com/dropzone/dropzone/blob/main/src/options.js
	       */
	      dropzoneOptions: {
	        /**
	         * Required. A URL must be set in the Dropzone options configuration
	         */
	        url: 'https://app-46361.on-aptible.com/file-upload',

	        // /**
	        //  * Example Dropzone init configuration
	        //  */
	        // init: function() {
	        //   /**
	        //    * Example added file event hook. Called when a file is added to the queue
	        //    *
	        //    * @url https://github.com/dropzone/dropzone/blob/f50d1828ab5df79a76be00d1306cc320e39a27f4/src/options.js#L611
	        //    *
	        //    * @param  {Object}  file  Dropzone file object
	        //    */
	        //   this.on('addedfile', function(file) {
	        //     //... some custom methods can go here

	        //     file.previewElement.querySelector(FileSelector.selectors.documentRemoveLabel).innerText = 'cancel';

	        //     file.previewElement.querySelector(FileSelector.selectors.documentRemove)
	        //       .addEventListener('click', () => {
	        //         //... cancel event for uploading file
	        //       });
	        //   });

	        //   /**
	        //    * Example success event hook. When the complete upload is finished
	        //    * and successful.
	        //    *
	        //    * @url https://github.com/dropzone/dropzone/blob/f50d1828ab5df79a76be00d1306cc320e39a27f4/src/options.js#L752
	        //    *
	        //    * @param  {Object}  file  Dropzone file object
	        //    */
	        //   this.on('success', function(file) {
	        //     //... some custom methods can go here

	        //     file.previewElement.querySelector(FileSelector.selectors.documentRemoveLabel).innerText = 'remove';

	        //     file.previewElement.querySelector(FileSelector.selectors.documentRemove)
	        //       .addEventListener('click', () => {
	        //         //... remove event for uploaded file
	        //       });
	        //   });

	        //   /**
	        //    * Example sending event hook. Called just before the file is sent.
	        //    * Gets the `xhr` object as second parameter, so you can modify it
	        //    * (for example to add a CSRF token) and a `formData` object to add
	        //    * additional information.
	        //    *
	        //    * @url https://github.com/dropzone/dropzone/blob/f50d1828ab5df79a76be00d1306cc320e39a27f4/src/options.js#L746
	        //    *
	        //    * @param  {Object}  file      Dropzone file object
	        //    * @param  {Object}  xhr       The xhr request
	        //    * @param  {Object}  formData  Form data to append additional information to
	        //    */
	        //   this.on('sending', function(file, xhr, formData) {
	        //     let token = document.querySelector('[data-js="csrf"]').value;

	        //     formData.append('_csrf', token);
	        //     //...
	        //   });
	        // }
	      }
	    });
	  }
	})(document.querySelectorAll(FileSelector.selector));

	/**
	 * Add tabindex to pre tags to make them focusable. Site only
	 */

	document.addEventListener('DOMContentLoaded', () => {
	  document.querySelectorAll('pre').forEach(pre => {
	    if (!pre.hasAttribute('tabindex')) {
	      pre.setAttribute('tabindex', '0');
	    }
	  });
	});

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
